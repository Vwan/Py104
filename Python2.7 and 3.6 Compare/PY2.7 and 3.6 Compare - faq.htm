<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style>
.AlignLeft { text-align: left; }
.AlignCenter { text-align: center; }
.AlignRight { text-align: right; }
body { font-family: sans-serif; font-size: 11pt; }
img.AutoScale { max-width: 100%; max-height: 100%; }
td { vertical-align: top; padding-left: 4px; padding-right: 4px; }

tr.SectionGap td { font-size: 4px; border-left: none; border-top: none; border-bottom: 1px solid Black; border-right: 1px solid Black; }
tr.SectionAll td { border-left: none; border-top: none; border-bottom: 1px solid Black; border-right: 1px solid Black; }
tr.SectionBegin td { border-left: none; border-top: none; border-right: 1px solid Black; }
tr.SectionEnd td { border-left: none; border-top: none; border-bottom: 1px solid Black; border-right: 1px solid Black; }
tr.SectionMiddle td { border-left: none; border-top: none; border-right: 1px solid Black; }
tr.SubsectionAll td { border-left: none; border-top: none; border-bottom: 1px solid Gray; border-right: 1px solid Black; }
tr.SubsectionEnd td { border-left: none; border-top: none; border-bottom: 1px solid Gray; border-right: 1px solid Black; }
table.fc { border-top: 1px solid Black; border-left: 1px solid Black; width: 100%; font-family: monospace; font-size: 10pt; }
td.TextItemInsigMod { color: #000000; background-color: #EEEEFF; }
td.TextItemInsigOrphan { color: #000000; background-color: #FAEEFF; }
td.TextItemNum { color: #696969; background-color: #F0F0F0; }
td.TextItemSame { color: #000000; background-color: #FFFFFF; }
td.TextItemSigMod { color: #000000; background-color: #FFE3E3; }
td.TextItemSigOrphan { color: #000000; background-color: #F1E3FF; }
.TextSegInsigDiff { color: #0000FF; }
.TextSegReplacedDiff { color: #0000FF; font-style: italic; }
.TextSegSigDiff { color: #FF0000; }
td.TextItemInsigAdd { color: #000000; background-color: #EEEEFF; }
td.TextItemInsigDel { color: #000000; background-color: #EEEEFF; text-decoration: line-through; }
td.TextItemSigAdd { color: #000000; background-color: #FFE3E3; }
td.TextItemSigDel { color: #000000; background-color: #FFE3E3; text-decoration: line-through; }
</style>
<title>Text Compare</title>
</head>
<body>
Text Compare<br/>
Produced: 2017/8/8 21:10:26<br/>
&nbsp; &nbsp;
<br/>
Mode:&nbsp; All &nbsp;
<br/>
Left base folder: C:\Users\vivia\Downloads\Python 3.6.2 &nbsp;
<br/>
Right base folder: C:\Users\vivia\Downloads\Python 2.7 &nbsp;
<br/>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\faq\design.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Design and History FAQ</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Design and History FAQ</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">**********************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">**********************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why does Python use indentation for grouping of statements?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why does Python use indentation for grouping of statements?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===========================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===========================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Guido van Rossum believes that using indentation for grouping is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Guido van Rossum believes that using indentation for grouping is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">extremely elegant and contributes a lot to the clarity of the average</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">extremely elegant and contributes a lot to the clarity of the average</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python program. Most people learn to love this feature after a while.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python program. Most people learn to love this feature after a while.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Since there are no begin/end brackets there cannot be a disagreement</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Since there are no begin/end brackets there cannot be a disagreement</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">between grouping perceived by the parser and the human reader.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">between grouping perceived by the parser and the human reader.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Occasionally C programmers will encounter a fragment of code like</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Occasionally C programmers will encounter a fragment of code like</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; if (x &lt;= y)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; if (x &lt;= y)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x++;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x++;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; y--;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; y--;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; z++;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; z++;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Only the &quot;x++&quot; statement is executed if the condition is true, but the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Only the &quot;x++&quot; statement is executed if the condition is true, but the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">indentation leads you to believe otherwise.&nbsp; Even experienced C</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">indentation leads you to believe otherwise.&nbsp; Even experienced C</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">programmers will sometimes stare at it a long time wondering why &quot;y&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">programmers will sometimes stare at it a long time wondering why &quot;y&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is being decremented even for &quot;x &gt; y&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is being decremented even for &quot;x &gt; y&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Because there are no begin/end brackets, Python is much less prone to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Because there are no begin/end brackets, Python is much less prone to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">coding-style conflicts.&nbsp; In C there are many different ways to place</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">coding-style conflicts.&nbsp; In C there are many different ways to place</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the braces. If you're used to reading and writing code that uses one</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the braces. If you're used to reading and writing code that uses one</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">style, you will feel at least slightly uneasy when reading (or being</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">style, you will feel at least slightly uneasy when reading (or being</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">required to write) another style.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">required to write) another style.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Many coding styles place begin/end brackets on a line by themselves.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Many coding styles place begin/end brackets on a line by themselves.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This makes programs considerably longer and wastes valuable screen</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This makes programs considerably longer and wastes valuable screen</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">space, making it harder to get a good overview of a program.&nbsp; Ideally,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">space, making it harder to get a good overview of a program.&nbsp; Ideally,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a function should fit on one screen (say, 20--30 lines).&nbsp; 20 lines of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a function should fit on one screen (say, 20--30 lines).&nbsp; 20 lines of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python can do a lot more work than 20 lines of C.&nbsp; This is not solely</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python can do a lot more work than 20 lines of C.&nbsp; This is not solely</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">due to the lack of begin/end brackets -- the lack of declarations and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">due to the lack of begin/end brackets -- the lack of declarations and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the high-level data types are also responsible -- but the indentation-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the high-level data types are also responsible -- but the indentation-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">based syntax certainly helps.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">based syntax certainly helps.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why am I getting strange results with simple arithmetic operations?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why am I getting strange results with simple arithmetic operations?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===================================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===================================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">See the next question.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">See the next question.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">Why are floating<span class="TextSegSigDiff">-</span>point calculations so inaccurate?</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Why are floating<span class="TextSegInsigDiff"> </span>point calculations so inaccurate?</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">==================================================</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">==================================================</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Us</span><span class="TextSegSigDiff">ers</span> are often surprised by results like this:</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">People</span> are often<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">very</span> surprised by results like this:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 1.2 - 1.0</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 1.2 - 1.0</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0.19999999999999996</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0.19999999999999996</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">and think it is a bug in Python.&nbsp;<span class="TextSegInsigDiff"> </span>It's not.&nbsp; This has <span class="TextSegSigDiff">l</span><span class="TextSegSigDiff">ittle</span> to do</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">and think it is a bug in Python. It's not.&nbsp; This has <span class="TextSegSigDiff">nothing</span> to do</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">with Python, <span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">much</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">more</span><span class="TextSegInsigDiff"> </span>t<span class="TextSegSigDiff">o</span> <span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span>with how the underlying platform</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">with Python, <span class="TextSegSigDiff">b</span><span class="TextSegSigDiff">u</span>t with how the underlying <span class="TextSegSigDiff">C</span><span class="TextSegInsigDiff"> </span>platform<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">handles</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">floating</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">point</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">numbers,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ultimately</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">inaccuracies</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">introduced</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">when</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">ha</span><span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">dl</span><span class="TextSegSigDiff">e</span>s <span class="TextSegSigDiff">flo</span>a<span class="TextSegSigDiff">t</span>ing<span class="TextSegSigDiff">-p</span>o<span class="TextSegSigDiff">int</span> numbers.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">writing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">down</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">number</span>s <span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span>a<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">str</span>ing<span class="TextSegInsigDiff"> </span>o<span class="TextSegSigDiff">f</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fixed</span> number<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">digit</span>s.</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">The <span class="TextSegSigDiff">&quot;f</span><span class="TextSegSigDiff">loat&quot;</span> <span class="TextSegSigDiff">typ</span>e<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">i</span>n<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">CPyth</span>on <span class="TextSegSigDiff">uses</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">C</span> <span class="TextSegSigDiff">&quot;dou</span><span class="TextSegSigDiff">ble&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span> s<span class="TextSegSigDiff">torage.</span>&nbsp;<span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff">A</span> <span class="TextSegSigDiff">&quot;float&quot;</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">The <span class="TextSegSigDiff">internal</span> <span class="TextSegSigDiff">repres</span>en<span class="TextSegSigDiff">ta</span><span class="TextSegSigDiff">ti</span>on <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">floating</span> <span class="TextSegSigDiff">point</span> <span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">umb</span><span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">rs</span> <span class="TextSegSigDiff">u</span>s<span class="TextSegSigDiff">es</span> <span class="TextSegInsigDiff">a</span> <span class="TextSegSigDiff">fixed</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">bject's</span> <span class="TextSegSigDiff">value</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">stored</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span> binary <span class="TextSegSigDiff">floating-poin</span>t <span class="TextSegSigDiff">wi</span><span class="TextSegSigDiff">th</span> a <span class="TextSegSigDiff">f</span><span class="TextSegSigDiff">ix</span>ed</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">numb</span><span class="TextSegSigDiff">er</span> <span class="TextSegSigDiff">of</span> binary <span class="TextSegSigDiff">d</span><span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">g</span><span class="TextSegSigDiff">its</span><span class="TextSegInsigDiff"> </span>t<span class="TextSegSigDiff">o</span> <span class="TextSegSigDiff">represent</span> a <span class="TextSegSigDiff">decimal</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">number.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Som</span>e<span class="TextSegInsigDiff"> </span>d<span class="TextSegSigDiff">ecimal</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">numbers</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can't</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">represented</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">exactly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">binary,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">resulting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">small</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">roundoff</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">errors.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">precision</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(typically</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">53</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bits)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">uses</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">C</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">operations,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">which</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">tur</span>n <span class="TextSegSigDiff">re</span><span class="TextSegSigDiff">ly</span> <span class="TextSegSigDiff">on</span> the <span class="TextSegSigDiff">hardw</span>are <span class="TextSegSigDiff">imple</span><span class="TextSegSigDiff">m</span><span class="TextSegSigDiff">en</span>tat<span class="TextSegSigDiff">ion</span> <span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">n</span> <span class="TextSegSigDiff">th</span>e pr<span class="TextSegSigDiff">oc</span>es<span class="TextSegSigDiff">sor,</span> <span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">perform</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">I</span>n <span class="TextSegSigDiff">decimal</span> <span class="TextSegSigDiff">math,</span> th<span class="TextSegSigDiff">er</span>e are <span class="TextSegSigDiff">many</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">numbers</span><span class="TextSegInsigDiff"> </span>t<span class="TextSegSigDiff">h</span>at <span class="TextSegSigDiff">can't</span> <span class="TextSegSigDiff">b</span>e <span class="TextSegSigDiff">re</span>pres<span class="TextSegSigDiff">ented</span> <span class="TextSegSigDiff">with</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fixed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">number</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">decimal</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">digits,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">e.g.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">1/3</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">0.3333333333.......</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">floating-point</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">operations.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">This</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">means</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">far</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">floating-point</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">In</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">base</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">1/2</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">0.1,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">1/4</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">0.01,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">1/8</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">0.001,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">etc.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">.2</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">equals</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2/10</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">oper</span><span class="TextSegSigDiff">ation</span>s <span class="TextSegSigDiff">a</span>re <span class="TextSegSigDiff">concerned,</span> <span class="TextSegSigDiff">Py</span>th<span class="TextSegSigDiff">on</span> b<span class="TextSegSigDiff">ehaves</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">like</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">man</span>y <span class="TextSegSigDiff">p</span><span class="TextSegSigDiff">opular</span> <span class="TextSegSigDiff">languages</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">equal</span>s <span class="TextSegSigDiff">1/5,</span><span class="TextSegInsigDiff"> </span>re<span class="TextSegSigDiff">sulting</span> <span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">n</span> th<span class="TextSegSigDiff">e</span> b<span class="TextSegSigDiff">in</span><span class="TextSegSigDiff">ar</span>y <span class="TextSegSigDiff">fractional</span> <span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">umber</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">0.001100110011001...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">including</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">C</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Java.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Floating</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">point</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">numbers</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">only</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">32</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">64</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bits</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">precision,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">so</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">M</span><span class="TextSegSigDiff">any</span> <span class="TextSegSigDiff">nu</span><span class="TextSegSigDiff">mbers</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">c</span>an <span class="TextSegSigDiff">b</span>e <span class="TextSegSigDiff">written</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">easily</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">decimal</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">nota</span>ti<span class="TextSegSigDiff">o</span>n <span class="TextSegSigDiff">cannot</span><span class="TextSegInsigDiff"> </span>be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">digits</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">cut</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">off</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">at</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">som</span><span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">point,</span> an<span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">th</span>e <span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">sul</span>tin<span class="TextSegSigDiff">g</span> <span class="TextSegSigDiff">num</span>be<span class="TextSegSigDiff">r</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">0.199999999999999996</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">decimal,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">0.2.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">expressed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">exactly</span> <span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">binary</span><span class="TextSegInsigDiff"> </span>floating<span class="TextSegSigDiff">-</span>point<span class="TextSegSigDiff">.</span>&nbsp; <span class="TextSegInsigDiff">F</span><span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">r</span> <span class="TextSegSigDiff">ex</span>am<span class="TextSegSigDiff">ple,</span> a<span class="TextSegSigDiff">fter:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">A</span> floating<span class="TextSegInsigDiff"> </span>point <span class="TextSegSigDiff">number's</span> <span class="TextSegSigDiff">&quot;repr()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff">f</span><span class="TextSegSigDiff">unction</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">prints</span> a<span class="TextSegSigDiff">s</span><span class="TextSegInsigDiff"> </span>m<span class="TextSegSigDiff">any</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">digits</span> a<span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">e</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">necessary</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">make</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;eval(repr(f))</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">==</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">f&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">true</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">any</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">float</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">f.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">The</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;str()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">function</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">prints</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fewer</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">digits</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">often</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">results</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">more</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sensible</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">number</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">was</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">probably</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">intended:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">x</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">1.2</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">1.1</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">-</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">0.9</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">0.20000000000000007</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">print</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">1.1</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">-</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">0.9</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">0.2</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">the <span class="TextSegSigDiff">val</span>ue <span class="TextSegSigDiff">stored</span><span class="TextSegInsigDiff"> </span>f<span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">&quot;x&quot;</span> is <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">(v</span>er<span class="TextSegSigDiff">y</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">good)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">app</span>ro<span class="TextSegSigDiff">ximatio</span>n to <span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">decim</span><span class="TextSegSigDiff">al</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">One</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span>the <span class="TextSegSigDiff">conseq</span>ue<span class="TextSegSigDiff">nces</span> <span class="TextSegSigDiff">o</span>f <span class="TextSegSigDiff">this</span> is <span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span> e<span class="TextSegSigDiff">r</span>r<span class="TextSegSigDiff">or-</span><span class="TextSegSigDiff">p</span>ron<span class="TextSegSigDiff">e</span> to <span class="TextSegSigDiff">compare</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">valu</span>e <span class="TextSegSigDiff">&quot;1.2&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bu</span>t <span class="TextSegSigDiff">i</span>s <span class="TextSegSigDiff">no</span><span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">exactly</span> <span class="TextSegSigDiff">equ</span>a<span class="TextSegSigDiff">l</span><span class="TextSegInsigDiff"> </span>t<span class="TextSegSigDiff">o</span> it.&nbsp; <span class="TextSegSigDiff">O</span>n<span class="TextSegInsigDiff"> </span>a<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">typical</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">m</span>ac<span class="TextSegSigDiff">hine,</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">th</span>e <span class="TextSegSigDiff">res</span><span class="TextSegSigDiff">ul</span>t<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span> s<span class="TextSegSigDiff">ome</span> <span class="TextSegSigDiff">computation</span> <span class="TextSegSigDiff">to</span> a<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">floa</span>t <span class="TextSegSigDiff">w</span>it<span class="TextSegSigDiff">h</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;==&quot;</span>. <span class="TextSegSigDiff">Tiny</span> <span class="TextSegSigDiff">i</span>na<span class="TextSegSigDiff">c</span><span class="TextSegSigDiff">cur</span>ac<span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">es</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">th<span class="TextSegSigDiff">e</span><span class="TextSegInsigDiff"> </span>a<span class="TextSegSigDiff">ctu</span><span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">l</span> st<span class="TextSegSigDiff">or</span>e<span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">v</span><span class="TextSegSigDiff">alu</span>e<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">may</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">mean</span><span class="TextSegInsigDiff"> </span>tha<span class="TextSegSigDiff">t</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;==&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fails.</span>&nbsp;<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">In</span>ste<span class="TextSegSigDiff">ad,</span> <span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">check</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">th</span>e</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">difference</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">between</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">two</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">numbers</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">less</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">than</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">certain</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">threshold:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">1.0011001100110011001100110011001100110011001100110011</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(binary)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">epsilon</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">0.0000000000001</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">#</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Tiny</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">allowed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">error</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">which</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">exactly:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">expected_result</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">0.4</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">1.1999999999999999555910790149937383830547332763671875</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(decimal)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">expected_result-epsilon</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&lt;=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">computation()</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&lt;=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">expected_result+epsilon:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">typical</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">precision</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">53</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bits</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">provides</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">floats</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">15--16</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">...</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">decimal</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">digits</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">accuracy.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">For</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fuller</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">explanation,</span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff">p</span>lease see the floating point arithmetic</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">P</span>lease see the <span class="TextSegSigDiff">chapter</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span><span class="TextSegInsigDiff"> </span>floating point arithmetic<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">chapter</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">th</span>e <span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tut</span>or<span class="TextSegSigDiff">ial</span>.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">tu</span><span class="TextSegSigDiff">torial</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">mor</span>e <span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">nf</span>or<span class="TextSegSigDiff">mation</span>.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why are Python strings immutable?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why are Python strings immutable?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There are several advantages.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There are several advantages.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">One is performance: knowing that a string is immutable means we can</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">One is performance: knowing that a string is immutable means we can</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">allocate space for it at creation time, and the storage requirements</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">allocate space for it at creation time, and the storage requirements</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">are fixed and unchanging.&nbsp; This is also one of the reasons for the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">are fixed and unchanging.&nbsp; This is also one of the reasons for the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">distinction between tuples and lists.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">distinction between tuples and lists.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Another advantage is that strings in Python are considered as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Another advantage is that strings in Python are considered as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;elemental&quot; as numbers.&nbsp; No amount of activity will change the value 8</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;elemental&quot; as numbers.&nbsp; No amount of activity will change the value 8</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to anything else, and in Python, no amount of activity will change the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to anything else, and in Python, no amount of activity will change the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">string &quot;eight&quot; to anything else.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">string &quot;eight&quot; to anything else.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why must 'self' be used explicitly in method definitions and calls?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why must 'self' be used explicitly in method definitions and calls?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===================================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===================================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The idea was borrowed from Modula-3.&nbsp; It turns out to be very useful,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The idea was borrowed from Modula-3.&nbsp; It turns out to be very useful,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for a variety of reasons.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for a variety of reasons.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">First, it's more obvious that you are using a method or instance</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">First, it's more obvious that you are using a method or instance</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">attribute instead of a local variable.&nbsp; Reading &quot;self.x&quot; or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">attribute instead of a local variable.&nbsp; Reading &quot;self.x&quot; or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;self.meth()&quot; makes it absolutely clear that an instance variable or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;self.meth()&quot; makes it absolutely clear that an instance variable or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">method is used even if you don't know the class definition by heart.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">method is used even if you don't know the class definition by heart.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In C++, you can sort of tell by the lack of a local variable</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In C++, you can sort of tell by the lack of a local variable</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">declaration (assuming globals are rare or easily recognizable) -- but</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">declaration (assuming globals are rare or easily recognizable) -- but</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in Python, there are no local variable declarations, so you'd have to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in Python, there are no local variable declarations, so you'd have to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">look up the class definition to be sure.&nbsp; Some C++ and Java coding</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">look up the class definition to be sure.&nbsp; Some C++ and Java coding</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">standards call for instance attributes to have an &quot;m_&quot; prefix, so this</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">standards call for instance attributes to have an &quot;m_&quot; prefix, so this</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">explicitness is still useful in those languages, too.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">explicitness is still useful in those languages, too.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Second, it means that no special syntax is necessary if you want to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Second, it means that no special syntax is necessary if you want to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">explicitly reference or call the method from a particular class.&nbsp; In</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">explicitly reference or call the method from a particular class.&nbsp; In</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">C++, if you want to use a method from a base class which is overridden</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">C++, if you want to use a method from a base class which is overridden</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in a derived class, you have to use the &quot;::&quot; operator -- in Python you</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in a derived class, you have to use the &quot;::&quot; operator -- in Python you</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">can write &quot;baseclass.methodname(self, &lt;argument list&gt;)&quot;.&nbsp; This is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">can write &quot;baseclass.methodname(self, &lt;argument list&gt;)&quot;.&nbsp; This is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">particularly useful for &quot;__init__()&quot; methods, and in general in cases</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">particularly useful for &quot;__init__()&quot; methods, and in general in cases</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">where a derived class method wants to extend the base class method of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">where a derived class method wants to extend the base class method of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the same name and thus has to call the base class method somehow.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the same name and thus has to call the base class method somehow.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Finally, for instance variables it solves a syntactic problem with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Finally, for instance variables it solves a syntactic problem with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">assignment: since local variables in Python are (by definition!) those</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">assignment: since local variables in Python are (by definition!) those</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">variables to which a value is assigned in a function body (and that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">variables to which a value is assigned in a function body (and that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">aren't explicitly declared global), there has to be some way to tell</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">aren't explicitly declared global), there has to be some way to tell</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the interpreter that an assignment was meant to assign to an instance</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the interpreter that an assignment was meant to assign to an instance</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">variable instead of to a local variable, and it should preferably be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">variable instead of to a local variable, and it should preferably be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">syntactic (for efficiency reasons).&nbsp; C++ does this through</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">syntactic (for efficiency reasons).&nbsp; C++ does this through</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">declarations, but Python doesn't have declarations and it would be a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">declarations, but Python doesn't have declarations and it would be a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">pity having to introduce them just for this purpose.&nbsp; Using the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">pity having to introduce them just for this purpose.&nbsp; Using the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">explicit &quot;self.var&quot; solves this nicely.&nbsp; Similarly, for using instance</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">explicit &quot;self.var&quot; solves this nicely.&nbsp; Similarly, for using instance</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">variables, having to write &quot;self.var&quot; means that references to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">variables, having to write &quot;self.var&quot; means that references to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">unqualified names inside a method don't have to search the instance's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">unqualified names inside a method don't have to search the instance's</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">directories.&nbsp; To put it another way, local variables and instance</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">directories.&nbsp; To put it another way, local variables and instance</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">variables live in two different namespaces, and you need to tell</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">variables live in two different namespaces, and you need to tell</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python which namespace to use.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python which namespace to use.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why can't I use an assignment in an expression?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why can't I use an assignment in an expression?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===============================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===============================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Many people used to C or Perl complain that they want to use this C</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Many people used to C or Perl complain that they want to use this C</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">idiom:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">idiom:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; while (line = readline(f)) {</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; while (line = readline(f)) {</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; // do something with line</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; // do something with line</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">where in Python you're forced to write this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">where in Python you're forced to write this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; while True:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; while True:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; line = f.readline()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; line = f.readline()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; if not line:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; if not line:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...&nbsp; # do something with line</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...&nbsp; # do something with line</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The reason for not allowing assignment in Python expressions is a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The reason for not allowing assignment in Python expressions is a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">common, hard-to-find bug in those other languages, caused by this</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">common, hard-to-find bug in those other languages, caused by this</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">construct:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">construct:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; if (x = 0) {</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; if (x = 0) {</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; // error handling</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; // error handling</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; else {</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; else {</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; // code that only works for nonzero x</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; // code that only works for nonzero x</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The error is a simple typo: &quot;x = 0&quot;, which assigns 0 to the variable</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The error is a simple typo: &quot;x = 0&quot;, which assigns 0 to the variable</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;x&quot;, was written while the comparison &quot;x == 0&quot; is certainly what was</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;x&quot;, was written while the comparison &quot;x == 0&quot; is certainly what was</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">intended.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">intended.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Many alternatives have been proposed.&nbsp; Most are hacks that save some</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Many alternatives have been proposed.&nbsp; Most are hacks that save some</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">typing but use arbitrary or cryptic syntax or keywords, and fail the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">typing but use arbitrary or cryptic syntax or keywords, and fail the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">simple criterion for language change proposals: it should intuitively</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">simple criterion for language change proposals: it should intuitively</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">suggest the proper meaning to a human reader who has not yet been</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">suggest the proper meaning to a human reader who has not yet been</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">introduced to the construct.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">introduced to the construct.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">An interesting phenomenon is that most experienced Python programmers</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">An interesting phenomenon is that most experienced Python programmers</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">recognize the &quot;while True&quot; idiom and don't seem to be missing the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">recognize the &quot;while True&quot; idiom and don't seem to be missing the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">assignment in expression construct much; it's only newcomers who</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">assignment in expression construct much; it's only newcomers who</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">express a strong desire to add this to the language.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">express a strong desire to add this to the language.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There's an alternative way of spelling this that seems attractive but</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There's an alternative way of spelling this that seems attractive but</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is generally less robust than the &quot;while True&quot; solution:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is generally less robust than the &quot;while True&quot; solution:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; line = f.readline()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; line = f.readline()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; while line:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; while line:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...&nbsp; # do something with line...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...&nbsp; # do something with line...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; line = f.readline()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; line = f.readline()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The problem with this is that if you change your mind about exactly</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The problem with this is that if you change your mind about exactly</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">how you get the next line (e.g. you want to change it into</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">how you get the next line (e.g. you want to change it into</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;sys.stdin.readline()&quot;) you have to remember to change two places in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;sys.stdin.readline()&quot;) you have to remember to change two places in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">your program -- the second occurrence is hidden at the bottom of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">your program -- the second occurrence is hidden at the bottom of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">loop.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">loop.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">The best approach is to use iterators, making it possible to loop</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The best approach is to use iterators, making it possible to loop</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">through objects using the &quot;for&quot; statement.&nbsp; For example, <span class="TextSegSigDiff">*fil</span>e</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">through objects using the &quot;for&quot; statement.&nbsp; For example, <span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">th</span>e</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">objects<span class="TextSegSigDiff">*</span> support the iterator protocol,<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">so</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">write</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">simply:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">current</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">versi</span>o<span class="TextSegSigDiff">n</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">o</span>bjects support the iterator protocol,</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">so</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">now</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">write</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">simply:</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; for line in f:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; for line in f:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...&nbsp; # do something with line...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...&nbsp; # do something with line...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why does Python use methods for some functionality (e.g. list.index()) but functions for other (e.g. len(list))?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why does Python use methods for some functionality (e.g. list.index()) but functions for other (e.g. len(list))?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">================================================================================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">================================================================================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The major reason is history. Functions were used for those operations</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The major reason is history. Functions were used for those operations</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that were generic for a group of types and which were intended to work</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that were generic for a group of types and which were intended to work</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">even for objects that didn't have methods at all (e.g. tuples).&nbsp; It is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">even for objects that didn't have methods at all (e.g. tuples).&nbsp; It is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">also convenient to have a function that can readily be applied to an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">also convenient to have a function that can readily be applied to an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">amorphous collection of objects when you use the functional features</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">amorphous collection of objects when you use the functional features</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of Python (&quot;map()&quot;, &quot;zip()&quot; et al).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of Python (&quot;map()&quot;, &quot;zip()&quot; et al).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In fact, implementing &quot;len()&quot;, &quot;max()&quot;, &quot;min()&quot; as a built-in function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In fact, implementing &quot;len()&quot;, &quot;max()&quot;, &quot;min()&quot; as a built-in function</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is actually less code than implementing them as methods for each type.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is actually less code than implementing them as methods for each type.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">One can quibble about individual cases but it's a part of Python, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">One can quibble about individual cases but it's a part of Python, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">it's too late to make such fundamental changes now. The functions have</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">it's too late to make such fundamental changes now. The functions have</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to remain to avoid massive code breakage.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to remain to avoid massive code breakage.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note: For string operations, Python has moved from external</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note: For string operations, Python has moved from external</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; functions (the &quot;string&quot; module) to methods.&nbsp; However, &quot;len()&quot; is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; functions (the &quot;string&quot; module) to methods.&nbsp; However, &quot;len()&quot; is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; still a function.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; still a function.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why is join() a string method instead of a list or tuple method?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why is join() a string method instead of a list or tuple method?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">================================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">================================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Strings became much more like other standard types starting in Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Strings became much more like other standard types starting in Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">1.6, when methods were added which give the same functionality that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">1.6, when methods were added which give the same functionality that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">has always been available using the functions of the string module.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">has always been available using the functions of the string module.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Most of these new methods have been widely accepted, but the one which</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Most of these new methods have been widely accepted, but the one which</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">appears to make some programmers feel uncomfortable is:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">appears to make some programmers feel uncomfortable is:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &quot;, &quot;.join(['1', '2', '4', '8', '16'])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &quot;, &quot;.join(['1', '2', '4', '8', '16'])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">which gives the result:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">which gives the result:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &quot;1, 2, 4, 8, 16&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &quot;1, 2, 4, 8, 16&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There are two common arguments against this usage.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There are two common arguments against this usage.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The first runs along the lines of: &quot;It looks really ugly using a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The first runs along the lines of: &quot;It looks really ugly using a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">method of a string literal (string constant)&quot;, to which the answer is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">method of a string literal (string constant)&quot;, to which the answer is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that it might, but a string literal is just a fixed value. If the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that it might, but a string literal is just a fixed value. If the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">methods are to be allowed on names bound to strings there is no</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">methods are to be allowed on names bound to strings there is no</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">logical reason to make them unavailable on literals.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">logical reason to make them unavailable on literals.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The second objection is typically cast as: &quot;I am really telling a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The second objection is typically cast as: &quot;I am really telling a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">sequence to join its members together with a string constant&quot;.&nbsp; Sadly,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">sequence to join its members together with a string constant&quot;.&nbsp; Sadly,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you aren't.&nbsp; For some reason there seems to be much less difficulty</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you aren't.&nbsp; For some reason there seems to be much less difficulty</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">with having &quot;split()&quot; as a string method, since in that case it is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">with having &quot;split()&quot; as a string method, since in that case it is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">easy to see that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">easy to see that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &quot;1, 2, 4, 8, 16&quot;.split(&quot;, &quot;)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &quot;1, 2, 4, 8, 16&quot;.split(&quot;, &quot;)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is an instruction to a string literal to return the substrings</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is an instruction to a string literal to return the substrings</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">delimited by the given separator (or, by default, arbitrary runs of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">delimited by the given separator (or, by default, arbitrary runs of</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">white</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">space).</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">In</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">case</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Unicode</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">string</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">returns</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">list</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Unicode</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">strings,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ASCII</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">string</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">returns</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">list</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ASCII</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">strings,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">everyone</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">white</span> <span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">pace)</span>.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">happy</span>.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;join()&quot; is a string method because in using it you are telling the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;join()&quot; is a string method because in using it you are telling the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">separator string to iterate over a sequence of strings and insert</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">separator string to iterate over a sequence of strings and insert</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">itself between adjacent elements.&nbsp; This method can be used with any</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">itself between adjacent elements.&nbsp; This method can be used with any</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">argument which obeys the rules for sequence objects, including any new</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">argument which obeys the rules for sequence objects, including any new</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">classes</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">might</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">define</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">yourself.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">c<span class="TextSegSigDiff">las</span>se<span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">might</span> <span class="TextSegSigDiff">define</span> <span class="TextSegSigDiff">yourself.</span> <span class="TextSegInsigDiff">S</span><span class="TextSegSigDiff">imilar</span> method<span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">exis</span>t for <span class="TextSegSigDiff">by</span><span class="TextSegSigDiff">te</span>s a<span class="TextSegSigDiff">nd</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Be</span>c<span class="TextSegSigDiff">au</span>se <span class="TextSegSigDiff">th</span><span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">a</span> <span class="TextSegInsigDiff">s</span><span class="TextSegSigDiff">tring</span> method <span class="TextSegSigDiff">i</span>t <span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">work</span><span class="TextSegInsigDiff"> </span>for <span class="TextSegSigDiff">Unicode</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">string</span>s a<span class="TextSegSigDiff">s</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">well</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">plain</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ASCII</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">strings.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;join()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">were</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">method</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">sequence</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">types</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">then</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sequence</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">types</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">would</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">decide</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">which</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">type</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">string</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">return</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">depending</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">type</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">separator.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">bytearray</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">objects.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">none</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">these</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">arguments</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">persuade</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">then</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">moment</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">continue</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;join()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">function</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">from</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">string</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">which</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">allows</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">write</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">string.join(['1',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'2',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'4',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'8',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'16'],</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;)</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How fast are exceptions?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How fast are exceptions?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">========================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">========================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A try/except block is extremely efficient if no exceptions are raised.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A try/except block is extremely efficient if no exceptions are raised.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Actually catching an exception is expensive.&nbsp; In versions of Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Actually catching an exception is expensive.&nbsp; In versions of Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">prior to 2.0 it was common to use this idiom:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">prior to 2.0 it was common to use this idiom:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; try:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; try:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; value = mydict[key]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; value = mydict[key]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; except KeyError:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; except KeyError:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; mydict[key] = getvalue(key)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; mydict[key] = getvalue(key)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; value = mydict[key]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; value = mydict[key]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This only made sense when you expected the dict to have the key almost</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This only made sense when you expected the dict to have the key almost</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">all the time.&nbsp; If that wasn't the case, you coded it like this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">all the time.&nbsp; If that wasn't the case, you coded it like this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; if key in mydict:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; if key in mydict:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; value = mydict[key]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; value = mydict[key]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; else:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; else:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; value = mydict[key] = getvalue(key)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; value = mydict[key] = getvalue(key)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">For</span> th<span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">specific</span> <span class="TextSegSigDiff">cas</span><span class="TextSegSigDiff">e</span>, you co<span class="TextSegSigDiff">ul</span>d <span class="TextSegSigDiff">al</span><span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">use</span> &quot;value =</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Note:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">In</span> <span class="TextSegSigDiff">Py</span>th<span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">2.0</span> <span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">higher</span>, you<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span> cod<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">as</span> &quot;value =</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">dict.setdefault(key, getvalue(key))&quot;<span class="TextSegSigDiff">,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">but</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">only</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;getvalue()&quot;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">my</span>dict.setdefault(key, getvalue(key))&quot;<span class="TextSegSigDiff">.</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">call</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">cheap</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">enough</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">because</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">evaluated</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">all</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">cases.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why isn't there a switch or case statement in Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why isn't there a switch or case statement in Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=====================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=====================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You can do this easily enough with a sequence of &quot;if... elif...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You can do this easily enough with a sequence of &quot;if... elif...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">elif... else&quot;. There have been some proposals for switch statement</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">elif... else&quot;. There have been some proposals for switch statement</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">syntax, but there is no consensus (yet) on whether and how to do range</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">syntax, but there is no consensus (yet) on whether and how to do range</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">tests.&nbsp; See **PEP 275** for complete details and the current status.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">tests.&nbsp; See **PEP 275** for complete details and the current status.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For cases where you need to choose from a very large number of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For cases where you need to choose from a very large number of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">possibilities, you can create a dictionary mapping case values to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">possibilities, you can create a dictionary mapping case values to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">functions to call.&nbsp; For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">functions to call.&nbsp; For example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def function_1(...):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def function_1(...):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; functions = {'a': function_1,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; functions = {'a': function_1,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 'b': function_2,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 'b': function_2,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 'c': self.method_1, ...}</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 'c': self.method_1, ...}</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; func = functions[value]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; func = functions[value]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; func()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; func()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For calling methods on objects, you can simplify yet further by using</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For calling methods on objects, you can simplify yet further by using</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the &quot;getattr()&quot; built-in to retrieve methods with a particular name:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the &quot;getattr()&quot; built-in to retrieve methods with a particular name:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def visit_a(self, ...):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def visit_a(self, ...):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def dispatch(self, value):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def dispatch(self, value):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; method_name = 'visit_' + str(value)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; method_name = 'visit_' + str(value)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; method = getattr(self, method_name)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; method = getattr(self, method_name)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; method()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; method()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It's suggested that you use a prefix for the method names, such as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It's suggested that you use a prefix for the method names, such as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;visit_&quot; in this example.&nbsp; Without such a prefix, if values are coming</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;visit_&quot; in this example.&nbsp; Without such a prefix, if values are coming</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">from an untrusted source, an attacker would be able to call any method</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">from an untrusted source, an attacker would be able to call any method</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">on your object.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">on your object.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Can't you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Can't you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">========================================================================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">========================================================================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Answer 1: Unfortunately, the interpreter pushes at least one C stack</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Answer 1: Unfortunately, the interpreter pushes at least one C stack</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">frame for each Python stack frame.&nbsp; Also, extensions can call back</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">frame for each Python stack frame.&nbsp; Also, extensions can call back</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">into Python at almost random moments.&nbsp; Therefore, a complete threads</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">into Python at almost random moments.&nbsp; Therefore, a complete threads</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">implementation requires thread support for C.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">implementation requires thread support for C.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Answer 2: Fortunately, there is Stackless Python, which has a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Answer 2: Fortunately, there is Stackless Python, which has a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">completely redesigned interpreter loop that avoids the C stack.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">completely redesigned interpreter loop that avoids the C stack.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why can't lambda expressions contain statements?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why can't lambda expressions contain statements?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python lambda expressions cannot contain statements because Python's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python lambda expressions cannot contain statements because Python's</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">syntactic framework can't handle statements nested inside expressions.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">syntactic framework can't handle statements nested inside expressions.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">However, in Python, this is not a serious problem.&nbsp; Unlike lambda</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">However, in Python, this is not a serious problem.&nbsp; Unlike lambda</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">forms in other languages, where they add functionality, Python lambdas</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">forms in other languages, where they add functionality, Python lambdas</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">are only a shorthand notation if you're too lazy to define a function.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">are only a shorthand notation if you're too lazy to define a function.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Functions are already first class objects in Python, and can be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Functions are already first class objects in Python, and can be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">declared in a local scope.&nbsp; Therefore the only advantage of using a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">declared in a local scope.&nbsp; Therefore the only advantage of using a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">lambda instead of a locally-defined function is that you don't need to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">lambda instead of a locally-defined function is that you don't need to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">invent a name for the function -- but that's just a local variable to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">invent a name for the function -- but that's just a local variable to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">which the function object (which is exactly the same type of object</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">which the function object (which is exactly the same type of object</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that a lambda expression yields) is assigned!</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that a lambda expression yields) is assigned!</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Can Python be compiled to machine code, C or some other language?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Can Python be compiled to machine code, C or some other language?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=================================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=================================================================</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Cython</span> <span class="TextSegSigDiff">compiles</span><span class="TextSegInsigDiff"> </span>a<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">modified</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ver</span>si<span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">of</span> Python <span class="TextSegSigDiff">wit</span>h <span class="TextSegSigDiff">optional</span> <span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">nnota</span>t<span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">on</span>s</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Not</span> <span class="TextSegSigDiff">e</span>asi<span class="TextSegSigDiff">ly.</span>&nbsp; Python<span class="TextSegSigDiff">'s</span> <span class="TextSegSigDiff">hig</span>h<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">level</span> <span class="TextSegSigDiff">dat</span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">types,</span> <span class="TextSegSigDiff">dyn</span><span class="TextSegSigDiff">amic</span><span class="TextSegInsigDiff"> </span>t<span class="TextSegSigDiff">yping</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">object</span>s</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">i<span class="TextSegSigDiff">nt</span>o<span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff">C</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">extens</span>ion<span class="TextSegSigDiff">s.</span>&nbsp; <span class="TextSegSigDiff">Nuitka</span> i<span class="TextSegSigDiff">s</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span>n <span class="TextSegSigDiff">up-and-com</span>ing <span class="TextSegSigDiff">compiler</span> o<span class="TextSegSigDiff">f</span> <span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">into</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">run-t</span>i<span class="TextSegSigDiff">me</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">inv</span>o<span class="TextSegInsigDiff">c</span><span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">t</span>ion <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> in<span class="TextSegSigDiff">terpreter</span> <span class="TextSegSigDiff">(us</span>ing <span class="TextSegSigDiff">&quot;eva</span><span class="TextSegSigDiff">l()&quot;</span> o<span class="TextSegSigDiff">r</span> <span class="TextSegSigDiff">&quot;exec&quot;)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">C++</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">cod</span><span class="TextSegSigDiff">e,</span> a<span class="TextSegSigDiff">iming</span> t<span class="TextSegSigDiff">o</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">suppor</span>t <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">fu</span><span class="TextSegSigDiff">ll</span> Python <span class="TextSegSigDiff">language.</span> <span class="TextSegSigDiff">Fo</span><span class="TextSegSigDiff">r</span> co<span class="TextSegSigDiff">mpiling</span><span class="TextSegInsigDiff"> </span>t<span class="TextSegSigDiff">o</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">ogether</span> <span class="TextSegSigDiff">me</span>a<span class="TextSegSigDiff">n</span> t<span class="TextSegSigDiff">ha</span>t <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">&quot;compiled&quot;</span> Python <span class="TextSegSigDiff">program</span> <span class="TextSegSigDiff">would</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">probably</span> co<span class="TextSegSigDiff">nsis</span>t</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">mostly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">calls</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">into</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">run-time</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">system,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">even</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">seemingly</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">simple</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">operations</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">like</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;x+1&quot;.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Java</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">consider</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">VOC.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Several</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">projects</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">described</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">newsgroup</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">at</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">past</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">conferences</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">shown</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">approach</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">feasible,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">although</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">speedups</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">reached</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">so</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">far</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">only</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">modest</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(e.g.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2x).</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Jython</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">uses</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">same</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">strategy</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">compiling</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Java</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bytecode.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">(Jim</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Hugunin</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">has</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">demonstrated</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">combination</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">whole-program</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">analysis,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">speedups</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">1000x</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">feasible</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">small</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">demo</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">programs.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">See</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">proceedings</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">from</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">1997</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">conference</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">more</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">information.)</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Internally,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">source</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">always</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">translated</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">into</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bytecode</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">representation,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bytecode</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">then</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">executed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">by</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">virtual</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">machine.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">In</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">order</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">avoid</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">overhead</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">repeatedly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">parsing</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">translating</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">modules</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">rarely</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">change,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">byte</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">written</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">into</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">whose</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">name</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ends</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;.pyc&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">whenever</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">parsed.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">When</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">corresponding</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">.py</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">changed,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">parsed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">translated</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">again</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">.pyc</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">rewritten.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">There</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">no</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">performance</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">difference</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">once</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">.pyc</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">has</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">been</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">loaded,</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bytecode</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">read</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">from</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">.pyc</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">exactly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">same</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">bytecode</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">created</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">by</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">direct</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">translation.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">only</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">difference</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">loading</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">from</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">.pyc</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">faster</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">than</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">parsing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">translating</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">.py</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">so</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">presence</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">precompiled</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">.pyc</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">files</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">improves</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">start-up</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">time</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">scripts.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">desired,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Lib/compileall.py</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">used</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">create</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">valid</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">.pyc</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">files</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">given</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">set</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">modules.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Note</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">main</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">script</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">executed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">by</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">even</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">its</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">filename</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">ends</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">.py,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">compiled</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">.pyc</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">It</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">compiled</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">bytecode,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">but</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bytecode</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">saved</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Usually</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">main</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">scripts</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">quite</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">short,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">so</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">doesn't</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">cost</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">much</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">speed.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">There</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">also</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">several</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">programs</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">which</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">make</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">easier</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">intermingle</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">C</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">various</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ways</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">increase</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">performance.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">See,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">example,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Cython</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Psyco,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Pyrex,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">PyInline,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Py2Cmod,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Weave.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">How does Python manage memory?</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">How does Python manage memory?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==============================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==============================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">The details of Python memory management depend on the implementation.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The details of Python memory management depend on the implementation.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">The standard implementation of Python<span class="TextSegSigDiff">,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">*CPython*,</span> uses reference</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">The standard <span class="TextSegSigDiff">C</span><span class="TextSegInsigDiff"> </span>implementation of Python uses reference<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">counting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">counting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span>detect inaccessible objects, and another mechanism to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">detect inaccessible objects, and another mechanism t<span class="TextSegSigDiff">o</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">c</span>o<span class="TextSegSigDiff">llect</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">collect</span><span class="TextSegInsigDiff"> </span>reference cycles, periodically executing a cycle detection</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">reference cycles, periodically executing a cycle detection<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">algorithm</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">algorithm</span><span class="TextSegInsigDiff"> </span>which looks for inaccessible cycles and deletes the objects</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">which looks for inaccessible cycles and deletes the objects<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">involved.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">involved.</span><span class="TextSegInsigDiff"> </span>The &quot;gc&quot; module provides functions to perform a garbage</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">The &quot;gc&quot; module provides functions to perform a garbag<span class="TextSegSigDiff">e</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">coll</span>e<span class="TextSegSigDiff">ction,</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">collection,</span><span class="TextSegInsigDiff"> </span>obtain debugging statistics, and tune the collector's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">obtain debugging statistics, and tune the collector's<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">parameters.</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">parameters.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">O</span>th<span class="TextSegSigDiff">er</span><span class="TextSegInsigDiff"> </span>i<span class="TextSegSigDiff">mplementati</span>on<span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">(such</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">Jy</span><span class="TextSegSigDiff">thon</span> o<span class="TextSegSigDiff">r</span> <span class="TextSegSigDiff">PyPy),</span><span class="TextSegInsigDiff"> </span>h<span class="TextSegSigDiff">ow</span>e<span class="TextSegSigDiff">ver,</span> <span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">r</span>e<span class="TextSegSigDiff">ly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">a</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Jy</span>th<span class="TextSegSigDiff">on</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">rel</span>i<span class="TextSegSigDiff">es</span><span class="TextSegInsigDiff"> </span>on <span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">he</span> <span class="TextSegSigDiff">Java</span> <span class="TextSegSigDiff">runtime</span> <span class="TextSegSigDiff">s</span>o <span class="TextSegSigDiff">t</span>he<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">JVM's</span> <span class="TextSegSigDiff">ga</span><span class="TextSegSigDiff">rbag</span>e<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">collector</span> <span class="TextSegSigDiff">is</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">different</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">mechanism</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">such</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">full-blown</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">garbage</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">collector.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">This</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">difference can cause some subtle porting problems if your<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">used.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">This</span><span class="TextSegInsigDiff"> </span>difference can cause some subtle porting problems if your</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">depends on the behavior of the reference counting<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">implementation.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">co</span>de<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">de</span>pends on the behavior of the reference counting</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">implementation.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">In</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">some</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">implementations,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">following</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(which</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fine</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">CPy</span><span class="TextSegSigDiff">thon)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">pr</span>ob<span class="TextSegSigDiff">ably</span> <span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">u</span>n <span class="TextSegSigDiff">ou</span>t <span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">f</span>il<span class="TextSegSigDiff">e</span> d<span class="TextSegSigDiff">esc</span><span class="TextSegSigDiff">riptors:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Somet</span><span class="TextSegSigDiff">imes</span> ob<span class="TextSegSigDiff">jects</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">get</span> <span class="TextSegSigDiff">stuck</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">i</span>n t<span class="TextSegSigDiff">racebacks</span> <span class="TextSegSigDiff">temporar</span>il<span class="TextSegSigDiff">y</span> <span class="TextSegSigDiff">an</span>d<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">hence</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">deallocated</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">when</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">might</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">expect.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Clear</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tracebacks</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">very_long_list_of_files:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; &nbsp;<span class="TextSegInsigDiff">&nbsp; &nbsp; </span><span class="TextSegSigDiff">f</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">open(file)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">import</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sys</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; &nbsp;<span class="TextSegInsigDiff">&nbsp; &nbsp; </span><span class="TextSegSigDiff">c</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">f.r</span>ea<span class="TextSegSigDiff">d(1</span>)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">sys.exc_cl</span>ea<span class="TextSegSigDiff">r(</span>)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">sys.exc_traceback</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sys.last_traceback</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">None</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Ind</span><span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">ed,</span> using <span class="TextSegSigDiff">CPython's</span> <span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">efer</span>en<span class="TextSegSigDiff">ce</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">coun</span>ting <span class="TextSegSigDiff">an</span>d<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">destructo</span>r<span class="TextSegInsigDiff"> </span>s<span class="TextSegSigDiff">cheme,</span> <span class="TextSegSigDiff">each</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Tracebacks</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span> us<span class="TextSegSigDiff">ed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">report</span>ing <span class="TextSegSigDiff">err</span><span class="TextSegSigDiff">or</span><span class="TextSegSigDiff">s,</span> <span class="TextSegSigDiff">implem</span>enting d<span class="TextSegSigDiff">eb</span><span class="TextSegSigDiff">ugge</span>rs <span class="TextSegSigDiff">and</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">ew</span> <span class="TextSegSigDiff">assi</span><span class="TextSegSigDiff">gnm</span><span class="TextSegSigDiff">e</span>nt <span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">o</span> <span class="TextSegSigDiff">*f*</span> <span class="TextSegSigDiff">closes</span><span class="TextSegInsigDiff"> </span>the pr<span class="TextSegSigDiff">eviou</span>s<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">With</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span> trad<span class="TextSegSigDiff">itional</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">related</span> <span class="TextSegSigDiff">th</span><span class="TextSegSigDiff">ings.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">They</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">co</span>nt<span class="TextSegSigDiff">ain</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">portion</span> <span class="TextSegSigDiff">of</span> the pr<span class="TextSegSigDiff">ogram</span><span class="TextSegInsigDiff"> </span>s<span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">ate</span> <span class="TextSegSigDiff">ex</span>tra<span class="TextSegSigDiff">cte</span>d</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">GC,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">however,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">those</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">objects</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">only</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">get</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">collected</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">closed)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">a</span>t <span class="TextSegSigDiff">vary</span>ing an<span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">p</span><span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">ssib</span>ly <span class="TextSegSigDiff">l</span><span class="TextSegSigDiff">ong</span> <span class="TextSegSigDiff">i</span>nt<span class="TextSegSigDiff">ervals.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">during</span><span class="TextSegInsigDiff"> </span>t<span class="TextSegSigDiff">he</span> <span class="TextSegSigDiff">handl</span>ing<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span> an <span class="TextSegSigDiff">exception</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(usual</span>ly <span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">most</span> <span class="TextSegSigDiff">rece</span>nt</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">exception).</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">want</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">write</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">work</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">any</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">implementation,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">should</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">explicitly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">close</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;with&quot;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">s</span>ta<span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">em</span><span class="TextSegSigDiff">ent;</span> t<span class="TextSegSigDiff">h</span>is <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">work</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">regardless</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">memo</span><span class="TextSegSigDiff">ry</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">manageme</span>nt<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">scheme:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">In</span><span class="TextSegInsigDiff"> </span>t<span class="TextSegSigDiff">he</span><span class="TextSegInsigDiff"> </span>a<span class="TextSegSigDiff">bsence</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">circulari</span>ti<span class="TextSegSigDiff">e</span>s <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">rac</span><span class="TextSegSigDiff">eback</span><span class="TextSegSigDiff">s,</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">pr</span><span class="TextSegSigDiff">ogr</span><span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">ms</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span>n<span class="TextSegSigDiff">o</span>t</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">need</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">manage</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">memory</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">explicitly.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">very_long_list_of_files:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">open(file)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">f:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">c</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">f.read(1)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">Why doesn't <span class="TextSegSigDiff">C</span>Python use a more traditional garbage collection scheme?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">Why doesn't Python use a more traditional garbage collection scheme?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">=====================================================================</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">For one thing, this is not a C standard feature and hence it's not</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">For one thing, this is not a C standard feature and hence it's not</td>
</tr>
<tr class="SectionAll">
<td class="TextItemInsigMod">portable. (Yes, we know about the Boehm GC library.&nbsp; It has bits of</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemInsigMod">portable.&nbsp;<span class="TextSegInsigDiff"> </span>(Yes, we know about the Boehm GC library.&nbsp; It has bits of</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">assembler code for *most* common platforms, not for all of them, and</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">assembler code for *most* common platforms, not for all of them, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">although it is mostly transparent, it isn't completely transparent;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">although it is mostly transparent, it isn't completely transparent;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">patches are required to get Python to work with it.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">patches are required to get Python to work with it.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Traditional GC also becomes a problem when Python is embedded into</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Traditional GC also becomes a problem when Python is embedded into</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">other applications.&nbsp; While in a standalone Python it's fine to replace</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">other applications.&nbsp; While in a standalone Python it's fine to replace</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the standard malloc() and free() with versions provided by the GC</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the standard malloc() and free() with versions provided by the GC</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">library, an application embedding Python may want to have its *own*</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">library, an application embedding Python may want to have its *own*</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">substitute for malloc() and free(), and may not want Python's.&nbsp; Right</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">substitute for malloc() and free(), and may not want Python's.&nbsp; Right</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">now, <span class="TextSegSigDiff">C</span>Python works with anything that implements malloc() and free()</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">now, Python works with anything that implements malloc() and free()</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">properly.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">properly.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">In</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Jython,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">following</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(which</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fine</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">CPython)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">probably</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">run</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">out</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">descriptors</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">long</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">before</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">runs</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">out</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">memory:</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">very_long_list_of_files:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">f</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">open(file)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">c</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">f.read(1)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">current</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">reference</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">counting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">destructor</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">scheme,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">each</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">new</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">assignment</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">f</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">closes</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">previous</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">GC,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">guaranteed.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">want</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">write</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">work</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">any</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">implementation,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">should</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">explicitly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">close</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;with&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">statement;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">work</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">regardless</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">GC:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">very_long_list_of_files:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">open(file)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">f:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">c</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">f.read(1)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">Why isn't all memory freed when <span class="TextSegSigDiff">C</span>Python exits?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">Why isn't all memory freed when Python exits?</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">=============================================<span class="TextSegSigDiff">=</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">=============================================</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Objects referenced from the global namespaces of Python modules are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Objects referenced from the global namespaces of Python modules are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">not always deallocated when Python exits.&nbsp; This may happen if there</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">not always deallocated when Python exits.&nbsp; This may happen if there</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">are circular references.&nbsp; There are also certain bits of memory that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">are circular references.&nbsp; There are also certain bits of memory that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">are allocated by the C library that are impossible to free (e.g. a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">are allocated by the C library that are impossible to free (e.g. a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">tool like Purify will complain about these).&nbsp; Python is, however,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">tool like Purify will complain about these).&nbsp; Python is, however,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">aggressive about cleaning up memory on exit and does try to destroy</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">aggressive about cleaning up memory on exit and does try to destroy</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">every single object.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">every single object.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you want to force Python to delete certain things on deallocation</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you want to force Python to delete certain things on deallocation</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">use the &quot;atexit&quot; module to run a function that will force those</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">use the &quot;atexit&quot; module to run a function that will force those</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">deletions.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">deletions.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why are there separate tuple and list data types?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why are there separate tuple and list data types?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Lists and tuples, while similar in many respects, are generally used</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Lists and tuples, while similar in many respects, are generally used</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in fundamentally different ways.&nbsp; Tuples can be thought of as being</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in fundamentally different ways.&nbsp; Tuples can be thought of as being</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">similar to Pascal records or C structs; they're small collections of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">similar to Pascal records or C structs; they're small collections of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">related data which may be of different types which are operated on as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">related data which may be of different types which are operated on as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a group.&nbsp; For example, a Cartesian coordinate is appropriately</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a group.&nbsp; For example, a Cartesian coordinate is appropriately</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">represented as a tuple of two or three numbers.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">represented as a tuple of two or three numbers.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Lists, on the other hand, are more like arrays in other languages.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Lists, on the other hand, are more like arrays in other languages.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">They tend to hold a varying number of objects all of which have the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">They tend to hold a varying number of objects all of which have the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">same type and which are operated on one-by-one.&nbsp; For example,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">same type and which are operated on one-by-one.&nbsp; For example,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;os.listdir('.')&quot; returns a list of strings representing the files in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;os.listdir('.')&quot; returns a list of strings representing the files in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the current directory.&nbsp; Functions which operate on this output would</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the current directory.&nbsp; Functions which operate on this output would</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">generally not break if you added another file or two to the directory.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">generally not break if you added another file or two to the directory.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Tuples are immutable, meaning that once a tuple has been created, you</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Tuples are immutable, meaning that once a tuple has been created, you</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">can't replace any of its elements with a new value.&nbsp; Lists are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">can't replace any of its elements with a new value.&nbsp; Lists are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">mutable, meaning that you can always change a list's elements.&nbsp; Only</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">mutable, meaning that you can always change a list's elements.&nbsp; Only</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">immutable elements can be used as dictionary keys, and hence only</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">immutable elements can be used as dictionary keys, and hence only</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">tuples and not lists can be used as keys.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">tuples and not lists can be used as keys.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How are lists implemented?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How are lists implemented?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==========================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==========================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python's lists are really variable-length arrays, not Lisp-style</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python's lists are really variable-length arrays, not Lisp-style</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">linked lists. The implementation uses a contiguous array of references</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">linked lists. The implementation uses a contiguous array of references</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to other objects, and keeps a pointer to this array and the array's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to other objects, and keeps a pointer to this array and the array's</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">length in a list head structure.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">length in a list head structure.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This makes indexing a list &quot;a[i]&quot; an operation whose cost is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This makes indexing a list &quot;a[i]&quot; an operation whose cost is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">independent of the size of the list or the value of the index.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">independent of the size of the list or the value of the index.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When items are appended or inserted, the array of references is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When items are appended or inserted, the array of references is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">resized.&nbsp; Some cleverness is applied to improve the performance of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">resized.&nbsp; Some cleverness is applied to improve the performance of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">appending items repeatedly; when the array must be grown, some extra</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">appending items repeatedly; when the array must be grown, some extra</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">space is allocated so the next few times don't require an actual</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">space is allocated so the next few times don't require an actual</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">resize.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">resize.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How are dictionaries implemented?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How are dictionaries implemented?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python's dictionaries are implemented as resizable hash tables.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python's dictionaries are implemented as resizable hash tables.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Compared to B-trees, this gives better performance for lookup (the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Compared to B-trees, this gives better performance for lookup (the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">most common operation by far) under most circumstances, and the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">most common operation by far) under most circumstances, and the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">implementation is simpler.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">implementation is simpler.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Dictionaries work by computing a hash code for each key stored in the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Dictionaries work by computing a hash code for each key stored in the</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">dictionary using the &quot;hash()&quot; built-in function.&nbsp; The hash code varies</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">dictionary using the &quot;hash()&quot; built-in function.&nbsp; The hash code varies</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">widely depending on the key<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">per-process</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">seed</span>; for example,</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">widely depending on the key; for example,<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;Python&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">hashes</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;Python&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">could</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">hash</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span>-539294296 while &quot;python&quot;, a string that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">-539294296 while &quot;python&quot;, a string th<span class="TextSegSigDiff">at</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">differs</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">by</span><span class="TextSegInsigDiff"> </span>a<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">single</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bi</span>t<span class="TextSegSigDiff">,</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">differs</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">by</span><span class="TextSegInsigDiff"> </span>a<span class="TextSegInsigDiff"> </span>s<span class="TextSegSigDiff">ingl</span>e<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bit,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">could</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">hash</span> to 1142331976.&nbsp; The hash code is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">h</span>as<span class="TextSegSigDiff">h</span>e<span class="TextSegSigDiff">s</span> to 1142331976.&nbsp; The hash code is<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">then</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">used</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">calculate</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">then</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">used</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">calculate</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span>location in an internal array where the value</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">location in an internal array where the value<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">stored.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Assuming</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">stored.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Assuming</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">t</span>hat you're storing keys that all have</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">t</span>hat you're storing keys that all<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">different</span> ha<span class="TextSegSigDiff">sh</span><span class="TextSegInsigDiff"> </span>v<span class="TextSegSigDiff">alu</span>e<span class="TextSegSigDiff">s,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">different</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">hash</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">values,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span>means that dictionaries take constant ti<span class="TextSegSigDiff">m</span>e</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">means that dictionaries take constant t<span class="TextSegSigDiff">ime</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">--</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">O(1),</span><span class="TextSegInsigDiff"> </span>i<span class="TextSegSigDiff">n</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">comput</span>e<span class="TextSegSigDiff">r</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">--</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">O(1),</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">computer</span><span class="TextSegInsigDiff"> </span>science notation -- to retrieve a key.&nbsp; It also</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">science notation -- to retrieve a key.&nbsp; It also<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">means</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">no</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sorted</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">means</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">no</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sorted</span><span class="TextSegInsigDiff"> </span>order of the keys is maintained, and traversing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">order of the keys is maintained, and traversing<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">array</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">array</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span>&quot;.keys()&quot; and &quot;.items()&quot; do will output the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&quot;.keys()&quot; and &quot;.items()&quot; do will output the<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">dictionary's</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">content</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">dictionary'</span>s<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">content</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">so</span>me arbitrary jumbled order<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">change</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">s<span class="TextSegSigDiff">o</span>me arbitrary jumbled order<span class="TextSegSigDiff">.</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">every</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">invocation</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">program.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why must dictionary keys be immutable?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why must dictionary keys be immutable?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">======================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">======================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The hash table implementation of dictionaries uses a hash value</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The hash table implementation of dictionaries uses a hash value</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">calculated from the key value to find the key.&nbsp; If the key were a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">calculated from the key value to find the key.&nbsp; If the key were a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">mutable object, its value could change, and thus its hash could also</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">mutable object, its value could change, and thus its hash could also</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">change.&nbsp; But since whoever changes the key object can't tell that it</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">change.&nbsp; But since whoever changes the key object can't tell that it</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">was being used as a dictionary key, it can't move the entry around in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">was being used as a dictionary key, it can't move the entry around in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the dictionary.&nbsp; Then, when you try to look up the same object in the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the dictionary.&nbsp; Then, when you try to look up the same object in the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">dictionary it won't be found because its hash value is different. If</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">dictionary it won't be found because its hash value is different. If</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you tried to look up the old value it wouldn't be found either,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you tried to look up the old value it wouldn't be found either,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">because the value of the object found in that hash bin would be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">because the value of the object found in that hash bin would be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">different.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">different.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you want a dictionary indexed with a list, simply convert the list</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you want a dictionary indexed with a list, simply convert the list</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to a tuple first; the function &quot;tuple(L)&quot; creates a tuple with the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to a tuple first; the function &quot;tuple(L)&quot; creates a tuple with the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">same entries as the list &quot;L&quot;.&nbsp; Tuples are immutable and can therefore</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">same entries as the list &quot;L&quot;.&nbsp; Tuples are immutable and can therefore</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">be used as dictionary keys.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">be used as dictionary keys.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Some unacceptable solutions that have been proposed:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Some unacceptable solutions that have been proposed:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Hash lists by their address (object ID).&nbsp; This doesn't work</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Hash lists by their address (object ID).&nbsp; This doesn't work</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; because if you construct a new list with the same value it won't be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; because if you construct a new list with the same value it won't be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; found; e.g.:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; found; e.g.:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; mydict = {[1, 2]: '12'}</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; mydict = {[1, 2]: '12'}</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>mydict[[1, 2]]<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; print<span class="TextSegInsigDiff"> </span>mydict[[1, 2]]</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; would raise a KeyError exception because the id of the &quot;[1, 2]&quot; used</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; would raise a KeyError exception because the id of the &quot;[1, 2]&quot; used</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; in the second line differs from that in the first line.&nbsp; In other</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; in the second line differs from that in the first line.&nbsp; In other</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; words, dictionary keys should be compared using &quot;==&quot;, not using</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; words, dictionary keys should be compared using &quot;==&quot;, not using</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; &quot;is&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; &quot;is&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Make a copy when using a list as a key.&nbsp; This doesn't work because</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Make a copy when using a list as a key.&nbsp; This doesn't work because</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; the list, being a mutable object, could contain a reference to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; the list, being a mutable object, could contain a reference to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; itself, and then the copying code would run into an infinite loop.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; itself, and then the copying code would run into an infinite loop.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Allow lists as keys but tell the user not to modify them.&nbsp; This</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Allow lists as keys but tell the user not to modify them.&nbsp; This</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; would allow a class of hard-to-track bugs in programs when you</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; would allow a class of hard-to-track bugs in programs when you</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; forgot or modified a list by accident. It also invalidates an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; forgot or modified a list by accident. It also invalidates an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; important invariant of dictionaries: every value in &quot;d.keys()&quot; is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; important invariant of dictionaries: every value in &quot;d.keys()&quot; is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; usable as a key of the dictionary.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; usable as a key of the dictionary.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Mark lists as read-only once they are used as a dictionary key.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Mark lists as read-only once they are used as a dictionary key.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; The problem is that it's not just the top-level object that could</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; The problem is that it's not just the top-level object that could</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; change its value; you could use a tuple containing a list as a key.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; change its value; you could use a tuple containing a list as a key.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; Entering anything as a key into a dictionary would require marking</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; Entering anything as a key into a dictionary would require marking</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; all objects reachable from there as read-only -- and again, self-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; all objects reachable from there as read-only -- and again, self-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; referential objects could cause an infinite loop.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; referential objects could cause an infinite loop.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There is a trick to get around this if you need to, but use it at your</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There is a trick to get around this if you need to, but use it at your</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">own risk: You can wrap a mutable structure inside a class instance</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">own risk: You can wrap a mutable structure inside a class instance</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">which has both a &quot;__eq__()&quot; and a &quot;__hash__()&quot; method.&nbsp; You must then</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">which has both a &quot;__eq__()&quot; and a &quot;__hash__()&quot; method.&nbsp; You must then</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">make sure that the hash value for all such wrapper objects that reside</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">make sure that the hash value for all such wrapper objects that reside</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in a dictionary (or other hash based structure), remain fixed while</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in a dictionary (or other hash based structure), remain fixed while</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the object is in the dictionary (or other structure).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the object is in the dictionary (or other structure).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class ListWrapper:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class ListWrapper:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, the_list):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, the_list):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.the_list = the_list</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.the_list = the_list</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __eq__(self, other):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __eq__(self, other):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return self.the_list == other.the_list</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return self.the_list == other.the_list</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __hash__(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __hash__(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; l = self.the_list</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; l = self.the_list</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result = 98767 - len(l)*555</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result = 98767 - len(l)*555</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for i, el in enumerate(l):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for i, el in enumerate(l):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result = result + (hash(el) % 9999999) * 1001 + i</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result = result + (hash(el) % 9999999) * 1001 + i</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; except Exception:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; except Exception:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result = (result % 7777777) + i * 333</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result = (result % 7777777) + i * 333</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return result</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return result</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note that the hash computation is complicated by the possibility that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note that the hash computation is complicated by the possibility that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">some members of the list may be unhashable and also by the possibility</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">some members of the list may be unhashable and also by the possibility</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of arithmetic overflow.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of arithmetic overflow.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Furthermore it must always be the case that if &quot;o1 == o2&quot; (ie</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Furthermore it must always be the case that if &quot;o1 == o2&quot; (ie</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;o1.__eq__(o2) is True&quot;) then &quot;hash(o1) == hash(o2)&quot; (ie,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;o1.__eq__(o2) is True&quot;) then &quot;hash(o1) == hash(o2)&quot; (ie,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;o1.__hash__() == o2.__hash__()&quot;), regardless of whether the object is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;o1.__hash__() == o2.__hash__()&quot;), regardless of whether the object is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in a dictionary or not.&nbsp; If you fail to meet these restrictions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in a dictionary or not.&nbsp; If you fail to meet these restrictions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">dictionaries and other hash based structures will misbehave.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">dictionaries and other hash based structures will misbehave.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In the case of ListWrapper, whenever the wrapper object is in a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In the case of ListWrapper, whenever the wrapper object is in a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">dictionary the wrapped list must not change to avoid anomalies.&nbsp; Don't</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">dictionary the wrapped list must not change to avoid anomalies.&nbsp; Don't</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">do this unless you are prepared to think hard about the requirements</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">do this unless you are prepared to think hard about the requirements</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and the consequences of not meeting them correctly.&nbsp; Consider yourself</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and the consequences of not meeting them correctly.&nbsp; Consider yourself</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">warned.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">warned.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why doesn't list.sort() return the sorted list?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why doesn't list.sort() return the sorted list?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===============================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===============================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In situations where performance matters, making a copy of the list</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In situations where performance matters, making a copy of the list</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">just to sort it would be wasteful. Therefore, &quot;list.sort()&quot; sorts the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">just to sort it would be wasteful. Therefore, &quot;list.sort()&quot; sorts the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">list in place. In order to remind you of that fact, it does not return</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">list in place. In order to remind you of that fact, it does not return</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the sorted list.&nbsp; This way, you won't be fooled into accidentally</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the sorted list.&nbsp; This way, you won't be fooled into accidentally</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">overwriting a list when you need a sorted copy but also need to keep</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">overwriting a list when you need a sorted copy but also need to keep</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the unsorted version around.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the unsorted version around.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">I<span class="TextSegSigDiff">f</span> <span class="TextSegSigDiff">y</span><span class="TextSegSigDiff">ou</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">want</span> <span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">return</span> a new<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">list,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span> built-in &quot;sorted()&quot; <span class="TextSegSigDiff">fu</span><span class="TextSegSigDiff">nction</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">I<span class="TextSegSigDiff">n</span> <span class="TextSegSigDiff">Pytho</span><span class="TextSegSigDiff">n</span> <span class="TextSegSigDiff">2.4</span> a new built-in <span class="TextSegSigDiff">function</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">--</span><span class="TextSegInsigDiff"> </span>&quot;sorted()&quot;<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">--</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">has</span> <span class="TextSegSigDiff">been</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">added.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">instead.</span><span class="TextSegInsigDiff">&nbsp; </span>This function creates a new list from a provided iterable,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">This function creates a new list from a provided iterable,<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sorts</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">sorts</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span>and returns it.&nbsp; For example, here's how to iterate over the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">and returns it.&nbsp; For example, here's how to iterate over the<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">keys</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">keys</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span>dictionary in sorted order:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">dictionary in sorted order:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; for key in sorted(mydict):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; for key in sorted(mydict):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...&nbsp; # do whatever with mydict[key]...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...&nbsp; # do whatever with mydict[key]...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do you specify and enforce an interface spec in Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do you specify and enforce an interface spec in Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===========================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===========================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">An interface specification for a module as provided by languages such</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">An interface specification for a module as provided by languages such</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">as C++ and Java describes the prototypes for the methods and functions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">as C++ and Java describes the prototypes for the methods and functions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of the module.&nbsp; Many feel that compile-time enforcement of interface</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of the module.&nbsp; Many feel that compile-time enforcement of interface</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">specifications helps in the construction of large programs.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">specifications helps in the construction of large programs.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python 2.6 adds an &quot;abc&quot; module that lets you define Abstract Base</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python 2.6 adds an &quot;abc&quot; module that lets you define Abstract Base</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Classes (ABCs).&nbsp; You can then use &quot;isinstance()&quot; and &quot;issubclass()&quot; to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Classes (ABCs).&nbsp; You can then use &quot;isinstance()&quot; and &quot;issubclass()&quot; to</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">check whether an instance or a class implements a particular ABC.&nbsp; The</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">check whether an instance or a class implements a particular ABC.&nbsp; The</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&quot;collections<span class="TextSegSigDiff">.abc</span>&quot; module defines a set of useful ABCs such as</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&quot;collections&quot; module defines a set of useful ABCs such as<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;Iterable&quot;,</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&quot;<span class="TextSegSigDiff">Iterable&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;</span>Container&quot;, and &quot;MutableMapping&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&quot;Container&quot;, and &quot;MutableMapping&quot;.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For Python, many of the advantages of interface specifications can be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For Python, many of the advantages of interface specifications can be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">obtained by an appropriate test discipline for components.&nbsp; There is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">obtained by an appropriate test discipline for components.&nbsp; There is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">also a tool, PyChecker, which can be used to find problems due to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">also a tool, PyChecker, which can be used to find problems due to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">subclassing.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">subclassing.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A good test suite for a module can both provide a regression test and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A good test suite for a module can both provide a regression test and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">serve as a module interface specification and a set of examples.&nbsp; Many</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">serve as a module interface specification and a set of examples.&nbsp; Many</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python modules can be run as a script to provide a simple &quot;self test.&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python modules can be run as a script to provide a simple &quot;self test.&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Even modules which use complex external interfaces can often be tested</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Even modules which use complex external interfaces can often be tested</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in isolation using trivial &quot;stub&quot; emulations of the external</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in isolation using trivial &quot;stub&quot; emulations of the external</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">interface.&nbsp; The &quot;doctest&quot; and &quot;unittest&quot; modules or third-party test</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interface.&nbsp; The &quot;doctest&quot; and &quot;unittest&quot; modules or third-party test</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">frameworks can be used to construct exhaustive test suites that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">frameworks can be used to construct exhaustive test suites that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">exercise every line of code in a module.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">exercise every line of code in a module.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">An appropriate testing discipline can help build large complex</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">An appropriate testing discipline can help build large complex</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">applications in Python as well as having interface specifications</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">applications in Python as well as having interface specifications</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">would.&nbsp; In fact, it can be better because an interface specification</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">would.&nbsp; In fact, it can be better because an interface specification</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">cannot test certain properties of a program.&nbsp; For example, the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">cannot test certain properties of a program.&nbsp; For example, the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;append()&quot; method is expected to add new elements to the end of some</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;append()&quot; method is expected to add new elements to the end of some</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">internal list; an interface specification cannot test that your</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">internal list; an interface specification cannot test that your</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;append()&quot; implementation will actually do this correctly, but it's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;append()&quot; implementation will actually do this correctly, but it's</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">trivial to check this property in a test suite.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">trivial to check this property in a test suite.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Writing test suites is very helpful, and you might want to design your</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Writing test suites is very helpful, and you might want to design your</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">code with an eye to making it easily tested.&nbsp; One increasingly popular</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">code with an eye to making it easily tested.&nbsp; One increasingly popular</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">technique, test-directed development, calls for writing parts of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">technique, test-directed development, calls for writing parts of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">test suite first, before you write any of the actual code.&nbsp; Of course</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">test suite first, before you write any of the actual code.&nbsp; Of course</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python allows you to be sloppy and not write test cases at all.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python allows you to be sloppy and not write test cases at all.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why is there no goto?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why is there no goto?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=====================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=====================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You can use exceptions to provide a &quot;structured goto&quot; that even works</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You can use exceptions to provide a &quot;structured goto&quot; that even works</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">across function calls.&nbsp; Many feel that exceptions can conveniently</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">across function calls.&nbsp; Many feel that exceptions can conveniently</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">emulate all reasonable uses of the &quot;go&quot; or &quot;goto&quot; constructs of C,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">emulate all reasonable uses of the &quot;go&quot; or &quot;goto&quot; constructs of C,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Fortran, and other languages.&nbsp; For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Fortran, and other languages.&nbsp; For example:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; class label<span class="TextSegSigDiff">(Exception)</span>: pass&nbsp; # declare a label</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; class label: pass&nbsp; # declare a label</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; try:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; try:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; if condition: raise label()&nbsp; # goto label</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; if condition: raise label()&nbsp; # goto label</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; except label:&nbsp; # where to goto</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; except label:&nbsp; # where to goto</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; pass</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; pass</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This doesn't allow you to jump into the middle of a loop, but that's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This doesn't allow you to jump into the middle of a loop, but that's</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">usually considered an abuse of goto anyway.&nbsp; Use sparingly.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">usually considered an abuse of goto anyway.&nbsp; Use sparingly.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why can't raw strings (r-strings) end with a backslash?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why can't raw strings (r-strings) end with a backslash?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=======================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=======================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">More precisely, they can't end with an odd number of backslashes: the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">More precisely, they can't end with an odd number of backslashes: the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">unpaired backslash at the end escapes the closing quote character,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">unpaired backslash at the end escapes the closing quote character,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">leaving an unterminated string.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">leaving an unterminated string.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Raw strings were designed to ease creating input for processors</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Raw strings were designed to ease creating input for processors</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(chiefly regular expression engines) that want to do their own</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(chiefly regular expression engines) that want to do their own</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">backslash escape processing. Such processors consider an unmatched</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">backslash escape processing. Such processors consider an unmatched</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">trailing backslash to be an error anyway, so raw strings disallow</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">trailing backslash to be an error anyway, so raw strings disallow</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that.&nbsp; In return, they allow you to pass on the string quote character</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that.&nbsp; In return, they allow you to pass on the string quote character</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">by escaping it with a backslash.&nbsp; These rules work well when r-strings</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">by escaping it with a backslash.&nbsp; These rules work well when r-strings</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">are used for their intended purpose.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">are used for their intended purpose.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you're trying to build Windows pathnames, note that all Windows</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you're trying to build Windows pathnames, note that all Windows</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">system calls accept forward slashes too:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">system calls accept forward slashes too:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; f = open(&quot;/mydir/file.txt&quot;)&nbsp; # works fine!</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; f = open(&quot;/mydir/file.txt&quot;)&nbsp; # works fine!</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you're trying to build a pathname for a DOS command, try e.g. one</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you're trying to build a pathname for a DOS command, try e.g. one</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; dir = r&quot;\this\is\my\dos\dir&quot; &quot;\\&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; dir = r&quot;\this\is\my\dos\dir&quot; &quot;\\&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; dir = r&quot;\this\is\my\dos\dir\ &quot;[:-1]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; dir = r&quot;\this\is\my\dos\dir\ &quot;[:-1]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; dir = &quot;\\this\\is\\my\\dos\\dir\\&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; dir = &quot;\\this\\is\\my\\dos\\dir\\&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why doesn't Python have a &quot;with&quot; statement for attribute assignments?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why doesn't Python have a &quot;with&quot; statement for attribute assignments?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=====================================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=====================================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python has a 'with' statement that wraps the execution of a block,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python has a 'with' statement that wraps the execution of a block,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">calling code on the entrance and exit from the block.&nbsp; Some language</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">calling code on the entrance and exit from the block.&nbsp; Some language</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">have a construct that looks like this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">have a construct that looks like this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; with obj:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; with obj:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; a = 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # equivalent to obj.a = 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; a = 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # equivalent to obj.a = 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; total = total + 1&nbsp;&nbsp; # obj.total = obj.total + 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; total = total + 1&nbsp;&nbsp; # obj.total = obj.total + 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In Python, such a construct would be ambiguous.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In Python, such a construct would be ambiguous.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Other languages, such as Object Pascal, Delphi, and C++, use static</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Other languages, such as Object Pascal, Delphi, and C++, use static</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">types, so it's possible to know, in an unambiguous way, what member is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">types, so it's possible to know, in an unambiguous way, what member is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">being assigned to. This is the main point of static typing -- the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">being assigned to. This is the main point of static typing -- the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">compiler *always* knows the scope of every variable at compile time.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">compiler *always* knows the scope of every variable at compile time.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python uses dynamic types. It is impossible to know in advance which</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python uses dynamic types. It is impossible to know in advance which</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">attribute will be referenced at runtime. Member attributes may be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">attribute will be referenced at runtime. Member attributes may be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">added or removed from objects on the fly. This makes it impossible to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">added or removed from objects on the fly. This makes it impossible to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">know, from a simple reading, what attribute is being referenced: a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">know, from a simple reading, what attribute is being referenced: a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">local one, a global one, or a member attribute?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">local one, a global one, or a member attribute?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For instance, take the following incomplete snippet:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For instance, take the following incomplete snippet:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def foo(a):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def foo(a):</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; with a:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; with a:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(x)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">x</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The snippet assumes that &quot;a&quot; must have a member attribute called &quot;x&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The snippet assumes that &quot;a&quot; must have a member attribute called &quot;x&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">However, there is nothing in Python that tells the interpreter this.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">However, there is nothing in Python that tells the interpreter this.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What should happen if &quot;a&quot; is, let us say, an integer?&nbsp; If there is a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What should happen if &quot;a&quot; is, let us say, an integer?&nbsp; If there is a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">global variable named &quot;x&quot;, will it be used inside the with block?&nbsp; As</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">global variable named &quot;x&quot;, will it be used inside the with block?&nbsp; As</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you see, the dynamic nature of Python makes such choices much harder.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you see, the dynamic nature of Python makes such choices much harder.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The primary benefit of &quot;with&quot; and similar language features (reduction</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The primary benefit of &quot;with&quot; and similar language features (reduction</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of code volume) can, however, easily be achieved in Python by</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of code volume) can, however, easily be achieved in Python by</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">assignment.&nbsp; Instead of:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">assignment.&nbsp; Instead of:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; function(args).mydict[index][index].a = 21</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; function(args).mydict[index][index].a = 21</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; function(args).mydict[index][index].b = 42</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; function(args).mydict[index][index].b = 42</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; function(args).mydict[index][index].c = 63</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; function(args).mydict[index][index].c = 63</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">write this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">write this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ref = function(args).mydict[index][index]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ref = function(args).mydict[index][index]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ref.a = 21</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ref.a = 21</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ref.b = 42</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ref.b = 42</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ref.c = 63</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ref.c = 63</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This also has the side-effect of increasing execution speed because</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This also has the side-effect of increasing execution speed because</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">name bindings are resolved at run-time in Python, and the second</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">name bindings are resolved at run-time in Python, and the second</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">version only needs to perform the resolution once.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">version only needs to perform the resolution once.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why are colons required for the if/while/def/class statements?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why are colons required for the if/while/def/class statements?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==============================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==============================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The colon is required primarily to enhance readability (one of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The colon is required primarily to enhance readability (one of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">results of the experimental ABC language).&nbsp; Consider this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">results of the experimental ABC language).&nbsp; Consider this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; if a == b</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; if a == b</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(a)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">versus</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">versus</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; if a == b:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; if a == b:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(a)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Notice how the second one is slightly easier to read.&nbsp; Notice further</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Notice how the second one is slightly easier to read.&nbsp; Notice further</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">how a colon sets off the example in this FAQ answer; it's a standard</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">how a colon sets off the example in this FAQ answer; it's a standard</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">usage in English.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">usage in English.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Another minor reason is that the colon makes it easier for editors</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Another minor reason is that the colon makes it easier for editors</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">with syntax highlighting; they can look for colons to decide when</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">with syntax highlighting; they can look for colons to decide when</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">indentation needs to be increased instead of having to do a more</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">indentation needs to be increased instead of having to do a more</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">elaborate parsing of the program text.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">elaborate parsing of the program text.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why does Python allow commas at the end of lists and tuples?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why does Python allow commas at the end of lists and tuples?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">============================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">============================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python lets you add a trailing comma at the end of lists, tuples, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python lets you add a trailing comma at the end of lists, tuples, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">dictionaries:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">dictionaries:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [1, 2, 3,]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [1, 2, 3,]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ('a', 'b', 'c',)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ('a', 'b', 'c',)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; d = {</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; d = {</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;A&quot;: [1, 5],</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;A&quot;: [1, 5],</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;B&quot;: [6, 7],&nbsp; # last trailing comma is optional but good style</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;B&quot;: [6, 7],&nbsp; # last trailing comma is optional but good style</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There are several reasons to allow this.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There are several reasons to allow this.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When you have a literal value for a list, tuple, or dictionary spread</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When you have a literal value for a list, tuple, or dictionary spread</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">across multiple lines, it's easier to add more elements because you</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">across multiple lines, it's easier to add more elements because you</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">don't have to remember to add a comma to the previous line.&nbsp; The lines</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">don't have to remember to add a comma to the previous line.&nbsp; The lines</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">can also be reordered without creating a syntax error.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">can also be reordered without creating a syntax error.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Accidentally omitting the comma can lead to errors that are hard to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Accidentally omitting the comma can lead to errors that are hard to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">diagnose. For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">diagnose. For example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; x = [</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; x = [</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &quot;fee&quot;,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &quot;fee&quot;,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &quot;fie&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &quot;fie&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &quot;foo&quot;,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &quot;foo&quot;,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &quot;fum&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &quot;fum&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This list looks like it has four elements, but it actually contains</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This list looks like it has four elements, but it actually contains</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">three: &quot;fee&quot;, &quot;fiefoo&quot; and &quot;fum&quot;.&nbsp; Always adding the comma avoids this</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">three: &quot;fee&quot;, &quot;fiefoo&quot; and &quot;fum&quot;.&nbsp; Always adding the comma avoids this</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">source of error.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">source of error.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Allowing the trailing comma may also make programmatic code generation</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Allowing the trailing comma may also make programmatic code generation</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">easier.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">easier.</td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\faq\extending.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Extending/Embedding FAQ</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Extending/Embedding FAQ</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">***********************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">***********************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Can I create my own functions in C?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Can I create my own functions in C?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Yes, you can create built-in modules containing functions, variables,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Yes, you can create built-in modules containing functions, variables,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">exceptions and even new types in C.&nbsp; This is explained in the document</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">exceptions and even new types in C.&nbsp; This is explained in the document</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Extending and Embedding the Python Interpreter.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Extending and Embedding the Python Interpreter.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Most intermediate or advanced Python books will also cover this topic.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Most intermediate or advanced Python books will also cover this topic.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Can I create my own functions in C++?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Can I create my own functions in C++?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=====================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=====================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Yes, using the C compatibility features found in C++.&nbsp; Place &quot;extern</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Yes, using the C compatibility features found in C++.&nbsp; Place &quot;extern</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;C&quot; { ... }&quot; around the Python include files and put &quot;extern &quot;C&quot;&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;C&quot; { ... }&quot; around the Python include files and put &quot;extern &quot;C&quot;&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">before each function that is going to be called by the Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">before each function that is going to be called by the Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">interpreter.&nbsp; Global or static C++ objects with constructors are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interpreter.&nbsp; Global or static C++ objects with constructors are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">probably not a good idea.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">probably not a good idea.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Writing C is hard; are there any alternatives?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Writing C is hard; are there any alternatives?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==============================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==============================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There are a number of alternatives to writing your own C extensions,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There are a number of alternatives to writing your own C extensions,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">depending on what you're trying to do.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">depending on what you're trying to do.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">need</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">more</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">speed,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Psyco</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">generates</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">x86</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">assembly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">from</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">bytecode.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">You</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Psyco</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">compile</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">most</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">time-critical</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">functions</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">gain</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">significant</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">improvement</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">very</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">little</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">effort,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">long</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you're</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">running</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">machine</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">x86-compatible</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">processor.</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">Cython and its relative Pyrex are compilers that accept a slightly</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">Cython and its relative Pyrex are compilers that accept a slightly</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">modified form of Python and generate the corresponding C code.&nbsp; <span class="TextSegSigDiff">Cython</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">modified form of Python and generate the corresponding C code.&nbsp; <span class="TextSegSigDiff">Pyrex</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Pyrex</span><span class="TextSegInsigDiff"> </span>make it possible to write an extension without having to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">make<span class="TextSegSigDiff">s</span> it possible to write an extension without having to<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">learn</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">learn</span><span class="TextSegInsigDiff"> </span>Python's C API.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">Python's C API.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you need to interface to some C or C++ library for which no Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you need to interface to some C or C++ library for which no Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">extension currently exists, you can try wrapping the library's data</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">extension currently exists, you can try wrapping the library's data</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">types and functions with a tool such as SWIG.&nbsp; SIP, CXX Boost, or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">types and functions with a tool such as SWIG.&nbsp; SIP, CXX Boost, or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Weave are also alternatives for wrapping C++ libraries.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Weave are also alternatives for wrapping C++ libraries.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How can I execute arbitrary Python statements from C?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How can I execute arbitrary Python statements from C?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=====================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=====================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The highest-level function to do this is &quot;PyRun_SimpleString()&quot; which</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The highest-level function to do this is &quot;PyRun_SimpleString()&quot; which</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">takes a single string argument to be executed in the context of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">takes a single string argument to be executed in the context of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">module &quot;__main__&quot; and returns 0 for success and -1 when an exception</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">module &quot;__main__&quot; and returns 0 for success and -1 when an exception</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">occurred (including &quot;SyntaxError&quot;).&nbsp; If you want more control, use</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">occurred (including &quot;SyntaxError&quot;).&nbsp; If you want more control, use</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;PyRun_String()&quot;; see the source for &quot;PyRun_SimpleString()&quot; in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;PyRun_String()&quot;; see the source for &quot;PyRun_SimpleString()&quot; in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;Python/pythonrun.c&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;Python/pythonrun.c&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How can I evaluate an arbitrary Python expression from C?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How can I evaluate an arbitrary Python expression from C?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=========================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=========================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Call the function &quot;PyRun_String()&quot; from the previous question with the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Call the function &quot;PyRun_String()&quot; from the previous question with the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">start symbol &quot;Py_eval_input&quot;; it parses an expression, evaluates it</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">start symbol &quot;Py_eval_input&quot;; it parses an expression, evaluates it</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and returns its value.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and returns its value.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I extract C values from a Python object?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I extract C values from a Python object?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===============================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===============================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">That depends on the object's type.&nbsp; If it's a tuple, &quot;PyTuple_Size()&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">That depends on the object's type.&nbsp; If it's a tuple, &quot;PyTuple_Size()&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">returns its length and &quot;PyTuple_GetItem()&quot; returns the item at a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">returns its length and &quot;PyTuple_GetItem()&quot; returns the item at a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">specified index.&nbsp; Lists have similar functions, &quot;PyListSize()&quot; and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">specified index.&nbsp; Lists have similar functions, &quot;PyListSize()&quot; and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;PyList_GetItem()&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;PyList_GetItem()&quot;.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">For <span class="TextSegSigDiff">byte</span>s, &quot;Py<span class="TextSegSigDiff">Bytes</span>_Size()&quot; returns its length and</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">For <span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">tring</span>s, &quot;Py<span class="TextSegSigDiff">S</span><span class="TextSegSigDiff">tring</span>_Size()&quot; returns its length and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&quot;Py<span class="TextSegSigDiff">Bytes</span>_AsString<span class="TextSegSigDiff">AndSize</span>()&quot;<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">provides</span> a pointer to its value <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">ts</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&quot;Py<span class="TextSegSigDiff">S</span><span class="TextSegSigDiff">tring</span>_AsString()&quot; a pointer to its value<span class="TextSegSigDiff">.</span><span class="TextSegInsigDiff">&nbsp;</span> <span class="TextSegSigDiff">Note</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">Python</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">le</span>ng<span class="TextSegSigDiff">th.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Note</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">byte</span>s <span class="TextSegSigDiff">objects</span><span class="TextSegInsigDiff"> </span>may contain null bytes so C's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">stri</span>ngs may contain null bytes so C'<span class="TextSegSigDiff">s</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;strlen()&quot;</span><span class="TextSegInsigDiff"> </span>s<span class="TextSegSigDiff">hould</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">used.</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;strlen()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">should</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">used.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">To test the type of an object, first make sure it isn't *NULL*, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To test the type of an object, first make sure it isn't *NULL*, and</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">then use &quot;Py<span class="TextSegSigDiff">Bytes</span>_Check()&quot;, &quot;PyTuple_Check()&quot;, &quot;PyList_Check()&quot;, etc.</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">then use &quot;Py<span class="TextSegSigDiff">S</span><span class="TextSegSigDiff">tring</span>_Check()&quot;, &quot;PyTuple_Check()&quot;, &quot;PyList_Check()&quot;, etc.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There is also a high-level API to Python objects which is provided by</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There is also a high-level API to Python objects which is provided by</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the so-called 'abstract' interface -- read &quot;Include/abstract.h&quot; for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the so-called 'abstract' interface -- read &quot;Include/abstract.h&quot; for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">further details.&nbsp; It allows interfacing with any kind of Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">further details.&nbsp; It allows interfacing with any kind of Python</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">sequence using calls like &quot;PySequence_Length()&quot;,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">sequence using calls like &quot;PySequence_Length()&quot;,</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&quot;PySequence_GetItem()&quot;, etc. as well as many other useful protocols</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&quot;PySequence_GetItem()&quot;, etc.<span class="TextSegSigDiff">)</span><span class="TextSegInsigDiff">&nbsp;</span> as well as many other useful protocols<span class="TextSegSigDiff">.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">such</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">numbers</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(&quot;PyNumber_Index()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">et</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">al.)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">mappings</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">PyMapping</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">APIs.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I use Py_BuildValue() to create a tuple of arbitrary length?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I use Py_BuildValue() to create a tuple of arbitrary length?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===================================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===================================================================</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">You can't.&nbsp; Use &quot;PyTuple_<span class="TextSegSigDiff">Pack(</span>)&quot; instead<span class="TextSegSigDiff">.</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">You can't.&nbsp; Use &quot;<span class="TextSegSigDiff">t</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span>PyTuple_<span class="TextSegSigDiff">New</span><span class="TextSegSigDiff">(n</span>)&quot; inste<span class="TextSegSigDiff">ad,</span><span class="TextSegInsigDiff"> </span>a<span class="TextSegSigDiff">n</span>d<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fill</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">objects</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;PyTuple_SetItem(t,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">i,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">o)&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">--</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">note</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;eats&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">reference</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">count</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;o&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">so</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;Py_INCREF()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Lists</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">similar</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">functions</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;PyList_New(n)&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;PyList_SetItem(l,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">i,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">o)&quot;.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Note</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">*must*</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">set</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">all</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tuple</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">items</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">some</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">value</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">before</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pass</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">tuple</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">--</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;PyTuple_New(n)&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">initializes</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">them</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">NULL,</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">which</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">isn't</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">valid</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">value.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I call an object's method from C?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I call an object's method from C?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">========================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">========================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;PyObject_CallMethod()&quot; function can be used to call an arbitrary</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;PyObject_CallMethod()&quot; function can be used to call an arbitrary</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">method of an object.&nbsp; The parameters are the object, the name of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">method of an object.&nbsp; The parameters are the object, the name of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">method to call, a format string like that used with &quot;Py_BuildValue()&quot;,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">method to call, a format string like that used with &quot;Py_BuildValue()&quot;,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and the argument values:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and the argument values:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; PyObject *</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; PyObject *</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; PyObject_CallMethod(PyObject *object, c<span class="TextSegSigDiff">onst</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">c</span>har *method_name,</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; PyObject_CallMethod(PyObject *object, char *method_name,</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; c<span class="TextSegSigDiff">onst</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">c</span>har *arg_format, ...);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; char *arg_format, ...);</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This works for any object that has methods -- whether built-in or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This works for any object that has methods -- whether built-in or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">user-defined. You are responsible for eventually &quot;Py_DECREF()&quot;'ing the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">user-defined. You are responsible for eventually &quot;Py_DECREF()&quot;'ing the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">return value.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">return value.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To call, e.g., a file object's &quot;seek&quot; method with arguments 10, 0</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To call, e.g., a file object's &quot;seek&quot; method with arguments 10, 0</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(assuming the file object pointer is &quot;f&quot;):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(assuming the file object pointer is &quot;f&quot;):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; res = PyObject_CallMethod(f, &quot;seek&quot;, &quot;(ii)&quot;, 10, 0);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; res = PyObject_CallMethod(f, &quot;seek&quot;, &quot;(ii)&quot;, 10, 0);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; if (res == NULL) {</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; if (res == NULL) {</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ... an exception occurred ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ... an exception occurred ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; else {</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; else {</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Py_DECREF(res);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Py_DECREF(res);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note that since &quot;PyObject_CallObject()&quot; *always* wants a tuple for the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note that since &quot;PyObject_CallObject()&quot; *always* wants a tuple for the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">argument list, to call a function without arguments, pass &quot;()&quot; for the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">argument list, to call a function without arguments, pass &quot;()&quot; for the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">format, and to call a function with one argument, surround the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">format, and to call a function with one argument, surround the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">argument in parentheses, e.g. &quot;(i)&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">argument in parentheses, e.g. &quot;(i)&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">========================================================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">========================================================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In Python code, define an object that supports the &quot;write()&quot; method.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In Python code, define an object that supports the &quot;write()&quot; method.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Assign this object to &quot;sys.stdout&quot; and &quot;sys.stderr&quot;.&nbsp; Call</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Assign this object to &quot;sys.stdout&quot; and &quot;sys.stderr&quot;.&nbsp; Call</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">print_error, or just allow the standard traceback mechanism to work.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">print_error, or just allow the standard traceback mechanism to work.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Then, the output will go wherever your &quot;write()&quot; method sends it.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Then, the output will go wherever your &quot;write()&quot; method sends it.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">The easiest way to do this is to use the <span class="TextSegSigDiff">&quot;io.</span>StringIO<span class="TextSegSigDiff">&quot;</span> class<span class="TextSegSigDiff">:</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">The easiest way to do this is to use the StringIO class<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">standard</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">library.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">import</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">io,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sys</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sys.stdout</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">io.StringIO()</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">print('foo')</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">print('hello</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">world!')</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sys.stderr.write(sys.stdout.getvalue())</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">foo</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">hello</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">world!</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Sample</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">catching</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">stdout:</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">A</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">custom</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">object</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">same</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">would</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">look</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">like</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">import</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">io,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sys</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; class StdoutCatcher<span class="TextSegSigDiff">(io.TextIOBase)</span>:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; class StdoutCatcher:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; def __init__(self):</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; def __init__(self):</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; self.data = <span class="TextSegSigDiff">[]</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; self.data = <span class="TextSegSigDiff">''</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; def write(self, stuff):</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; def write(self, stuff):</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; self.data<span class="TextSegSigDiff">.</span><span class="TextSegSigDiff">append(</span>stuff<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; self.data<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">self.data</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">+</span><span class="TextSegInsigDiff"> </span>stuff</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import sys</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import sys</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sys.stdout = StdoutCatcher()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sys.stdout = StdoutCatcher()</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>'foo'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegInsigDiff"> </span>'foo'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>'hello world!'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegInsigDiff"> </span>'hello world!'</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; sys.stderr.write(<span class="TextSegSigDiff">''.join(</span>sys.stdout.data<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; sys.stderr.write(sys.stdout.data)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; foo</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; foo</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; hello world!</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; hello world!</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I access a module written in Python from C?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I access a module written in Python from C?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You can get a pointer to the module object as follows:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You can get a pointer to the module object as follows:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; module = PyImport_ImportModule(&quot;&lt;modulename&gt;&quot;);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; module = PyImport_ImportModule(&quot;&lt;modulename&gt;&quot;);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If the module hasn't been imported yet (i.e. it is not yet present in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If the module hasn't been imported yet (i.e. it is not yet present in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;sys.modules&quot;), this initializes the module; otherwise it simply</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;sys.modules&quot;), this initializes the module; otherwise it simply</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">returns the value of &quot;sys.modules[&quot;&lt;modulename&gt;&quot;]&quot;.&nbsp; Note that it</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">returns the value of &quot;sys.modules[&quot;&lt;modulename&gt;&quot;]&quot;.&nbsp; Note that it</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">doesn't enter the module into any namespace -- it only ensures it has</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">doesn't enter the module into any namespace -- it only ensures it has</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">been initialized and is stored in &quot;sys.modules&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">been initialized and is stored in &quot;sys.modules&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You can then access the module's attributes (i.e. any name defined in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You can then access the module's attributes (i.e. any name defined in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the module) as follows:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the module) as follows:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; attr = PyObject_GetAttrString(module, &quot;&lt;attrname&gt;&quot;);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; attr = PyObject_GetAttrString(module, &quot;&lt;attrname&gt;&quot;);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Calling &quot;PyObject_SetAttrString()&quot; to assign to variables in the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Calling &quot;PyObject_SetAttrString()&quot; to assign to variables in the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">module also works.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">module also works.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I interface to C++ objects from Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I interface to C++ objects from Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==============================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==============================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Depending on your requirements, there are many approaches.&nbsp; To do this</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Depending on your requirements, there are many approaches.&nbsp; To do this</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">manually, begin by reading the &quot;Extending and Embedding&quot; document.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">manually, begin by reading the &quot;Extending and Embedding&quot; document.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Realize that for the Python run-time system, there isn't a whole lot</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Realize that for the Python run-time system, there isn't a whole lot</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of difference between C and C++ -- so the strategy of building a new</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of difference between C and C++ -- so the strategy of building a new</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python type around a C structure (pointer) type will also work for C++</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python type around a C structure (pointer) type will also work for C++</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">objects.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">objects.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For C++ libraries, see Writing C is hard; are there any alternatives?.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For C++ libraries, see Writing C is hard; are there any alternatives?.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">I added a module using the Setup file and the make fails; why?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">I added a module using the Setup file and the make fails; why?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==============================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==============================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Setup must end in a newline, if there is no newline there, the build</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Setup must end in a newline, if there is no newline there, the build</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">process fails.&nbsp; (Fixing this requires some ugly shell script hackery,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">process fails.&nbsp; (Fixing this requires some ugly shell script hackery,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and this bug is so minor that it doesn't seem worth the effort.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and this bug is so minor that it doesn't seem worth the effort.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I debug an extension?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I debug an extension?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">============================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">============================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When using GDB with dynamically loaded extensions, you can't set a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When using GDB with dynamically loaded extensions, you can't set a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">breakpoint in your extension until your extension is loaded.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">breakpoint in your extension until your extension is loaded.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In your &quot;.gdbinit&quot; file (or interactively), add the command:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In your &quot;.gdbinit&quot; file (or interactively), add the command:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; br _PyImport_LoadDynamicModule</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; br _PyImport_LoadDynamicModule</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Then, when you run GDB:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Then, when you run GDB:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; $ gdb /local/bin/python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; $ gdb /local/bin/python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; gdb) run myscript.py</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; gdb) run myscript.py</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; gdb) continue # repeat until your extension is loaded</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; gdb) continue # repeat until your extension is loaded</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; gdb) finish&nbsp;&nbsp; # so that your extension is loaded</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; gdb) finish&nbsp;&nbsp; # so that your extension is loaded</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; gdb) br myfunction.c:50</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; gdb) br myfunction.c:50</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; gdb) continue</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; gdb) continue</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">I want to compile a Python module on my Linux system, but some files are missing. Why?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">I want to compile a Python module on my Linux system, but some files are missing. Why?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">======================================================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">======================================================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Most packaged versions of Python don't include the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Most packaged versions of Python don't include the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;/usr/lib/python2.*x*/config/&quot; directory, which contains various files</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;/usr/lib/python2.*x*/config/&quot; directory, which contains various files</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">required for compiling Python extensions.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">required for compiling Python extensions.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For Red Hat, install the python-devel RPM to get the necessary files.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For Red Hat, install the python-devel RPM to get the necessary files.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">For Debian, run &quot;apt-get install python-dev&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For Debian, run &quot;apt-get install python-dev&quot;.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">What</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">does</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;SystemError:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">_PyImport_FixupExtension:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">yourmodule</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">loaded&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">mean?</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">=====================================================================================</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">This</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">means</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">created</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">extension</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">named</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;yourmodule&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">but</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">init</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">function</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">does</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">initialize</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">name.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Every</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">init</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">function</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">line</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">similar</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Py_InitModule(&quot;yourmodule&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">yourmodule_functions);</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">string</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">passed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">function</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">same</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">name</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">extension</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;SystemError&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">exception</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">raised.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I tell &quot;incomplete input&quot; from &quot;invalid input&quot;?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I tell &quot;incomplete input&quot; from &quot;invalid input&quot;?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">======================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">======================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Sometimes you want to emulate the Python interactive interpreter's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Sometimes you want to emulate the Python interactive interpreter's</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">behavior, where it gives you a continuation prompt when the input is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">behavior, where it gives you a continuation prompt when the input is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">incomplete (e.g. you typed the start of an &quot;if&quot; statement or you</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">incomplete (e.g. you typed the start of an &quot;if&quot; statement or you</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">didn't close your parentheses or triple string quotes), but it gives</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">didn't close your parentheses or triple string quotes), but it gives</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you a syntax error message immediately when the input is invalid.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you a syntax error message immediately when the input is invalid.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In Python you can use the &quot;codeop&quot; module, which approximates the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In Python you can use the &quot;codeop&quot; module, which approximates the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">parser's behavior sufficiently.&nbsp; IDLE uses this, for example.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">parser's behavior sufficiently.&nbsp; IDLE uses this, for example.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The easiest way to do it in C is to call &quot;PyRun_InteractiveLoop()&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The easiest way to do it in C is to call &quot;PyRun_InteractiveLoop()&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(perhaps in a separate thread) and let the Python interpreter handle</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(perhaps in a separate thread) and let the Python interpreter handle</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the input for you. You can also set the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the input for you. You can also set the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;PyOS_ReadlineFunctionPointer()&quot; to point at your custom input</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;PyOS_ReadlineFunctionPointer()&quot; to point at your custom input</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function. See &quot;Modules/readline.c&quot; and &quot;Parser/myreadline.c&quot; for more</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function. See &quot;Modules/readline.c&quot; and &quot;Parser/myreadline.c&quot; for more</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">hints.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">hints.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">However sometimes you have to run the embedded Python interpreter in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">However sometimes you have to run the embedded Python interpreter in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the same thread as your rest application and you can't allow the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the same thread as your rest application and you can't allow the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;PyRun_InteractiveLoop()&quot; to stop while waiting for user input.&nbsp; The</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;PyRun_InteractiveLoop()&quot; to stop while waiting for user input.&nbsp; The</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">one solution then is to call &quot;PyParser_ParseString()&quot; and test for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">one solution then is to call &quot;PyParser_ParseString()&quot; and test for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;e.error&quot; equal to &quot;E_EOF&quot;, which means the input is incomplete).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;e.error&quot; equal to &quot;E_EOF&quot;, which means the input is incomplete).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Here's a sample code fragment, untested, inspired by code from Alex</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Here's a sample code fragment, untested, inspired by code from Alex</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Farber:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Farber:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;Python.h&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;Python.h&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;node.h&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;node.h&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;errcode.h&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;errcode.h&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;grammar.h&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;grammar.h&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;parsetok.h&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;parsetok.h&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;compile.h&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;compile.h&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; int testcomplete(char *code)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; int testcomplete(char *code)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; /* code should end in \n */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; /* code should end in \n */</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; /* return -1 for error, 0 for incomplete, 1 for complete */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; /* return -1 for error, 0 for incomplete, 1 for complete */</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; {</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; {</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; node *n;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; node *n;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; perrdetail e;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; perrdetail e;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; n = PyParser_ParseString(code, &amp;_PyParser_Grammar,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; n = PyParser_ParseString(code, &amp;_PyParser_Grammar,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Py_file_input, &amp;e);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Py_file_input, &amp;e);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; if (n == NULL) {</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; if (n == NULL) {</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; if (e.error == E_EOF)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; if (e.error == E_EOF)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; return 0;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; return 0;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return -1;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return -1;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; PyNode_Free(n);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; PyNode_Free(n);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; return 1;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; return 1;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Another solution is trying to compile the received string with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Another solution is trying to compile the received string with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;Py_CompileString()&quot;. If it compiles without errors, try to execute</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;Py_CompileString()&quot;. If it compiles without errors, try to execute</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the returned code object by calling &quot;PyEval_EvalCode()&quot;. Otherwise</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the returned code object by calling &quot;PyEval_EvalCode()&quot;. Otherwise</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">save the input for later. If the compilation fails, find out if it's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">save the input for later. If the compilation fails, find out if it's</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">an error or just more input is required - by extracting the message</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">an error or just more input is required - by extracting the message</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">string from the exception tuple and comparing it to the string</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">string from the exception tuple and comparing it to the string</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;unexpected EOF while parsing&quot;.&nbsp; Here is a complete example using the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;unexpected EOF while parsing&quot;.&nbsp; Here is a complete example using the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">GNU readline library (you may want to ignore **SIGINT** while calling</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">GNU readline library (you may want to ignore **SIGINT** while calling</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">readline()):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">readline()):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;stdio.h&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;stdio.h&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;readline.h&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;readline.h&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;Python.h&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;Python.h&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;object.h&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;object.h&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;compile.h&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;compile.h&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;eval.h&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #include &lt;eval.h&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; int main (int argc, char* argv[])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; int main (int argc, char* argv[])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; {</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; {</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; int i, j, done = 0;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* lengths of line, code */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; int i, j, done = 0;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* lengths of line, code */</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; char ps1[] = &quot;&gt;&gt;&gt; &quot;;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; char ps1[] = &quot;&gt;&gt;&gt; &quot;;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; char ps2[] = &quot;... &quot;;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; char ps2[] = &quot;... &quot;;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; char *prompt = ps1;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; char *prompt = ps1;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; char *msg, *line, *code = NULL;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; char *msg, *line, *code = NULL;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; PyObject *src, *glb, *loc;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; PyObject *src, *glb, *loc;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; PyObject *exc, *val, *trb, *obj, *dum;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; PyObject *exc, *val, *trb, *obj, *dum;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; Py_Initialize ();</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; Py_Initialize ();</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; loc = PyDict_New ();</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; loc = PyDict_New ();</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; glb = PyDict_New ();</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; glb = PyDict_New ();</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; PyDict_SetItemString (glb, &quot;__builtins__&quot;, PyEval_GetBuiltins ());</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; PyDict_SetItemString (glb, &quot;__builtins__&quot;, PyEval_GetBuiltins ());</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; while (!done)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; while (!done)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; {</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; {</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; line = readline (prompt);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; line = readline (prompt);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; if (NULL == line)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Ctrl-D pressed */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; if (NULL == line)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* Ctrl-D pressed */</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; {</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; {</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; done = 1;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; done = 1;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; else</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; else</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; {</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; {</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; i = strlen (line);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; i = strlen (line);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; if (i &gt; 0)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; if (i &gt; 0)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; add_history (line);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* save non-empty lines */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; add_history (line);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* save non-empty lines */</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; if (NULL == code)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* nothing in code yet */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; if (NULL == code)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* nothing in code yet */</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; j = 0;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; j = 0;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; else</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; else</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; j = strlen (code);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; j = strlen (code);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; code = realloc (code, i + j + 2);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; code = realloc (code, i + j + 2);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; if (NULL == code)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* out of memory */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; if (NULL == code)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* out of memory */</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; exit (1);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; exit (1);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; if (0 == j)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* code was empty, so */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; if (0 == j)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* code was empty, so */</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; code[0] = '\0';&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* keep strncat happy */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; code[0] = '\0';&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* keep strncat happy */</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; strncat (code, line, i);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; /* append line to code */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; strncat (code, line, i);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; /* append line to code */</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; code[i + j] = '\n';&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* append '\n' to code */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; code[i + j] = '\n';&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* append '\n' to code */</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; code[i + j + 1] = '\0';</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; code[i + j + 1] = '\0';</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; src = Py_CompileString (code, &quot;&lt;stdin&gt;&quot;, Py_single_input);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; src = Py_CompileString (code, &quot;&lt;stdin&gt;&quot;, Py_single_input);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; if (NULL != src)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; /* compiled just fine - */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; if (NULL != src)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; /* compiled just fine - */</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; {</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; {</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (ps1&nbsp; == prompt ||&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* &quot;&gt;&gt;&gt; &quot; or */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (ps1&nbsp; == prompt ||&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* &quot;&gt;&gt;&gt; &quot; or */</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; '\n' == code[i + j - 1])&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; /* &quot;... &quot; and double '\n' */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; '\n' == code[i + j - 1])&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; /* &quot;... &quot; and double '\n' */</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; /* so execute it */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; /* so execute it */</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dum = PyEval_EvalCode (src, glb, loc);</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dum = PyEval_EvalCode (<span class="TextSegSigDiff">(PyCodeObject</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">*)</span>src, glb, loc);</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Py_XDECREF (dum);</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Py_XDECREF (dum);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Py_XDECREF (src);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Py_XDECREF (src);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free (code);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free (code);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; code = NULL;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; code = NULL;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (PyErr_Occurred ())</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (PyErr_Occurred ())</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PyErr_Print ();</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PyErr_Print ();</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prompt = ps1;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prompt = ps1;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* syntax error or E_EOF? */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* syntax error or E_EOF? */</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; else if (PyErr_ExceptionMatches (PyExc_SyntaxError))</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; else if (PyErr_ExceptionMatches (PyExc_SyntaxError))</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; {</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; {</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PyErr_Fetch (&amp;exc, &amp;val, &amp;trb);&nbsp; &nbsp; &nbsp; &nbsp; /* clears exception! */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PyErr_Fetch (&amp;exc, &amp;val, &amp;trb);&nbsp; &nbsp; &nbsp; &nbsp; /* clears exception! */</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (PyArg_ParseTuple (val, &quot;sO&quot;, &amp;msg, &amp;obj) &amp;&amp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (PyArg_ParseTuple (val, &quot;sO&quot;, &amp;msg, &amp;obj) &amp;&amp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; !strcmp (msg, &quot;unexpected EOF while parsing&quot;)) /* E_EOF */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; !strcmp (msg, &quot;unexpected EOF while parsing&quot;)) /* E_EOF */</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Py_XDECREF (exc);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Py_XDECREF (exc);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Py_XDECREF (val);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Py_XDECREF (val);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Py_XDECREF (trb);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Py_XDECREF (trb);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prompt = ps2;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prompt = ps2;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; /* some other syntax error */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; /* some other syntax error */</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PyErr_Restore (exc, val, trb);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PyErr_Restore (exc, val, trb);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PyErr_Print ();</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PyErr_Print ();</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free (code);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free (code);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; code = NULL;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; code = NULL;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prompt = ps1;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prompt = ps1;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; else&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; /* some non-syntax error */</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; else&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; /* some non-syntax error */</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; {</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; {</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PyErr_Print ();</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PyErr_Print ();</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free (code);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; free (code);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; code = NULL;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; code = NULL;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prompt = ps1;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prompt = ps1;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; free (line);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; free (line);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; Py_XDECREF(glb);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; Py_XDECREF(glb);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; Py_XDECREF(loc);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; Py_XDECREF(loc);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; Py_Finalize();</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; Py_Finalize();</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; exit(0);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; exit(0);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I find undefined g++ symbols __builtin_new or __pure_virtual?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I find undefined g++ symbols __builtin_new or __pure_virtual?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">====================================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">====================================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To dynamically load g++ extension modules, you must recompile Python,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To dynamically load g++ extension modules, you must recompile Python,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">relink it using g++ (change LINKCC in the Python Modules Makefile),</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">relink it using g++ (change LINKCC in the Python Modules Makefile),</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and link your extension module using g++ (e.g., &quot;g++ -shared -o</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and link your extension module using g++ (e.g., &quot;g++ -shared -o</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">mymodule.so mymodule.o&quot;).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">mymodule.so mymodule.o&quot;).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">================================================================================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">================================================================================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Yes, you can inherit from built-in classes such as &quot;int&quot;, &quot;list&quot;,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Yes, you can inherit from built-in classes such as &quot;int&quot;, &quot;list&quot;,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;dict&quot;, etc.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;dict&quot;, etc.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The Boost Python Library (BPL,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The Boost Python Library (BPL,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">http://www.boost.org/libs/python/doc/index.html) provides a way of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">http://www.boost.org/libs/python/doc/index.html) provides a way of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">doing this from C++ (i.e. you can inherit from an extension class</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">doing this from C++ (i.e. you can inherit from an extension class</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">written in C++ using the BPL).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">written in C++ using the BPL).</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">When</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">importing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">X,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">why</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">I</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">get</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;undefined</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">symbol:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">PyUnicodeUCS2*&quot;?</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">=========================================================================</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">You</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">uses</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">4-byte</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">representation</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Unicode</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">characters,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">but</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">some</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">C</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">extension</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">importing</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">was</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">compiled</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">uses</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2-byte</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">representation</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Unicode</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">characters</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">default).</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">instead</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">name</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">undefined</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">symbol</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">starts</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;PyUnicodeUCS4&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">problem</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">reverse:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">was</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">built</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">using</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">2-byte</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Unicode</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">characters,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">extension</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">was</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">compiled</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">using</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">4-byte</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Unicode</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">characters.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">This</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">easily</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">occur</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">when</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pre-built</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">extension</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">packages.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">RedHat</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Linux</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">7.x,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">particular,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">provided</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;python2&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">binary</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">compiled</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">4-byte</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Unicode.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">This</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">only</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">causes</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">link</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">failure</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">extension</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">uses</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">any</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;PyUnicode_*()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">functions.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">It</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">also</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">problem</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">extension</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">uses</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">any</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Unicode-related</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">format</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">specifiers</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;Py_BuildValue()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">similar)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">parameter</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">specifications</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;PyArg_ParseTuple()&quot;.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">You</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">check</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">size</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Unicode</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">character</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">interpreter</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">by</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">checking</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">value</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sys.maxunicode:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">import</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sys</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sys.maxunicode</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">65535:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">...</span><span class="TextSegInsigDiff">&nbsp; &nbsp;&nbsp; </span><span class="TextSegSigDiff">print</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'UCS4</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">build'</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">...</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">else:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">...</span><span class="TextSegInsigDiff">&nbsp; &nbsp;&nbsp; </span><span class="TextSegSigDiff">print</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'UCS2</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">build'</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">only</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">way</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">solve</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">problem</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">extension</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">modules</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">compiled</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">binary</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">built</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">same</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">size</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Unicode</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">characters.</span></td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\faq\general.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">General Python FAQ</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">General Python FAQ</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">******************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">******************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">General Information</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">General Information</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What is Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What is Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python is an interpreted, interactive, object-oriented programming</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python is an interpreted, interactive, object-oriented programming</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">language.&nbsp; It incorporates modules, exceptions, dynamic typing, very</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">language.&nbsp; It incorporates modules, exceptions, dynamic typing, very</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">high level dynamic data types, and classes.&nbsp; Python combines</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">high level dynamic data types, and classes.&nbsp; Python combines</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">remarkable power with very clear syntax. It has interfaces to many</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">remarkable power with very clear syntax. It has interfaces to many</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">system calls and libraries, as well as to various window systems, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">system calls and libraries, as well as to various window systems, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is extensible in C or C++.&nbsp; It is also usable as an extension language</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is extensible in C or C++.&nbsp; It is also usable as an extension language</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">for applications that need a programmable interface. Finally, Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for applications that need a programmable interface. Finally, Python</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">is portable: it runs on many Unix variants, on the Mac, and on <span class="TextSegSigDiff">Window</span>s</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">is portable: it runs on many Unix variants, on the Mac, and on <span class="TextSegSigDiff">PC</span>s</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">2000</span> and <span class="TextSegSigDiff">later</span>.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">under</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">MS-DOS,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Windows,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Windows</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">NT,</span> and <span class="TextSegSigDiff">OS/2</span>.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To find out more, start with The Python Tutorial.&nbsp; The Beginner's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To find out more, start with The Python Tutorial.&nbsp; The Beginner's</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Guide to Python links to other introductory tutorials and resources</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Guide to Python links to other introductory tutorials and resources</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for learning Python.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for learning Python.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What is the Python Software Foundation?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What is the Python Software Foundation?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The Python Software Foundation is an independent non-profit</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The Python Software Foundation is an independent non-profit</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">organization that holds the copyright on Python versions 2.1 and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">organization that holds the copyright on Python versions 2.1 and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">newer.&nbsp; The PSF's mission is to advance open source technology related</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">newer.&nbsp; The PSF's mission is to advance open source technology related</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to the Python programming language and to publicize the use of Python.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to the Python programming language and to publicize the use of Python.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The PSF's home page is at https://www.python.org/psf/.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The PSF's home page is at https://www.python.org/psf/.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Donations to the PSF are tax-exempt in the US.&nbsp; If you use Python and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Donations to the PSF are tax-exempt in the US.&nbsp; If you use Python and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">find it helpful, please contribute via the PSF donation page.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">find it helpful, please contribute via the PSF donation page.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Are there copyright restrictions on the use of Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Are there copyright restrictions on the use of Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You can do anything you want with the source, as long as you leave the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You can do anything you want with the source, as long as you leave the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">copyrights in and display those copyrights in any documentation about</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">copyrights in and display those copyrights in any documentation about</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python that you produce.&nbsp; If you honor the copyright rules, it's OK to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python that you produce.&nbsp; If you honor the copyright rules, it's OK to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">use Python for commercial use, to sell copies of Python in source or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">use Python for commercial use, to sell copies of Python in source or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">binary form (modified or unmodified), or to sell products that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">binary form (modified or unmodified), or to sell products that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">incorporate Python in some form.&nbsp; We would still like to know about</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">incorporate Python in some form.&nbsp; We would still like to know about</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">all commercial use of Python, of course.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">all commercial use of Python, of course.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">See the PSF license page to find further explanations and a link to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">See the PSF license page to find further explanations and a link to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the full text of the license.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the full text of the license.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The Python logo is trademarked, and in certain cases permission is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The Python logo is trademarked, and in certain cases permission is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">required to use it.&nbsp; Consult the Trademark Usage Policy for more</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">required to use it.&nbsp; Consult the Trademark Usage Policy for more</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">information.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">information.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why was Python created in the first place?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why was Python created in the first place?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Here's a *very* brief summary of what started it all, written by Guido</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Here's a *very* brief summary of what started it all, written by Guido</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">van Rossum:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">van Rossum:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; I had extensive experience with implementing an interpreted</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; I had extensive experience with implementing an interpreted</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; language in the ABC group at CWI, and from working with this group</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; language in the ABC group at CWI, and from working with this group</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; I had learned a lot about language design.&nbsp; This is the origin of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; I had learned a lot about language design.&nbsp; This is the origin of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; many Python features, including the use of indentation for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; many Python features, including the use of indentation for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; statement grouping and the inclusion of very-high-level data types</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; statement grouping and the inclusion of very-high-level data types</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; (although the details are all different in Python).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; (although the details are all different in Python).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; I had a number of gripes about the ABC language, but also liked</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; I had a number of gripes about the ABC language, but also liked</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; many of its features.&nbsp; It was impossible to extend the ABC language</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; many of its features.&nbsp; It was impossible to extend the ABC language</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; (or its implementation) to remedy my complaints -- in fact its lack</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; (or its implementation) to remedy my complaints -- in fact its lack</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; of extensibility was one of its biggest problems.&nbsp; I had some</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; of extensibility was one of its biggest problems.&nbsp; I had some</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; experience with using Modula-2+ and talked with the designers of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; experience with using Modula-2+ and talked with the designers of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Modula-3 and read the Modula-3 report. Modula-3 is the origin of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Modula-3 and read the Modula-3 report. Modula-3 is the origin of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; the syntax and semantics used for exceptions, and some other Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; the syntax and semantics used for exceptions, and some other Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; features.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; features.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; I was working in the Amoeba distributed operating system group at</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; I was working in the Amoeba distributed operating system group at</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; CWI.&nbsp; We needed a better way to do system administration than by</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; CWI.&nbsp; We needed a better way to do system administration than by</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; writing either C programs or Bourne shell scripts, since Amoeba had</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; writing either C programs or Bourne shell scripts, since Amoeba had</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; its own system call interface which wasn't easily accessible from</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; its own system call interface which wasn't easily accessible from</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; the Bourne shell.&nbsp; My experience with error handling in Amoeba made</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; the Bourne shell.&nbsp; My experience with error handling in Amoeba made</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; me acutely aware of the importance of exceptions as a programming</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; me acutely aware of the importance of exceptions as a programming</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; language feature.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; language feature.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; It occurred to me that a scripting language with a syntax like ABC</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; It occurred to me that a scripting language with a syntax like ABC</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; but with access to the Amoeba system calls would fill the need.&nbsp; I</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; but with access to the Amoeba system calls would fill the need.&nbsp; I</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; realized that it would be foolish to write an Amoeba-specific</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; realized that it would be foolish to write an Amoeba-specific</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; language, so I decided that I needed a language that was generally</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; language, so I decided that I needed a language that was generally</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; extensible.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; extensible.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; During the 1989 Christmas holidays, I had a lot of time on my hand,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; During the 1989 Christmas holidays, I had a lot of time on my hand,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; so I decided to give it a try.&nbsp; During the next year, while still</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; so I decided to give it a try.&nbsp; During the next year, while still</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; mostly working on it in my own time, Python was used in the Amoeba</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; mostly working on it in my own time, Python was used in the Amoeba</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; project with increasing success, and the feedback from colleagues</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; project with increasing success, and the feedback from colleagues</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; made me add many early improvements.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; made me add many early improvements.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; In February 1991, after just over a year of development, I decided</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; In February 1991, after just over a year of development, I decided</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; to post to USENET.&nbsp; The rest is in the &quot;Misc/HISTORY&quot; file.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; to post to USENET.&nbsp; The rest is in the &quot;Misc/HISTORY&quot; file.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What is Python good for?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What is Python good for?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python is a high-level general-purpose programming language that can</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python is a high-level general-purpose programming language that can</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">be applied to many different classes of problems.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">be applied to many different classes of problems.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The language comes with a large standard library that covers areas</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The language comes with a large standard library that covers areas</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">such as string processing (regular expressions, Unicode, calculating</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">such as string processing (regular expressions, Unicode, calculating</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">differences between files), Internet protocols (HTTP, FTP, SMTP, XML-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">differences between files), Internet protocols (HTTP, FTP, SMTP, XML-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">RPC, POP, IMAP, CGI programming), software engineering (unit testing,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">RPC, POP, IMAP, CGI programming), software engineering (unit testing,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">logging, profiling, parsing Python code), and operating system</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">logging, profiling, parsing Python code), and operating system</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">interfaces (system calls, filesystems, TCP/IP sockets).&nbsp; Look at the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interfaces (system calls, filesystems, TCP/IP sockets).&nbsp; Look at the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">table of contents for The Python Standard Library to get an idea of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">table of contents for The Python Standard Library to get an idea of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">what's available.&nbsp; A wide variety of third-party extensions are also</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">what's available.&nbsp; A wide variety of third-party extensions are also</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">available.&nbsp; Consult the Python Package Index to find packages of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">available.&nbsp; Consult the Python Package Index to find packages of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">interest to you.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interest to you.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How does the Python version numbering scheme work?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How does the Python version numbering scheme work?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python versions are numbered A.B.C or A.B.&nbsp; A is the major version</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python versions are numbered A.B.C or A.B.&nbsp; A is the major version</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">number -- it is only incremented for really major changes in the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">number -- it is only incremented for really major changes in the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">language.&nbsp; B is the minor version number, incremented for less earth-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">language.&nbsp; B is the minor version number, incremented for less earth-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">shattering changes.&nbsp; C is the micro-level -- it is incremented for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">shattering changes.&nbsp; C is the micro-level -- it is incremented for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">each bugfix release.&nbsp; See **PEP 6** for more information about bugfix</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">each bugfix release.&nbsp; See **PEP 6** for more information about bugfix</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">releases.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">releases.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Not all releases are bugfix releases.&nbsp; In the run-up to a new major</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Not all releases are bugfix releases.&nbsp; In the run-up to a new major</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">release, a series of development releases are made, denoted as alpha,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">release, a series of development releases are made, denoted as alpha,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">beta, or release candidate.&nbsp; Alphas are early releases in which</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">beta, or release candidate.&nbsp; Alphas are early releases in which</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">interfaces aren't yet finalized; it's not unexpected to see an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interfaces aren't yet finalized; it's not unexpected to see an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">interface change between two alpha releases. Betas are more stable,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interface change between two alpha releases. Betas are more stable,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">preserving existing interfaces but possibly adding new modules, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">preserving existing interfaces but possibly adding new modules, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">release candidates are frozen, making no changes except as needed to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">release candidates are frozen, making no changes except as needed to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">fix critical bugs.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">fix critical bugs.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Alpha, beta and release candidate versions have an additional suffix.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Alpha, beta and release candidate versions have an additional suffix.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The suffix for an alpha version is &quot;aN&quot; for some small number N, the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The suffix for an alpha version is &quot;aN&quot; for some small number N, the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">suffix for a beta version is &quot;bN&quot; for some small number N, and the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">suffix for a beta version is &quot;bN&quot; for some small number N, and the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">suffix for a release candidate version is &quot;cN&quot; for some small number</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">suffix for a release candidate version is &quot;cN&quot; for some small number</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">N.&nbsp; In other words, all versions labeled 2.0aN precede the versions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">N.&nbsp; In other words, all versions labeled 2.0aN precede the versions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">labeled 2.0bN, which precede versions labeled 2.0cN, and *those*</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">labeled 2.0bN, which precede versions labeled 2.0cN, and *those*</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">precede 2.0.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">precede 2.0.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You may also find version numbers with a &quot;+&quot; suffix, e.g. &quot;2.2+&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You may also find version numbers with a &quot;+&quot; suffix, e.g. &quot;2.2+&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">These are unreleased versions, built directly from the CPython</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">These are unreleased versions, built directly from the CPython</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">development repository.&nbsp; In practice, after a final minor release is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">development repository.&nbsp; In practice, after a final minor release is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">made, the version is incremented to the next minor version, which</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">made, the version is incremented to the next minor version, which</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">becomes the &quot;a0&quot; version, e.g. &quot;2.4a0&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">becomes the &quot;a0&quot; version, e.g. &quot;2.4a0&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">See also the documentation for &quot;sys.version&quot;, &quot;sys.hexversion&quot;, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">See also the documentation for &quot;sys.version&quot;, &quot;sys.hexversion&quot;, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;sys.version_info&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;sys.version_info&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I obtain a copy of the Python source?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I obtain a copy of the Python source?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The latest Python source distribution is always available from</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The latest Python source distribution is always available from</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">python.org, at https://www.python.org/downloads/.&nbsp; The latest</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">python.org, at https://www.python.org/downloads/.&nbsp; The latest</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">development sources can be obtained at</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">development sources can be obtained at</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">https://github.com/python/cpython/.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">https://github.com/python/cpython/.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The source distribution is a gzipped tar file containing the complete</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The source distribution is a gzipped tar file containing the complete</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">C source, Sphinx-formatted documentation, Python library modules,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">C source, Sphinx-formatted documentation, Python library modules,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">example programs, and several useful pieces of freely distributable</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">example programs, and several useful pieces of freely distributable</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">software.&nbsp; The source will compile and run out of the box on most UNIX</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">software.&nbsp; The source will compile and run out of the box on most UNIX</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">platforms.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">platforms.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Consult the Getting Started section of the Python Developer's Guide</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Consult the Getting Started section of the Python Developer's Guide</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for more information on getting the source code and compiling it.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for more information on getting the source code and compiling it.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I get documentation on Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I get documentation on Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The standard documentation for the current stable version of Python is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The standard documentation for the current stable version of Python is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">available at https://docs.python.org/3/.&nbsp; PDF, plain text, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">available at https://docs.python.org/3/.&nbsp; PDF, plain text, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">downloadable HTML versions are also available at</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">downloadable HTML versions are also available at</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">https://docs.python.org/3/download.html.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">https://docs.python.org/3/download.html.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The documentation is written in reStructuredText and processed by the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The documentation is written in reStructuredText and processed by the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Sphinx documentation tool.&nbsp; The reStructuredText source for the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Sphinx documentation tool.&nbsp; The reStructuredText source for the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">documentation is part of the Python source distribution.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">documentation is part of the Python source distribution.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">I've never programmed before. Is there a Python tutorial?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">I've never programmed before. Is there a Python tutorial?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There are numerous tutorials and books available.&nbsp; The standard</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There are numerous tutorials and books available.&nbsp; The standard</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">documentation includes The Python Tutorial.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">documentation includes The Python Tutorial.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Consult the Beginner's Guide to find information for beginning Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Consult the Beginner's Guide to find information for beginning Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">programmers, including lists of tutorials.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">programmers, including lists of tutorials.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Is there a newsgroup or mailing list devoted to Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Is there a newsgroup or mailing list devoted to Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There is a newsgroup, *comp.lang.python*, and a mailing list, python-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There is a newsgroup, *comp.lang.python*, and a mailing list, python-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">list.&nbsp; The newsgroup and mailing list are gatewayed into each other --</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">list.&nbsp; The newsgroup and mailing list are gatewayed into each other --</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">if you can read news it's unnecessary to subscribe to the mailing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">if you can read news it's unnecessary to subscribe to the mailing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">list. *comp.lang.python* is high-traffic, receiving hundreds of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">list. *comp.lang.python* is high-traffic, receiving hundreds of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">postings every day, and Usenet readers are often more able to cope</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">postings every day, and Usenet readers are often more able to cope</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">with this volume.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">with this volume.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Announcements of new software releases and events can be found in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Announcements of new software releases and events can be found in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">comp.lang.python.announce, a low-traffic moderated list that receives</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">comp.lang.python.announce, a low-traffic moderated list that receives</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">about five postings per day.&nbsp; It's available as the python-announce</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">about five postings per day.&nbsp; It's available as the python-announce</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">mailing list.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">mailing list.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">More info about other mailing lists and newsgroups can be found at</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">More info about other mailing lists and newsgroups can be found at</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">https://www.python.org/community/lists/.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">https://www.python.org/community/lists/.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I get a beta test version of Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I get a beta test version of Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Alpha and beta releases are available from</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Alpha and beta releases are available from</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">https://www.python.org/downloads/.&nbsp; All releases are announced on the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">https://www.python.org/downloads/.&nbsp; All releases are announced on the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">comp.lang.python and comp.lang.python.announce newsgroups and on the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">comp.lang.python and comp.lang.python.announce newsgroups and on the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python home page at https://www.python.org/; an RSS feed of news is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python home page at https://www.python.org/; an RSS feed of news is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">available.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">available.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You can also access the development version of Python through Git.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You can also access the development version of Python through Git.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">See The Python Developer's Guide for details.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">See The Python Developer's Guide for details.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I submit bug reports and patches for Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I submit bug reports and patches for Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To report a bug or submit a patch, please use the Roundup installation</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To report a bug or submit a patch, please use the Roundup installation</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">at https://bugs.python.org/.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">at https://bugs.python.org/.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You must have a Roundup account to report bugs; this makes it possible</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You must have a Roundup account to report bugs; this makes it possible</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for us to contact you if we have follow-up questions.&nbsp; It will also</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for us to contact you if we have follow-up questions.&nbsp; It will also</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">enable Roundup to send you updates as we act on your bug. If you had</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">enable Roundup to send you updates as we act on your bug. If you had</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">previously used SourceForge to report bugs to Python, you can obtain</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">previously used SourceForge to report bugs to Python, you can obtain</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">your Roundup password through Roundup's password reset procedure.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">your Roundup password through Roundup's password reset procedure.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For more information on how Python is developed, consult the Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For more information on how Python is developed, consult the Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Developer's Guide.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Developer's Guide.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Are there any published articles about Python that I can reference?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Are there any published articles about Python that I can reference?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It's probably best to cite your favorite book about Python.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It's probably best to cite your favorite book about Python.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The very first article about Python was written in 1991 and is now</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The very first article about Python was written in 1991 and is now</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">quite outdated.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">quite outdated.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Guido van Rossum and Jelke de Boer, &quot;Interactively Testing Remote</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Guido van Rossum and Jelke de Boer, &quot;Interactively Testing Remote</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Servers Using the Python Programming Language&quot;, CWI Quarterly,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Servers Using the Python Programming Language&quot;, CWI Quarterly,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Volume 4, Issue 4 (December 1991), Amsterdam, pp 283--303.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Volume 4, Issue 4 (December 1991), Amsterdam, pp 283--303.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Are there any books on Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Are there any books on Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Yes, there are many, and more are being published.&nbsp; See the python.org</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Yes, there are many, and more are being published.&nbsp; See the python.org</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">wiki at https://wiki.python.org/moin/PythonBooks for a list.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">wiki at https://wiki.python.org/moin/PythonBooks for a list.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You can also search online bookstores for &quot;Python&quot; and filter out the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You can also search online bookstores for &quot;Python&quot; and filter out the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Monty Python references; or perhaps search for &quot;Python&quot; and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Monty Python references; or perhaps search for &quot;Python&quot; and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;language&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;language&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Where in the world is www.python.org located?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Where in the world is www.python.org located?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The Python project's infrastructure is located all over the world.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The Python project's infrastructure is located all over the world.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">www.python.org is graciously hosted by Rackspace, with CDN caching</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">www.python.org is graciously hosted by Rackspace, with CDN caching</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">provided by Fastly.&nbsp; Upfront Systems hosts bugs.python.org.&nbsp; Many</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">provided by Fastly.&nbsp; Upfront Systems hosts bugs.python.org.&nbsp; Many</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">other Python services like the Wiki are hosted by Oregon State</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">other Python services like the Wiki are hosted by Oregon State</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">University Open Source Lab.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">University Open Source Lab.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why is it called Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why is it called Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When he began implementing Python, Guido van Rossum was also reading</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When he began implementing Python, Guido van Rossum was also reading</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the published scripts from &quot;Monty Python's Flying Circus&quot;, a BBC</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the published scripts from &quot;Monty Python's Flying Circus&quot;, a BBC</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">comedy series from the 1970s.&nbsp; Van Rossum thought he needed a name</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">comedy series from the 1970s.&nbsp; Van Rossum thought he needed a name</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that was short, unique, and slightly mysterious, so he decided to call</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that was short, unique, and slightly mysterious, so he decided to call</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the language Python.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the language Python.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Do I have to like &quot;Monty Python's Flying Circus&quot;?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Do I have to like &quot;Monty Python's Flying Circus&quot;?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">No, but it helps.&nbsp; :)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">No, but it helps.&nbsp; :)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python in the real world</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python in the real world</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">========================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">========================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How stable is Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How stable is Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Very stable.&nbsp; New, stable releases have been coming out roughly every</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Very stable.&nbsp; New, stable releases have been coming out roughly every</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">6 to 18 months since 1991, and this seems likely to continue.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">6 to 18 months since 1991, and this seems likely to continue.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Currently there are usually around 18 months between major releases.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Currently there are usually around 18 months between major releases.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The developers issue &quot;bugfix&quot; releases of older versions, so the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The developers issue &quot;bugfix&quot; releases of older versions, so the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">stability of existing releases gradually improves.&nbsp; Bugfix releases,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">stability of existing releases gradually improves.&nbsp; Bugfix releases,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">indicated by a third component of the version number (e.g. 2.5.3,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">indicated by a third component of the version number (e.g. 2.5.3,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">2.6.2), are managed for stability; only fixes for known problems are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">2.6.2), are managed for stability; only fixes for known problems are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">included in a bugfix release, and it's guaranteed that interfaces will</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">included in a bugfix release, and it's guaranteed that interfaces will</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">remain the same throughout a series of bugfix releases.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">remain the same throughout a series of bugfix releases.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The latest stable releases can always be found on the Python download</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The latest stable releases can always be found on the Python download</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">page.&nbsp; There are two recommended production-ready versions at this</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">page.&nbsp; There are two recommended production-ready versions at this</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">point in time, because at the moment there are two branches of stable</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">point in time, because at the moment there are two branches of stable</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">releases: 2.x and 3.x.&nbsp; Python 3.x may be less useful than 2.x, since</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">releases: 2.x and 3.x.&nbsp; Python 3.x may be less useful than 2.x, since</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">currently there is more third party software available for Python 2</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">currently there is more third party software available for Python 2</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">than for Python 3.&nbsp; Python 2 code will generally not run unchanged in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">than for Python 3.&nbsp; Python 2 code will generally not run unchanged in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python 3.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python 3.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How many people are using Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How many people are using Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There are probably tens of thousands of users, though it's difficult</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There are probably tens of thousands of users, though it's difficult</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to obtain an exact count.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to obtain an exact count.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python is available for free download, so there are no sales figures,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python is available for free download, so there are no sales figures,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and it's available from many different sites and packaged with many</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and it's available from many different sites and packaged with many</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Linux distributions, so download statistics don't tell the whole story</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Linux distributions, so download statistics don't tell the whole story</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">either.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">either.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The comp.lang.python newsgroup is very active, but not all Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The comp.lang.python newsgroup is very active, but not all Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">users post to the group or even read it.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">users post to the group or even read it.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Have any significant projects been done in Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Have any significant projects been done in Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">See https://www.python.org/about/success for a list of projects that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">See https://www.python.org/about/success for a list of projects that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">use Python. Consulting the proceedings for past Python conferences</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">use Python. Consulting the proceedings for past Python conferences</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">will reveal contributions from many different companies and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">will reveal contributions from many different companies and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">organizations.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">organizations.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">High-profile Python projects include the Mailman mailing list manager</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">High-profile Python projects include the Mailman mailing list manager</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and the Zope application server.&nbsp; Several Linux distributions, most</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and the Zope application server.&nbsp; Several Linux distributions, most</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">notably Red Hat, have written part or all of their installer and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">notably Red Hat, have written part or all of their installer and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">system administration software in Python.&nbsp; Companies that use Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">system administration software in Python.&nbsp; Companies that use Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">internally include Google, Yahoo, and Lucasfilm Ltd.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">internally include Google, Yahoo, and Lucasfilm Ltd.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What new developments are expected for Python in the future?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What new developments are expected for Python in the future?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">See https://www.python.org/dev/peps/ for the Python Enhancement</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">See https://www.python.org/dev/peps/ for the Python Enhancement</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Proposals (PEPs). PEPs are design documents describing a suggested new</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Proposals (PEPs). PEPs are design documents describing a suggested new</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">feature for Python, providing a concise technical specification and a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">feature for Python, providing a concise technical specification and a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">rationale.&nbsp; Look for a PEP titled &quot;Python X.Y Release Schedule&quot;, where</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">rationale.&nbsp; Look for a PEP titled &quot;Python X.Y Release Schedule&quot;, where</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">X.Y is a version that hasn't been publicly released yet.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">X.Y is a version that hasn't been publicly released yet.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">New development is discussed on the python-dev mailing list.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">New development is discussed on the python-dev mailing list.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Is it reasonable to propose incompatible changes to Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Is it reasonable to propose incompatible changes to Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In general, no.&nbsp; There are already millions of lines of Python code</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In general, no.&nbsp; There are already millions of lines of Python code</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">around the world, so any change in the language that invalidates more</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">around the world, so any change in the language that invalidates more</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">than a very small fraction of existing programs has to be frowned</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">than a very small fraction of existing programs has to be frowned</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">upon.&nbsp; Even if you can provide a conversion program, there's still the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">upon.&nbsp; Even if you can provide a conversion program, there's still the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">problem of updating all documentation; many books have been written</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">problem of updating all documentation; many books have been written</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">about Python, and we don't want to invalidate them all at a single</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">about Python, and we don't want to invalidate them all at a single</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">stroke.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">stroke.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Providing a gradual upgrade path is necessary if a feature has to be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Providing a gradual upgrade path is necessary if a feature has to be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">changed. **PEP 5** describes the procedure followed for introducing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">changed. **PEP 5** describes the procedure followed for introducing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">backward-incompatible changes while minimizing disruption for users.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">backward-incompatible changes while minimizing disruption for users.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Is Python a good language for beginning programmers?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Is Python a good language for beginning programmers?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Yes.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Yes.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It is still common to start students with a procedural and statically</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It is still common to start students with a procedural and statically</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">typed language such as Pascal, C, or a subset of C++ or Java.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">typed language such as Pascal, C, or a subset of C++ or Java.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Students may be better served by learning Python as their first</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Students may be better served by learning Python as their first</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">language.&nbsp; Python has a very simple and consistent syntax and a large</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">language.&nbsp; Python has a very simple and consistent syntax and a large</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">standard library and, most importantly, using Python in a beginning</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">standard library and, most importantly, using Python in a beginning</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">programming course lets students concentrate on important programming</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">programming course lets students concentrate on important programming</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">skills such as problem decomposition and data type design.&nbsp; With</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">skills such as problem decomposition and data type design.&nbsp; With</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python, students can be quickly introduced to basic concepts such as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python, students can be quickly introduced to basic concepts such as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">loops and procedures.&nbsp; They can probably even work with user-defined</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">loops and procedures.&nbsp; They can probably even work with user-defined</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">objects in their very first course.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">objects in their very first course.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For a student who has never programmed before, using a statically</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For a student who has never programmed before, using a statically</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">typed language seems unnatural.&nbsp; It presents additional complexity</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">typed language seems unnatural.&nbsp; It presents additional complexity</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that the student must master and slows the pace of the course.&nbsp; The</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that the student must master and slows the pace of the course.&nbsp; The</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">students are trying to learn to think like a computer, decompose</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">students are trying to learn to think like a computer, decompose</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">problems, design consistent interfaces, and encapsulate data.&nbsp; While</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">problems, design consistent interfaces, and encapsulate data.&nbsp; While</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">learning to use a statically typed language is important in the long</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">learning to use a statically typed language is important in the long</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">term, it is not necessarily the best topic to address in the students'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">term, it is not necessarily the best topic to address in the students'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">first programming course.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">first programming course.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Many other aspects of Python make it a good first language.&nbsp; Like</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Many other aspects of Python make it a good first language.&nbsp; Like</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Java, Python has a large standard library so that students can be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Java, Python has a large standard library so that students can be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">assigned programming projects very early in the course that *do*</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">assigned programming projects very early in the course that *do*</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">something.&nbsp; Assignments aren't restricted to the standard four-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">something.&nbsp; Assignments aren't restricted to the standard four-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function calculator and check balancing programs.&nbsp; By using the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function calculator and check balancing programs.&nbsp; By using the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">standard library, students can gain the satisfaction of working on</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">standard library, students can gain the satisfaction of working on</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">realistic applications as they learn the fundamentals of programming.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">realistic applications as they learn the fundamentals of programming.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Using the standard library also teaches students about code reuse.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Using the standard library also teaches students about code reuse.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Third-party modules such as PyGame are also helpful in extending the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Third-party modules such as PyGame are also helpful in extending the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">students' reach.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">students' reach.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python's interactive interpreter enables students to test language</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python's interactive interpreter enables students to test language</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">features while they're programming.&nbsp; They can keep a window with the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">features while they're programming.&nbsp; They can keep a window with the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">interpreter running while they enter their program's source in another</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interpreter running while they enter their program's source in another</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">window.&nbsp; If they can't remember the methods for a list, they can do</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">window.&nbsp; If they can't remember the methods for a list, they can do</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">something like this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">something like this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; L = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; L = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; dir(L) # doctest: +NORMALIZE_WHITESPACE</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; dir(L) # doctest: +NORMALIZE_WHITESPACE</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ['__add__', '__class__', '__contains__', '__delattr__', '__delitem__',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ['__add__', '__class__', '__contains__', '__delattr__', '__delitem__',</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; '__d<span class="TextSegSigDiff">ir</span>__', '__doc__', '__eq__', '__format__', '__ge__',</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; '__d<span class="TextSegSigDiff">elslice</span>__', '__doc__', '__eq__', '__format__', '__ge__',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; '__getattribute__', '__getitem__', '__gt<span class="TextSegSigDiff">__',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'__hash</span>__', '__<span class="TextSegSigDiff">iadd</span>__',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; '__getattribute__', '__getitem__', '__g<span class="TextSegSigDiff">e</span>t<span class="TextSegSigDiff">slice</span>__', '__<span class="TextSegSigDiff">gt</span>__',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; '__<span class="TextSegSigDiff">imul</span>__', '__i<span class="TextSegSigDiff">nit</span>__', '__i<span class="TextSegSigDiff">ter</span>__', '__<span class="TextSegSigDiff">le</span>__', '__<span class="TextSegSigDiff">l</span><span class="TextSegSigDiff">en</span>__', '__l<span class="TextSegSigDiff">t</span>__',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; '__<span class="TextSegSigDiff">hash</span>__', '__i<span class="TextSegSigDiff">add</span>__', '__i<span class="TextSegSigDiff">mul</span>__', '__<span class="TextSegSigDiff">init</span>__', '__<span class="TextSegSigDiff">iter</span>__', '__l<span class="TextSegSigDiff">e</span>__',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; '__<span class="TextSegSigDiff">mu</span><span class="TextSegSigDiff">l</span>__', '__<span class="TextSegSigDiff">ne</span>__', '__ne<span class="TextSegSigDiff">w</span>__', '__<span class="TextSegSigDiff">reduce</span>__', '__reduce<span class="TextSegSigDiff">_ex</span>__',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; '__<span class="TextSegSigDiff">len__',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'__lt</span>__', '__<span class="TextSegSigDiff">mul</span>__', '__ne__', '__<span class="TextSegSigDiff">new</span>__', '__reduce__',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; '__re<span class="TextSegSigDiff">pr</span>__', '__re<span class="TextSegSigDiff">versed</span>__', '__r<span class="TextSegSigDiff">mul__',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'__</span>se<span class="TextSegSigDiff">tattr</span>__', '__<span class="TextSegSigDiff">setitem</span>__',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; '__re<span class="TextSegSigDiff">duce_ex</span>__', '__re<span class="TextSegSigDiff">p</span><span class="TextSegSigDiff">r</span>__', '__r<span class="TextSegSigDiff">ever</span>se<span class="TextSegSigDiff">d</span>__', '__<span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">mul</span>__',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; '__s<span class="TextSegSigDiff">izeof</span>__', '__s<span class="TextSegSigDiff">tr</span>__', '__<span class="TextSegSigDiff">subclasshook</span>__', '<span class="TextSegSigDiff">app</span><span class="TextSegSigDiff">end</span>', '<span class="TextSegSigDiff">clear</span>',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; '__s<span class="TextSegSigDiff">etattr</span>__', '__s<span class="TextSegSigDiff">etitem</span>__', '__<span class="TextSegSigDiff">setslice</span>__', '<span class="TextSegSigDiff">__sizeof__</span>', '<span class="TextSegSigDiff">__str__</span>',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; '<span class="TextSegSigDiff">c</span><span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">py</span>', 'count', 'extend', 'index', 'insert<span class="TextSegSigDiff">',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'pop',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'remove</span>',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; '<span class="TextSegSigDiff">__subclasshook__',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'append</span>', 'count', 'extend', 'index', 'insert',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; 'reverse', 'sort']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; '<span class="TextSegSigDiff">pop',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'remove',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'</span>reverse', 'sort']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">[d</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">d</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">dir(L)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'__'</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">d]</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">['append',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'clear',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'copy',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'count',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'extend',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'index',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'insert',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'pop',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'remove',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'reverse',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'sort']</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; help(L.append)</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; help(L.append)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Help on built-in function append:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Help on built-in function append:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &lt;BLANKLINE&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &lt;BLANKLINE&gt;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; append(...)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; append(...)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; L.append(object) -<span class="TextSegSigDiff">&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">None</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">-</span>- append object to end</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; L.append(object) -- append object to end</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &lt;BLANKLINE&gt;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &lt;BLANKLINE&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; L.append(1)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; L.append(1)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; L</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; L</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [1]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [1]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">With the interpreter, documentation is never far from the student as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">With the interpreter, documentation is never far from the student as</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegSigDiff">t</span>he<span class="TextSegSigDiff">y</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span> programming.</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">he<span class="TextSegSigDiff">'s</span> programming.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There are also good IDEs for Python.&nbsp; IDLE is a cross-platform IDE for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There are also good IDEs for Python.&nbsp; IDLE is a cross-platform IDE for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python that is written in Python using Tkinter.&nbsp; PythonWin is a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python that is written in Python using Tkinter.&nbsp; PythonWin is a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Windows-specific IDE. Emacs users will be happy to know that there is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Windows-specific IDE. Emacs users will be happy to know that there is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a very good Python mode for Emacs.&nbsp; All of these programming</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a very good Python mode for Emacs.&nbsp; All of these programming</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">environments provide syntax highlighting, auto-indenting, and access</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">environments provide syntax highlighting, auto-indenting, and access</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to the interactive interpreter while coding.&nbsp; Consult the Python wiki</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to the interactive interpreter while coding.&nbsp; Consult the Python wiki</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for a full list of Python editing environments.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for a full list of Python editing environments.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you want to discuss Python's use in education, you may be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you want to discuss Python's use in education, you may be</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">interested in joining the edu-sig mailing list.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interested in joining the edu-sig mailing list.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Upgrading</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">================</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">What</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bsddb185</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">my</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">application</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">keeps</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">complaining</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">about?</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">--------------------------------------------------------------------</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Starting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python2.3,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">distribution</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">includes</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">*PyBSDDB</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">package</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&lt;http://pybsddb.sf.net/&gt;*</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">replacement</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">old</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bsddb</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">module.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">It</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">includes</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">functions</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">which</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">provide</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">backward</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">compatibility</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">at</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">API</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">level,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">but</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">requires</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">newer</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">underlying</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Berkeley</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">DB</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">library.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Files</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">created</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">older</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bsddb</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can't</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">opened</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">directly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">new</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">old</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pair</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">scripts</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">which</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">part</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2.3</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(db2pickle.py</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pickle2db.py,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Tools/scripts</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">directory)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">convert</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">old</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">database</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">files</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">new</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">format.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">old</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">run</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">db2pickle.py</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">script</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">convert</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pickle,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">e.g.:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">python2.2</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&lt;pathto&gt;/db2pickley.py</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">database.db</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">database.pck</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Rename</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">database</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">mv</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">database.db</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">olddatabase.db</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Now</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">convert</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pickle</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">new</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">format</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">database:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&lt;pathto&gt;/pickle2db.py</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">database.db</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">database.pck</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">precise</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">commands</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">vary</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">depending</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">particulars</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">installation.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">For</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">full</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">details</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">about</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">operation</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">these</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">two</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">scripts</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">check</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">doc</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">string</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">at</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">start</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">each</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">one.</span></td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\faq\gui.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Graphic User Interface FAQ</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Graphic User Interface FAQ</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">**************************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">**************************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">General</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">GUI</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Questions</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">=====================</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">What platform-independent GUI toolkits exist for Python?</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">What platform-independent GUI toolkits exist for Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">========================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">========================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">Depending on what platform(s) you are aiming at, there are several.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Depending on what platform(s) you are aiming at, there are several.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Some</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">them</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">haven't</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">been</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ported</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">3</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">yet.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">At</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">least</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Tkinter</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Qt</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">known</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">3-compatible.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Tkinter</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Tkinter</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">Standard builds of Python include an object-oriented interface to the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Standard builds of Python include an object-oriented interface to the</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemInsigMod">Tcl/Tk widget set, called <span class="TextSegInsigDiff">t</span>kinter.&nbsp; This is probably the easiest to</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemInsigMod">Tcl/Tk widget set, called <span class="TextSegInsigDiff">T</span>kinter.&nbsp; This is probably the easiest to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">install</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(since</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">comes</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">included</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">most</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">binary</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">distributions</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Py</span><span class="TextSegSigDiff">thon)</span> and use. For more info about Tk, including pointers to the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">install</span> and use. For more info about Tk, including pointers to the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">source, see the Tcl/Tk home page<span class="TextSegSigDiff">.</span>&nbsp; <span class="TextSegSigDiff">T</span>cl<span class="TextSegSigDiff">/</span><span class="TextSegInsigDiff">T</span>k <span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fully</span> <span class="TextSegSigDiff">portable</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Mac</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">source, see the Tcl/Tk home page <span class="TextSegSigDiff">at</span> <span class="TextSegSigDiff">https://www.t</span>cl<span class="TextSegSigDiff">.</span><span class="TextSegInsigDiff">t</span>k<span class="TextSegSigDiff">.</span>&nbsp; <span class="TextSegSigDiff">Tc</span><span class="TextSegSigDiff">l/</span><span class="TextSegSigDiff">Tk</span> <span class="TextSegSigDiff">is</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">OS X, Windows, and Unix platforms.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">fully</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">portable</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Mac</span><span class="TextSegInsigDiff"> </span>OS X, Windows, and Unix platforms.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">wxWidgets</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">wxWidgets</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">wxWidgets (https://www.wxwidgets.org) is a free, portable GUI class</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">wxWidgets (https://www.wxwidgets.org) is a free, portable GUI class</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">library written in C++ that provides a native look and feel on a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">library written in C++ that provides a native look and feel on a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">number of platforms, with Windows, Mac OS X, GTK, X11, all listed as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">number of platforms, with Windows, Mac OS X, GTK, X11, all listed as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">current stable targets.&nbsp; Language bindings are available for a number</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">current stable targets.&nbsp; Language bindings are available for a number</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of languages including Python, Perl, Ruby, etc.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of languages including Python, Perl, Ruby, etc.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">wxPython (http://www.wxpython.org) is the Python binding for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">wxPython (http://www.wxpython.org) is the Python binding for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">wxwidgets.&nbsp; While it often lags slightly behind the official wxWidgets</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">wxwidgets.&nbsp; While it often lags slightly behind the official wxWidgets</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">releases, it also offers a number of features via pure Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">releases, it also offers a number of features via pure Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">extensions that are not available in other language bindings.&nbsp; There</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">extensions that are not available in other language bindings.&nbsp; There</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is an active wxPython user and developer community.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is an active wxPython user and developer community.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Both wxWidgets and wxPython are free, open source, software with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Both wxWidgets and wxPython are free, open source, software with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">permissive licences that allow their use in commercial products as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">permissive licences that allow their use in commercial products as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">well as in freeware or shareware.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">well as in freeware or shareware.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Qt</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Qt</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There are bindings available for the Qt toolkit (using either PyQt or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There are bindings available for the Qt toolkit (using either PyQt or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">PySide) and for KDE (PyKDE4). PyQt is currently more mature than</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">PySide) and for KDE (PyKDE4). PyQt is currently more mature than</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">PySide, but you must buy a PyQt license from Riverbank Computing if</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">PySide, but you must buy a PyQt license from Riverbank Computing if</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you want to write proprietary applications.&nbsp; PySide is free for all</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you want to write proprietary applications.&nbsp; PySide is free for all</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">applications.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">applications.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Qt 4.5 upwards is licensed under the LGPL license; also, commercial</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Qt 4.5 upwards is licensed under the LGPL license; also, commercial</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">licenses are available from The Qt Company.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">licenses are available from The Qt Company.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Gtk+</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Gtk+</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">GObject</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">introspection</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bindings</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">allow</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">write</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">GTK+</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">3</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">applications.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">There</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">also</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">GTK+</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">3</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Tutorial.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">older</span><span class="TextSegInsigDiff"> </span>PyGtk bindings for the Gtk+ <span class="TextSegSigDiff">2</span><span class="TextSegInsigDiff"> </span>toolkit have been implemented</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">PyGtk bindings for the Gtk+ toolkit have been implemented<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">by</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">James</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">by</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">James</span><span class="TextSegInsigDiff"> </span>Henstridge; see &lt;http://www.pygtk.org&gt;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">Henstridge; see &lt;http://www.pygtk.org&gt;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Kivy</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">----</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Kivy</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">cross-platform</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">GUI</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">library</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">supporting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">both</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">desktop</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">operating</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">systems</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(Windows,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">macOS,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Linux)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">mobile</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">devices</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(Android,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">iOS).</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">It</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">written</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Cython,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">range</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">windowing</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">backends.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Kivy</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">free</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">open</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">source</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">software</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">distributed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">under</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">MIT</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">license.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">FLTK</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">FLTK</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python bindings for the FLTK toolkit, a simple yet powerful and mature</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python bindings for the FLTK toolkit, a simple yet powerful and mature</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">cross-platform windowing system, are available from the PyFLTK</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">cross-platform windowing system, are available from the PyFLTK</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">project.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">project.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">OpenGL</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">OpenGL</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For OpenGL bindings, see PyOpenGL.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For OpenGL bindings, see PyOpenGL.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What platform-specific GUI toolkits exist for Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What platform-specific GUI toolkits exist for Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=====================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=====================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">By installing the PyObjc Objective-C bridge, Python programs can use</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">By installing the PyObjc Objective-C bridge, Python programs can use</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Mac OS X's Cocoa libraries.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Mac OS X's Cocoa libraries.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Pythonwin by Mark Hammond includes an interface to the Microsoft</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Pythonwin by Mark Hammond includes an interface to the Microsoft</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Foundation Classes and a Python programming environment that's written</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Foundation Classes and a Python programming environment that's written</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">mostly in Python using the MFC classes.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">mostly in Python using the MFC classes.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Tkinter questions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Tkinter questions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I freeze Tkinter applications?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I freeze Tkinter applications?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Freeze is a tool to create stand-alone applications.&nbsp; When freezing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Freeze is a tool to create stand-alone applications.&nbsp; When freezing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Tkinter applications, the applications will not be truly stand-alone,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Tkinter applications, the applications will not be truly stand-alone,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">as the application will still need the Tcl and Tk libraries.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">as the application will still need the Tcl and Tk libraries.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">One solution is to ship the application with the Tcl and Tk libraries,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">One solution is to ship the application with the Tcl and Tk libraries,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and point to them at run-time using the &quot;TCL_LIBRARY&quot; and &quot;TK_LIBRARY&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and point to them at run-time using the &quot;TCL_LIBRARY&quot; and &quot;TK_LIBRARY&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">environment variables.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">environment variables.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To get truly stand-alone applications, the Tcl scripts that form the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To get truly stand-alone applications, the Tcl scripts that form the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">library have to be integrated into the application as well. One tool</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">library have to be integrated into the application as well. One tool</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">supporting that is SAM (stand-alone modules), which is part of the Tix</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">supporting that is SAM (stand-alone modules), which is part of the Tix</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">distribution (http://tix.sourceforge.net/).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">distribution (http://tix.sourceforge.net/).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Build Tix with SAM enabled, perform the appropriate call to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Build Tix with SAM enabled, perform the appropriate call to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;Tclsam_init()&quot;, etc. inside Python's &quot;Modules/tkappinit.c&quot;, and link</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;Tclsam_init()&quot;, etc. inside Python's &quot;Modules/tkappinit.c&quot;, and link</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">with libtclsam and libtksam (you might include the Tix libraries as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">with libtclsam and libtksam (you might include the Tix libraries as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">well).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">well).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Can I have Tk events handled while waiting for I/O?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Can I have Tk events handled while waiting for I/O?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">On platforms other than Windows, yes, and you don't even need threads!</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">On platforms other than Windows, yes, and you don't even need threads!</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">But you'll have to restructure your I/O code a bit.&nbsp; Tk has the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">But you'll have to restructure your I/O code a bit.&nbsp; Tk has the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">equivalent of Xt's &quot;XtAddInput()&quot; call, which allows you to register a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">equivalent of Xt's &quot;XtAddInput()&quot; call, which allows you to register a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">callback function which will be called from the Tk mainloop when I/O</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">callback function which will be called from the Tk mainloop when I/O</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is possible on a file descriptor.&nbsp; See File Handlers.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is possible on a file descriptor.&nbsp; See File Handlers.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">I can't get key bindings to work in Tkinter: why?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">I can't get key bindings to work in Tkinter: why?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">An often-heard complaint is that event handlers bound to events with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">An often-heard complaint is that event handlers bound to events with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the &quot;bind()&quot; method don't get handled even when the appropriate key is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the &quot;bind()&quot; method don't get handled even when the appropriate key is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">pressed.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">pressed.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The most common cause is that the widget to which the binding applies</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The most common cause is that the widget to which the binding applies</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">doesn't have &quot;keyboard focus&quot;.&nbsp; Check out the Tk documentation for the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">doesn't have &quot;keyboard focus&quot;.&nbsp; Check out the Tk documentation for the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">focus command. Usually a widget is given the keyboard focus by</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">focus command. Usually a widget is given the keyboard focus by</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">clicking in it (but not for labels; see the takefocus option).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">clicking in it (but not for labels; see the takefocus option).</td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\faq\installed.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;Why is Python Installed on my Computer?&quot; FAQ</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;Why is Python Installed on my Computer?&quot; FAQ</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*********************************************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*********************************************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What is Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What is Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===============</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===============</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python is a programming language.&nbsp; It's used for many different</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python is a programming language.&nbsp; It's used for many different</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">applications. It's used in some high schools and colleges as an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">applications. It's used in some high schools and colleges as an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">introductory programming language because Python is easy to learn, but</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">introductory programming language because Python is easy to learn, but</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">it's also used by professional software developers at places such as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">it's also used by professional software developers at places such as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Google, NASA, and Lucasfilm Ltd.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Google, NASA, and Lucasfilm Ltd.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you wish to learn more about Python, start with the Beginner's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you wish to learn more about Python, start with the Beginner's</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Guide to Python.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Guide to Python.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why is Python installed on my machine?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why is Python installed on my machine?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">======================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">======================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you find Python installed on your system but don't remember</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you find Python installed on your system but don't remember</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">installing it, there are several possible ways it could have gotten</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">installing it, there are several possible ways it could have gotten</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">there.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">there.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Perhaps another user on the computer wanted to learn programming</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Perhaps another user on the computer wanted to learn programming</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; and installed it; you'll have to figure out who's been using the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; and installed it; you'll have to figure out who's been using the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; machine and might have installed it.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; machine and might have installed it.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">* A third-party application installed on the machine might have been</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* A third-party application installed on the machine might have been</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp; written in Python and included a Python installation.&nbsp; <span class="TextSegSigDiff">There</span> a<span class="TextSegSigDiff">r</span>e</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp; written in Python and included a Python installation.&nbsp; <span class="TextSegSigDiff">Fo</span><span class="TextSegSigDiff">r</span> a<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">hom</span>e</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">many</span> such application<span class="TextSegSigDiff">s,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">GU</span><span class="TextSegInsigDiff">I</span> <span class="TextSegInsigDiff">p</span><span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">ogr</span><span class="TextSegSigDiff">am</span>s<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">t</span>o<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">network</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">servers</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">computer,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">most</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">common</span> such application <span class="TextSegInsigDiff">i</span><span class="TextSegSigDiff">s</span> <span class="TextSegInsigDiff">P</span><span class="TextSegSigDiff">ySol,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span>so<span class="TextSegSigDiff">li</span><span class="TextSegSigDiff">tair</span><span class="TextSegSigDiff">e</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp; a<span class="TextSegSigDiff">d</span>min<span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">st</span><span class="TextSegSigDiff">rat</span><span class="TextSegSigDiff">iv</span><span class="TextSegSigDiff">e</span> s<span class="TextSegSigDiff">c</span>ri<span class="TextSegSigDiff">pt</span>s.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">g</span>am<span class="TextSegSigDiff">e</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span>in<span class="TextSegSigDiff">cludes</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">over</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">1000</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">different</span> <span class="TextSegSigDiff">game</span>s<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">va</span>ri<span class="TextSegSigDiff">ation</span>s.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Some Windows machines also have Python installed.&nbsp; At this writing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Some Windows machines also have Python installed.&nbsp; At this writing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; we're aware of computers from Hewlett-Packard and Compaq that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; we're aware of computers from Hewlett-Packard and Compaq that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; include Python.&nbsp; Apparently some of HP/Compaq's administrative tools</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; include Python.&nbsp; Apparently some of HP/Compaq's administrative tools</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; are written in Python.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; are written in Python.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">* <span class="TextSegSigDiff">M</span><span class="TextSegSigDiff">any</span> <span class="TextSegSigDiff">Unix-</span>comp<span class="TextSegSigDiff">atible</span> <span class="TextSegSigDiff">operat</span>ing <span class="TextSegSigDiff">systems,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">such</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">M</span>ac OS X <span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">d</span> s<span class="TextSegSigDiff">ome</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">* <span class="TextSegSigDiff">All</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Apple</span> comp<span class="TextSegSigDiff">ut</span><span class="TextSegSigDiff">ers</span> <span class="TextSegSigDiff">runn</span>ing <span class="TextSegSigDiff">M</span>ac OS X <span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">installed;</span> <span class="TextSegSigDiff">it'</span>s</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Linux</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">distributions,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">installed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">by</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">default;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it's</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">included</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp; in the base installation.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; in<span class="TextSegSigDiff">cluded</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span> the base installation.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Can I delete Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Can I delete Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">====================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">====================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">That depends on where Python came from.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">That depends on where Python came from.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If someone installed it deliberately, you can remove it without</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If someone installed it deliberately, you can remove it without</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">hurting anything.&nbsp; On Windows, use the Add/Remove Programs icon in the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">hurting anything.&nbsp; On Windows, use the Add/Remove Programs icon in the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Control Panel.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Control Panel.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If Python was installed by a third-party application, you can also</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If Python was installed by a third-party application, you can also</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">remove it, but that application will no longer work.&nbsp; You should use</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">remove it, but that application will no longer work.&nbsp; You should use</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that application's uninstaller rather than removing Python directly.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that application's uninstaller rather than removing Python directly.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If Python came with your operating system, removing it is not</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If Python came with your operating system, removing it is not</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">recommended.&nbsp; If you remove it, whatever tools were written in Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">recommended.&nbsp; If you remove it, whatever tools were written in Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">will no longer run, and some of them might be important to you.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">will no longer run, and some of them might be important to you.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Reinstalling the whole system would then be required to fix things</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Reinstalling the whole system would then be required to fix things</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">again.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">again.</td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\faq\library.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Library and Extension FAQ</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Library and Extension FAQ</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*************************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*************************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">General Library Questions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">General Library Questions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=========================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=========================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I find a module or application to perform task X?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I find a module or application to perform task X?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Check the Library Reference to see if there's a relevant standard</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Check the Library Reference to see if there's a relevant standard</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">library module.&nbsp; (Eventually you'll learn what's in the standard</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">library module.&nbsp; (Eventually you'll learn what's in the standard</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">library and will be able to skip this step.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">library and will be able to skip this step.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For third-party packages, search the Python Package Index or try</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For third-party packages, search the Python Package Index or try</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Google or another Web search engine.&nbsp; Searching for &quot;Python&quot; plus a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Google or another Web search engine.&nbsp; Searching for &quot;Python&quot; plus a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">keyword or two for your topic of interest will usually find something</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">keyword or two for your topic of interest will usually find something</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">helpful.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">helpful.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Where is the math.py (socket.py, regex.py, etc.) source file?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Where is the math.py (socket.py, regex.py, etc.) source file?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you can't find a source file for a module it may be a built-in or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you can't find a source file for a module it may be a built-in or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">dynamically loaded module implemented in C, C++ or other compiled</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">dynamically loaded module implemented in C, C++ or other compiled</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">language. In this case you may not have the source file or it may be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">language. In this case you may not have the source file or it may be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">something like &quot;mathmodule.c&quot;, somewhere in a C source directory (not</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">something like &quot;mathmodule.c&quot;, somewhere in a C source directory (not</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">on the Python Path).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">on the Python Path).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There are (at least) three kinds of modules in Python:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There are (at least) three kinds of modules in Python:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">1. modules written in Python (.py);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">1. modules written in Python (.py);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">2. modules written in C and dynamically loaded (.dll, .pyd, .so,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">2. modules written in C and dynamically loaded (.dll, .pyd, .so,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; .sl, etc);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; .sl, etc);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">3. modules written in C and linked with the interpreter; to get a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">3. modules written in C and linked with the interpreter; to get a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; list of these, type:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; list of these, type:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; import sys</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; import sys</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>sys.builtin_module_names<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp;&nbsp; print<span class="TextSegInsigDiff"> </span>sys.builtin_module_names</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I make a Python script executable on Unix?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I make a Python script executable on Unix?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You need to do two things: the script file's mode must be executable</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You need to do two things: the script file's mode must be executable</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and the first line must begin with &quot;#!&quot; followed by the path of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and the first line must begin with &quot;#!&quot; followed by the path of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python interpreter.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python interpreter.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The first is done by executing &quot;chmod +x scriptfile&quot; or perhaps &quot;chmod</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The first is done by executing &quot;chmod +x scriptfile&quot; or perhaps &quot;chmod</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">755 scriptfile&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">755 scriptfile&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The second can be done in a number of ways.&nbsp; The most straightforward</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The second can be done in a number of ways.&nbsp; The most straightforward</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">way is to write</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">way is to write</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #!/usr/local/bin/python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #!/usr/local/bin/python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">as the very first line of your file, using the pathname for where the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">as the very first line of your file, using the pathname for where the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python interpreter is installed on your platform.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python interpreter is installed on your platform.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you would like the script to be independent of where the Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you would like the script to be independent of where the Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">interpreter lives, you can use the **env** program.&nbsp; Almost all Unix</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interpreter lives, you can use the **env** program.&nbsp; Almost all Unix</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">variants support the following, assuming the Python interpreter is in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">variants support the following, assuming the Python interpreter is in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a directory on the user's &quot;PATH&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a directory on the user's &quot;PATH&quot;:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #!/usr/bin/env python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #!/usr/bin/env python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*Don't* do this for CGI scripts.&nbsp; The &quot;PATH&quot; variable for CGI scripts</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*Don't* do this for CGI scripts.&nbsp; The &quot;PATH&quot; variable for CGI scripts</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is often very minimal, so you need to use the actual absolute pathname</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is often very minimal, so you need to use the actual absolute pathname</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of the interpreter.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of the interpreter.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Occasionally, a user's environment is so full that the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Occasionally, a user's environment is so full that the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">**/usr/bin/env** program fails; or there's no env program at all.&nbsp; In</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">**/usr/bin/env** program fails; or there's no env program at all.&nbsp; In</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that case, you can try the following hack (due to Alex Rezinsky):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that case, you can try the following hack (due to Alex Rezinsky):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #! /bin/sh</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #! /bin/sh</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &quot;&quot;&quot;:&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &quot;&quot;&quot;:&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; exec python $0 ${1+&quot;$@&quot;}</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; exec python $0 ${1+&quot;$@&quot;}</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &quot;&quot;&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &quot;&quot;&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The minor disadvantage is that this defines the script's __doc__</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The minor disadvantage is that this defines the script's __doc__</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">string. However, you can fix that by adding</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">string. However, you can fix that by adding</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; __doc__ = &quot;&quot;&quot;...Whatever...&quot;&quot;&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; __doc__ = &quot;&quot;&quot;...Whatever...&quot;&quot;&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Is there a curses/termcap package for Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Is there a curses/termcap package for Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------------------------------</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">For Unix variants<span class="TextSegSigDiff">:</span> <span class="TextSegInsigDiff">T</span>he standard Python source distribution comes with</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">For Unix variants <span class="TextSegInsigDiff">t</span>he standard Python source distribution comes with<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span>curses module in the Modules subdirectory, though it's not compiled</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">curses module in the Modules subdirectory, though it's not compiled<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">by</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">by</span><span class="TextSegInsigDiff"> </span>default. (Note that this is not available in the Windows</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">default. (Note that this is not available in the Window<span class="TextSegSigDiff">s</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">di</span>s<span class="TextSegSigDiff">tribution</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">distribution</span><span class="TextSegInsigDiff"> </span>-- there is no curses module for Windows.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">-- there is no curses module for Windows.)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;curses&quot; module supports basic curses features as well as many</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;curses&quot; module supports basic curses features as well as many</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">additional functions from ncurses and SYSV curses such as colour,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">additional functions from ncurses and SYSV curses such as colour,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">alternative character set support, pads, and mouse support. This means</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">alternative character set support, pads, and mouse support. This means</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the module isn't compatible with operating systems that only have BSD</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the module isn't compatible with operating systems that only have BSD</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">curses, but there don't seem to be any currently maintained OSes that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">curses, but there don't seem to be any currently maintained OSes that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">fall into this category.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">fall into this category.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For Windows: use the consolelib module.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For Windows: use the consolelib module.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Is there an equivalent to C's onexit() in Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Is there an equivalent to C's onexit() in Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;atexit&quot; module provides a register function that is similar to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;atexit&quot; module provides a register function that is similar to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">C's &quot;onexit()&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">C's &quot;onexit()&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why don't my signal handlers work?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why don't my signal handlers work?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The most common problem is that the signal handler is declared with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The most common problem is that the signal handler is declared with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the wrong argument list.&nbsp; It is called as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the wrong argument list.&nbsp; It is called as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; handler(signum, frame)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; handler(signum, frame)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">so it should be declared with two arguments:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">so it should be declared with two arguments:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def handler(signum, frame):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def handler(signum, frame):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Common tasks</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Common tasks</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">============</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">============</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I test a Python program or component?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I test a Python program or component?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python comes with two testing frameworks.&nbsp; The &quot;doctest&quot; module finds</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python comes with two testing frameworks.&nbsp; The &quot;doctest&quot; module finds</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">examples in the docstrings for a module and runs them, comparing the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">examples in the docstrings for a module and runs them, comparing the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">output with the expected output given in the docstring.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">output with the expected output given in the docstring.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;unittest&quot; module is a fancier testing framework modelled on Java</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;unittest&quot; module is a fancier testing framework modelled on Java</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and Smalltalk testing frameworks.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and Smalltalk testing frameworks.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To make testing easier, you should use good modular design in your</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To make testing easier, you should use good modular design in your</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">program. Your program should have almost all functionality</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">program. Your program should have almost all functionality</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">encapsulated in either functions or class methods -- and this</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">encapsulated in either functions or class methods -- and this</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">sometimes has the surprising and delightful effect of making the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">sometimes has the surprising and delightful effect of making the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">program run faster (because local variable accesses are faster than</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">program run faster (because local variable accesses are faster than</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">global accesses).&nbsp; Furthermore the program should avoid depending on</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">global accesses).&nbsp; Furthermore the program should avoid depending on</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">mutating global variables, since this makes testing much more</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">mutating global variables, since this makes testing much more</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">difficult to do.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">difficult to do.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;global main logic&quot; of your program may be as simple as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;global main logic&quot; of your program may be as simple as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; if __name__ == &quot;__main__&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; if __name__ == &quot;__main__&quot;:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; main_logic()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; main_logic()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">at the bottom of the main module of your program.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">at the bottom of the main module of your program.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Once your program is organized as a tractable collection of functions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Once your program is organized as a tractable collection of functions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and class behaviours you should write test functions that exercise the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and class behaviours you should write test functions that exercise the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">behaviours.&nbsp; A test suite that automates a sequence of tests can be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">behaviours.&nbsp; A test suite that automates a sequence of tests can be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">associated with each module. This sounds like a lot of work, but since</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">associated with each module. This sounds like a lot of work, but since</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python is so terse and flexible it's surprisingly easy.&nbsp; You can make</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python is so terse and flexible it's surprisingly easy.&nbsp; You can make</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">coding much more pleasant and fun by writing your test functions in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">coding much more pleasant and fun by writing your test functions in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">parallel with the &quot;production code&quot;, since this makes it easy to find</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">parallel with the &quot;production code&quot;, since this makes it easy to find</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">bugs and even design flaws earlier.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">bugs and even design flaws earlier.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;Support modules&quot; that are not intended to be the main module of a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;Support modules&quot; that are not intended to be the main module of a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">program may include a self-test of the module.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">program may include a self-test of the module.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; if __name__ == &quot;__main__&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; if __name__ == &quot;__main__&quot;:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; self_test()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; self_test()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Even programs that interact with complex external interfaces may be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Even programs that interact with complex external interfaces may be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">tested when the external interfaces are unavailable by using &quot;fake&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">tested when the external interfaces are unavailable by using &quot;fake&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">interfaces implemented in Python.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interfaces implemented in Python.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I create documentation from doc strings?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I create documentation from doc strings?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;pydoc&quot; module can create HTML from the doc strings in your Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;pydoc&quot; module can create HTML from the doc strings in your Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">source code.&nbsp; An alternative for creating API documentation purely</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">source code.&nbsp; An alternative for creating API documentation purely</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">from docstrings is epydoc.&nbsp; Sphinx can also include docstring content.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">from docstrings is epydoc.&nbsp; Sphinx can also include docstring content.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I get a single keypress at a time?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I get a single keypress at a time?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For Unix variants there are several solutions.&nbsp; It's straightforward</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For Unix variants there are several solutions.&nbsp; It's straightforward</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">to do this using curses, but curses is a fairly large module to learn.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to do this using curses, but curses is a fairly large module to learn.</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Here's</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">solution</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">without</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">curses:</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">import</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">termios,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fcntl,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sys,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">os</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">fd</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sys.stdin.fileno()</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">oldterm</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">termios.tcgetattr(fd)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">newattr</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">termios.tcgetattr(fd)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">newattr[3]</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">newattr[3]</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&amp;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">~termios.ICANON</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&amp;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">~termios.ECHO</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">termios.tcsetattr(fd,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">termios.TCSANOW,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">newattr)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">oldflags</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fcntl.fcntl(fd,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fcntl.F_GETFL)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">fcntl.fcntl(fd,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fcntl.F_SETFL,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">oldflags</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">|</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">os.O_NONBLOCK)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">try:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">while</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">1:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">try:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">c</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sys.stdin.read(1)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">print</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;Got</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">character&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">repr(c)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">except</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">IOError:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pass</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">finally:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">termios.tcsetattr(fd,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">termios.TCSAFLUSH,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">oldterm)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">fcntl.fcntl(fd,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fcntl.F_SETFL,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">oldflags)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">You</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">need</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;termios&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;fcntl&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">any</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">work,</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">I've</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">only</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tried</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Linux,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">though</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">should</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">work</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">elsewhere.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">In</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">characters</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">read</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">printed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">one</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">at</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">time.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;termios.tcsetattr()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">turns</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">off</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">stdin's</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">echoing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">disables</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">canonical</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">mode.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;fcntl.fnctl()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">used</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">obtain</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">stdin's</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">descriptor</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">flags</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">modify</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">them</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">non-blocking</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">mode.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Since</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">reading</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">stdin</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">when</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">empty</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">results</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;IOError&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">error</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">caught</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ignored.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">Threads</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">Threads</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=======</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=======</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I program using threads?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I program using threads?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">Be sure to use the &quot;threading&quot; module and not the &quot;<span class="TextSegSigDiff">_</span>thread&quot; module.</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Be sure to use the &quot;threading&quot; module and not the &quot;thread&quot; module.<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">The</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span>&quot;threading&quot; module builds convenient abstractions on top of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&quot;threading&quot; module builds convenient abstractions on top of the<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">low-</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">l<span class="TextSegSigDiff">ow-l</span>evel primitives provided by the &quot;<span class="TextSegSigDiff">_</span>thread&quot; module.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">level primitives provided by the &quot;thread&quot; module.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Aahz has a set of slides from his threading tutorial that are helpful;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Aahz has a set of slides from his threading tutorial that are helpful;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">see http://www.pythoncraft.com/OSCON2001/.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">see http://www.pythoncraft.com/OSCON2001/.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">None of my threads seem to run: why?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">None of my threads seem to run: why?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">As soon as the main thread exits, all threads are killed.&nbsp; Your main</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">As soon as the main thread exits, all threads are killed.&nbsp; Your main</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">thread is running too quickly, giving the threads no time to do any</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">thread is running too quickly, giving the threads no time to do any</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">work.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">work.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A simple fix is to add a sleep to the end of the program that's long</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A simple fix is to add a sleep to the end of the program that's long</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">enough for all the threads to finish:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">enough for all the threads to finish:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; import threading, time</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import threading, time</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; def thread_task(name, n):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def thread_task(name, n):</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; for i in range(n):</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; for i in range(n):<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">print</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">name,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">i</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">print(name,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">i)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; for i in range(10):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; for i in range(10):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; T = threading.Thread(target=thread_task, args=(str(i), i))</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; T = threading.Thread(target=thread_task, args=(str(i), i))</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; T.start()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; T.start()</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; time.sleep(10)&nbsp;<span class="TextSegInsigDiff"> </span># &lt;---------------------------!</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; time.sleep(10) # &lt;---------------------------<span class="TextSegSigDiff">-</span>!</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">But now (on many platforms) the threads don't run in parallel, but</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">But now (on many platforms) the threads don't run in parallel, but</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">appear to run sequentially, one at a time!&nbsp; The reason is that the OS</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">appear to run sequentially, one at a time!&nbsp; The reason is that the OS</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">thread scheduler doesn't start a new thread until the previous thread</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">thread scheduler doesn't start a new thread until the previous thread</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is blocked.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is blocked.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A simple fix is to add a tiny sleep to the start of the run function:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A simple fix is to add a tiny sleep to the start of the run function:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; def thread_task(name, n):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def thread_task(name, n):</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; time.sleep(0.001)&nbsp;<span class="TextSegInsigDiff"> </span># &lt;--------------------!</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; time.sleep(0.001) # &lt;--------------------<span class="TextSegSigDiff">-</span>!</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; for i in range(n):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; for i in range(n):<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">print</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">name,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">i</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">print(name,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">i)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; for i in range(10):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; for i in range(10):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; T = threading.Thread(target=thread_task, args=(str(i), i))</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; T = threading.Thread(target=thread_task, args=(str(i), i))</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; T.start()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; T.start()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; time.sleep(10)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; time.sleep(10)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Instead of trying to guess a good delay value for &quot;time.sleep()&quot;, it's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Instead of trying to guess a good delay value for &quot;time.sleep()&quot;, it's</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">better to use some kind of semaphore mechanism.&nbsp; One idea is to use</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">better to use some kind of semaphore mechanism.&nbsp; One idea is to use</td>
</tr>
<tr class="SectionAll">
<td class="TextItemInsigMod">the &quot;<span class="TextSegInsigDiff">q</span>ueue&quot; module to create a queue object, let each thread append a</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemInsigMod">the &quot;<span class="TextSegInsigDiff">Q</span>ueue&quot; module to create a queue object, let each thread append a</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">token to the queue when it finishes, and let the main thread read as</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">token to the queue when it finishes, and let the main thread read as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">many tokens from the queue as there are threads.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">many tokens from the queue as there are threads.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I parcel out work among a bunch of worker threads?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I parcel out work among a bunch of worker threads?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------------------------------------------</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">easiest</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">way</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">new</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;concurrent.futures&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module,</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">especially</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;ThreadPoolExecutor&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">class.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Or,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">want</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fine</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">control</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">over</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">dispatching</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">algorithm,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">write</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">own</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">logic</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">manually.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">U</span>se the &quot;<span class="TextSegInsigDiff">q</span>ueue&quot; module to create a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">U</span>se the &quot;<span class="TextSegInsigDiff">Q</span>ueue&quot; module to create a<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">queue</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">containing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">list</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">jobs.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">q</span>ueue c<span class="TextSegSigDiff">o</span>ntain<span class="TextSegSigDiff">ing</span> a list of <span class="TextSegSigDiff">j</span>ob<span class="TextSegSigDiff">s.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Th</span>e<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;Queue&quot;</span><span class="TextSegInsigDiff"> </span>c<span class="TextSegSigDiff">lass</span> <span class="TextSegSigDiff">maint</span><span class="TextSegSigDiff">ain</span>s a <span class="TextSegSigDiff">lis</span>t</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;</span><span class="TextSegInsigDiff">Q</span>ueue<span class="TextSegSigDiff">&quot;</span> c<span class="TextSegSigDiff">lass</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">mai</span>ntain<span class="TextSegSigDiff">s</span> a list of ob<span class="TextSegSigDiff">j</span>ec<span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">nd</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ha</span>s a <span class="TextSegSigDiff">&quot;.pu</span>t<span class="TextSegSigDiff">(obj)&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">objects</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">has</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;.put(obj)&quot;</span><span class="TextSegInsigDiff"> </span>method that adds items to the queue</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">method that adds items to the queue<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;.get()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">method</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">return</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;.get()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">me</span>th<span class="TextSegSigDiff">od</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">return</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">th</span>em.<span class="TextSegInsigDiff">&nbsp;</span> The class will take care of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">them. The class will take care of the<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">locking</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">necessary</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ensure</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">locking</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">necessary</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ensure</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span>each job is handed out exactly once.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">each job is handed out exactly once.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Here's a trivial example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Here's a trivial example:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemInsigMod">&nbsp;&nbsp; import threading, <span class="TextSegInsigDiff">q</span>ueue, time</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemInsigMod">&nbsp;&nbsp; import threading, <span class="TextSegInsigDiff">Q</span>ueue, time</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; # The worker thread gets jobs off the queue.&nbsp; When the queue is empty, it</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # The worker thread gets jobs off the queue.&nbsp; When the queue is empty, it</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; # assumes there will be no more work and exits.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # assumes there will be no more work and exits.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; # (Realistically workers will run until terminated.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # (Realistically workers will run until terminated.)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; def worker():</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def worker():</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>'Running worker'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegInsigDiff"> </span>'Running worker'</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; time.sleep(0.1)</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; time.sleep(0.1)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; while True:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; while True:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; try:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; arg = q.get(block=False)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; arg = q.get(block=False)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemInsigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; except <span class="TextSegInsigDiff">q</span>ueue.Empty:</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemInsigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; except <span class="TextSegInsigDiff">Q</span>ueue.Empty:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>'Worker', threading.currentThread(),<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">end='</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">')</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegInsigDiff"> </span>'Worker', threading.currentThread(),</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>'queue empty'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegInsigDiff"> </span>'queue empty'</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>'Worker', threading.currentThread(),<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">end='</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">')</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegInsigDiff"> </span>'Worker', threading.currentThread(),</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>'running with argument', arg<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegInsigDiff"> </span>'running with argument', arg</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; time.sleep(0.5)</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; time.sleep(0.5)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; # Create queue</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # Create queue</td>
</tr>
<tr class="SectionAll">
<td class="TextItemInsigMod">&nbsp;&nbsp; q = <span class="TextSegInsigDiff">q</span>ueue.Queue()</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemInsigMod">&nbsp;&nbsp; q = <span class="TextSegInsigDiff">Q</span>ueue.Queue()</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; # Start a pool of 5 workers</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # Start a pool of 5 workers</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; for i in range(5):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; for i in range(5):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; t = threading.Thread(target=worker, name='worker %i' % (i+1))</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; t = threading.Thread(target=worker, name='worker %i' % (i+1))</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; t.start()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; t.start()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; # Begin adding work to the queue</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # Begin adding work to the queue</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; for i in range(50):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; for i in range(50):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; q.put(i)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; q.put(i)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; # Give threads time to run</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # Give threads time to run</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>'Main thread sleeping'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; print<span class="TextSegInsigDiff"> </span>'Main thread sleeping'</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; time.sleep(5)</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; time.sleep(5)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When run, this will produce the following output:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When run, this will produce the following output:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Running worker</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Running worker</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Running worker</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Running worker</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Running worker</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Running worker</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Running worker</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Running worker</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Running worker</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Running worker</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; Main thread sleeping</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Main thread sleeping</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; Worker &lt;Thread(worker 1, started<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">130283832797456</span>)&gt; running with argument 0</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; Worker &lt;Thread(worker 1, started)&gt; running with argument 0</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; Worker &lt;Thread(worker 2, started<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">130283824404752</span>)&gt; running with argument 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; Worker &lt;Thread(worker 2, started)&gt; running with argument 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; Worker &lt;Thread(worker 3, started<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">130283816012048</span>)&gt; running with argument 2</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; Worker &lt;Thread(worker 3, started)&gt; running with argument 2</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; Worker &lt;Thread(worker 4, started<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">130283807619344</span>)&gt; running with argument 3</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; Worker &lt;Thread(worker 4, started)&gt; running with argument 3</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; Worker &lt;Thread(worker 5, started<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">130283799226640</span>)&gt; running with argument 4</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; Worker &lt;Thread(worker 5, started)&gt; running with argument 4</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; Worker &lt;Thread(worker 1, started<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">130283832797456</span>)&gt; running with argument 5</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; Worker &lt;Thread(worker 1, started)&gt; running with argument 5</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Consult the module's documentation for more details; the &quot;Queue&quot; class</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Consult the module's documentation for more details; the &quot;Queue&quot; class</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">provides a featureful interface.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">provides a featureful interface.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What kinds of global value mutation are thread-safe?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What kinds of global value mutation are thread-safe?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A *global interpreter lock* (GIL) is used internally to ensure that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A *global interpreter lock* (GIL) is used internally to ensure that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">only one thread runs in the Python VM at a time.&nbsp; In general, Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">only one thread runs in the Python VM at a time.&nbsp; In general, Python</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">offers to switch among threads only between bytecode instructions; how</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">offers to switch among threads only between bytecode instructions; how</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">frequently it switches can be set via &quot;sys.set<span class="TextSegSigDiff">swit</span>chinterval()&quot;.&nbsp; Each</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">frequently it switches can be set via &quot;sys.setch<span class="TextSegSigDiff">eck</span>interval()&quot;.&nbsp; Each</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">bytecode instruction and therefore all the C implementation code</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">bytecode instruction and therefore all the C implementation code</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">reached from each instruction is therefore atomic from the point of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">reached from each instruction is therefore atomic from the point of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">view of a Python program.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">view of a Python program.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In theory, this means an exact accounting requires an exact</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In theory, this means an exact accounting requires an exact</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">understanding of the PVM bytecode implementation.&nbsp; In practice, it</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">understanding of the PVM bytecode implementation.&nbsp; In practice, it</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">means that operations on shared variables of built-in data types</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">means that operations on shared variables of built-in data types</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(ints, lists, dicts, etc) that &quot;look atomic&quot; really are.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(ints, lists, dicts, etc) that &quot;look atomic&quot; really are.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For example, the following operations are all atomic (L, L1, L2 are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For example, the following operations are all atomic (L, L1, L2 are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">lists, D, D1, D2 are dicts, x, y are objects, i, j are ints):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">lists, D, D1, D2 are dicts, x, y are objects, i, j are ints):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; L.append(x)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; L.append(x)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; L1.extend(L2)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; L1.extend(L2)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; x = L[i]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; x = L[i]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; x = L.pop()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; x = L.pop()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; L1[i:j] = L2</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; L1[i:j] = L2</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; L.sort()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; L.sort()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; x = y</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; x = y</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; x.field = y</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; x.field = y</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; D[x] = y</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; D[x] = y</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; D1.update(D2)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; D1.update(D2)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; D.keys()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; D.keys()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">These aren't:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">These aren't:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; i = i+1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; i = i+1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; L.append(L[-1])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; L.append(L[-1])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; L[i] = L[j]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; L[i] = L[j]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; D[x] = D[x] + 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; D[x] = D[x] + 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Operations that replace other objects may invoke those other objects'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Operations that replace other objects may invoke those other objects'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;__del__()&quot; method when their reference count reaches zero, and that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;__del__()&quot; method when their reference count reaches zero, and that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">can affect things.&nbsp; This is especially true for the mass updates to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">can affect things.&nbsp; This is especially true for the mass updates to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">dictionaries and lists.&nbsp; When in doubt, use a mutex!</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">dictionaries and lists.&nbsp; When in doubt, use a mutex!</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Can't we get rid of the Global Interpreter Lock?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Can't we get rid of the Global Interpreter Lock?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The *global interpreter lock* (GIL) is often seen as a hindrance to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The *global interpreter lock* (GIL) is often seen as a hindrance to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python's deployment on high-end multiprocessor server machines,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python's deployment on high-end multiprocessor server machines,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">because a multi-threaded Python program effectively only uses one CPU,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">because a multi-threaded Python program effectively only uses one CPU,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">due to the insistence that (almost) all Python code can only run while</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">due to the insistence that (almost) all Python code can only run while</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the GIL is held.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the GIL is held.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Back in the days of Python 1.5, Greg Stein actually implemented a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Back in the days of Python 1.5, Greg Stein actually implemented a</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">comprehensive patch set (the &quot;free threading&quot; patches) that removed</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">comprehensive patch set (the &quot;free threading&quot; patches) that removed</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">the GIL and replaced it with fine-grained locking.&nbsp; <span class="TextSegSigDiff">Adam</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Olsen</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">the GIL and replaced it with fine-grained locking.&nbsp; <span class="TextSegSigDiff">Unfortunate</span><span class="TextSegSigDiff">ly,</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">rece</span><span class="TextSegSigDiff">ntly</span> <span class="TextSegSigDiff">di</span><span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">a</span> s<span class="TextSegSigDiff">imil</span>ar <span class="TextSegSigDiff">exp</span><span class="TextSegSigDiff">er</span><span class="TextSegSigDiff">im</span>ent <span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span>his <span class="TextSegSigDiff">pyth</span>on<span class="TextSegSigDiff">-safethread</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">project.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">even</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">Windows</span> <span class="TextSegSigDiff">(where</span> <span class="TextSegSigDiff">lock</span>s<span class="TextSegInsigDiff"> </span>ar<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">very</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">effici</span>ent<span class="TextSegSigDiff">)</span> <span class="TextSegSigDiff">t</span>his<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ran</span> o<span class="TextSegSigDiff">rdi</span>n<span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">ry</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">U</span><span class="TextSegSigDiff">nf</span><span class="TextSegSigDiff">ortunately,</span> bot<span class="TextSegSigDiff">h</span> <span class="TextSegSigDiff">experiments</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">exhibited</span> a s<span class="TextSegSigDiff">h</span><span class="TextSegSigDiff">arp</span> <span class="TextSegSigDiff">drop</span> in sin<span class="TextSegInsigDiff">g</span><span class="TextSegSigDiff">le-</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">cod</span><span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">a</span>bo<span class="TextSegSigDiff">u</span>t <span class="TextSegSigDiff">tw</span><span class="TextSegSigDiff">ic</span><span class="TextSegSigDiff">e</span> a<span class="TextSegSigDiff">s</span> s<span class="TextSegSigDiff">low</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">the</span> in<span class="TextSegSigDiff">terpreter</span> <span class="TextSegSigDiff">u</span>sin<span class="TextSegSigDiff">g</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff">G</span><span class="TextSegSigDiff">IL.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">On</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">th<span class="TextSegSigDiff">read</span> performance <span class="TextSegSigDiff">(at</span> <span class="TextSegSigDiff">le</span>as<span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">30%</span> s<span class="TextSegSigDiff">lower),</span> <span class="TextSegSigDiff">d</span><span class="TextSegSigDiff">u</span>e t<span class="TextSegSigDiff">o</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">t</span>he<span class="TextSegInsigDiff"> </span>a<span class="TextSegSigDiff">mount</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">fi</span><span class="TextSegSigDiff">ne-</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Linux</span><span class="TextSegInsigDiff"> </span>th<span class="TextSegSigDiff">e</span> performance <span class="TextSegSigDiff">loss</span> <span class="TextSegSigDiff">w</span>as <span class="TextSegSigDiff">even</span> <span class="TextSegSigDiff">wor</span>s<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">becaus</span>e <span class="TextSegSigDiff">p</span>th<span class="TextSegSigDiff">r</span>ea<span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">locks</span> <span class="TextSegSigDiff">aren't</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">efficient.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">gra</span>ine<span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">locking</span> <span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">ec</span><span class="TextSegSigDiff">essary</span> <span class="TextSegSigDiff">t</span>o <span class="TextSegSigDiff">compensate</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span> r<span class="TextSegSigDiff">emoval</span> of the GIL<span class="TextSegSigDiff">.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">S</span>in<span class="TextSegSigDiff">c</span>e <span class="TextSegSigDiff">the</span><span class="TextSegSigDiff">n,</span> <span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ide</span><span class="TextSegSigDiff">a</span> o<span class="TextSegSigDiff">f</span> <span class="TextSegSigDiff">g</span><span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">ting</span> r<span class="TextSegSigDiff">id</span> of the GIL<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">has</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">occasionally</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">come</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">up</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">but</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">nobody</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">has</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">found</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">way</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">deal</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">expected</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">slowdown,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">users</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">who</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">don't</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">threads</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">would</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">happy</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">their</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ran</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">at</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">half</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">speed.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Greg's</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">free</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">threading</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">patch</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">set</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">has</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">been</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">kept</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">up-</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">to-date</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">later</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">versions.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This doesn't mean that you can't make good use of Python on multi-CPU</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This doesn't mean that you can't make good use of Python on multi-CPU</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">machines! You just have to be creative with dividing the work up</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">machines! You just have to be creative with dividing the work up</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">between multiple *processes* rather than multiple *threads*.<span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">The</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">between multiple *processes* rather than multiple *threads*.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;ProcessPoolExecutor&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">class</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">new</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;concurrent.futures&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">provides</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">easy</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">way</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">doing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">so;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;multiprocessing&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">provides</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">lower-level</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">API</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">case</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">want</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">more</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">control</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">over</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">dispatching</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tasks.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">Judicious use of C extensions will also help; if you use a C extension</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">Judicious use of C extensions will also help; if you use a C extension</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to perform a time-consuming task, the extension can release the GIL</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to perform a time-consuming task, the extension can release the GIL</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">while the thread of execution is in the C code and allow other threads</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">while the thread of execution is in the C code and allow other threads</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">to get some work done.<span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Some</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">standard</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">library</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">modules</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">such</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;zlib&quot;</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">to get some work done.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;hashlib&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">already</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It has been suggested that the GIL should be a per-interpreter-state</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It has been suggested that the GIL should be a per-interpreter-state</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">lock rather than truly global; interpreters then wouldn't be able to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">lock rather than truly global; interpreters then wouldn't be able to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">share objects. Unfortunately, this isn't likely to happen either.&nbsp; It</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">share objects. Unfortunately, this isn't likely to happen either.&nbsp; It</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">would be a tremendous amount of work, because many object</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">would be a tremendous amount of work, because many object</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">implementations currently have global state. For example, small</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">implementations currently have global state. For example, small</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">integers and short strings are cached; these caches would have to be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">integers and short strings are cached; these caches would have to be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">moved to the interpreter state.&nbsp; Other object types have their own</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">moved to the interpreter state.&nbsp; Other object types have their own</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">free list; these free lists would have to be moved to the interpreter</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">free list; these free lists would have to be moved to the interpreter</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">state. And so on.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">state. And so on.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">And I doubt that it can even be done in finite time, because the same</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">And I doubt that it can even be done in finite time, because the same</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">problem exists for 3rd party extensions.&nbsp; It is likely that 3rd party</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">problem exists for 3rd party extensions.&nbsp; It is likely that 3rd party</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">extensions are being written at a faster rate than you can convert</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">extensions are being written at a faster rate than you can convert</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">them to store all their global state in the interpreter state.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">them to store all their global state in the interpreter state.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">And finally, once you have multiple interpreters not sharing any</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">And finally, once you have multiple interpreters not sharing any</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">state, what have you gained over running each interpreter in a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">state, what have you gained over running each interpreter in a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">separate process?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">separate process?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Input and Output</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Input and Output</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I delete a file? (And other file questions...)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I delete a file? (And other file questions...)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Use &quot;os.remove(filename)&quot; or &quot;os.unlink(filename)&quot;; for documentation,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Use &quot;os.remove(filename)&quot; or &quot;os.unlink(filename)&quot;; for documentation,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">see the &quot;os&quot; module.&nbsp; The two functions are identical; &quot;unlink()&quot; is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">see the &quot;os&quot; module.&nbsp; The two functions are identical; &quot;unlink()&quot; is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">simply the name of the Unix system call for this function.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">simply the name of the Unix system call for this function.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To remove a directory, use &quot;os.rmdir()&quot;; use &quot;os.mkdir()&quot; to create</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To remove a directory, use &quot;os.rmdir()&quot;; use &quot;os.mkdir()&quot; to create</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">one. &quot;os.makedirs(path)&quot; will create any intermediate directories in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">one. &quot;os.makedirs(path)&quot; will create any intermediate directories in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;path&quot; that don't exist. &quot;os.removedirs(path)&quot; will remove</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;path&quot; that don't exist. &quot;os.removedirs(path)&quot; will remove</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">intermediate directories as long as they're empty; if you want to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">intermediate directories as long as they're empty; if you want to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">delete an entire directory tree and its contents, use</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">delete an entire directory tree and its contents, use</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;shutil.rmtree()&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;shutil.rmtree()&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To rename a file, use &quot;os.rename(old_path, new_path)&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To rename a file, use &quot;os.rename(old_path, new_path)&quot;.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">To truncate a file, open it using &quot;f = open(filename, &quot;r<span class="TextSegSigDiff">b</span>+&quot;)&quot;, and use</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">To truncate a file, open it using &quot;f = open(filename, &quot;r+&quot;)&quot;, and use</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&quot;f.truncate(offset)&quot;; offset defaults to the current seek position.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&quot;f.truncate(offset)&quot;; offset defaults to the current seek position.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There's also &quot;os.ftruncate(fd, offset)&quot; for files opened with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There's also &quot;os.ftruncate(fd, offset)&quot; for files opened with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;os.open()&quot;, where *fd* is the file descriptor (a small integer).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;os.open()&quot;, where *fd* is the file descriptor (a small integer).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;shutil&quot; module also contains a number of functions to work on</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;shutil&quot; module also contains a number of functions to work on</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">files including &quot;copyfile()&quot;, &quot;copytree()&quot;, and &quot;rmtree()&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">files including &quot;copyfile()&quot;, &quot;copytree()&quot;, and &quot;rmtree()&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I copy a file?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I copy a file?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;shutil&quot; module contains a &quot;copyfile()&quot; function.&nbsp; Note that on</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;shutil&quot; module contains a &quot;copyfile()&quot; function.&nbsp; Note that on</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">MacOS 9 it doesn't copy the resource fork and Finder info.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">MacOS 9 it doesn't copy the resource fork and Finder info.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I read (or write) binary data?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I read (or write) binary data?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To read or write complex binary data formats, it's best to use the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To read or write complex binary data formats, it's best to use the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;struct&quot; module.&nbsp; It allows you to take a string containing binary</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;struct&quot; module.&nbsp; It allows you to take a string containing binary</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">data (usually numbers) and convert it to Python objects; and vice</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">data (usually numbers) and convert it to Python objects; and vice</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">versa.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">versa.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For example, the following code reads two 2-byte integers and one</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For example, the following code reads two 2-byte integers and one</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">4-byte integer in big-endian format from a file:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">4-byte integer in big-endian format from a file:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; import struct</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import struct</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">with</span> open(filename, &quot;rb&quot;) <span class="TextSegSigDiff">as</span> f<span class="TextSegSigDiff">:</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">f</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span> open(filename, &quot;rb&quot;)<span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">#</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Open</span> <span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">binary</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">mode</span> f<span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">portability</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp; &nbsp;<span class="TextSegInsigDiff">&nbsp; &nbsp; </span>s = f.read(8)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;&nbsp; s = f.read(8)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemInsigMod">&nbsp; &nbsp;<span class="TextSegInsigDiff">&nbsp; &nbsp; </span>x, y, z = struct.unpack(&quot;&gt;hhl&quot;, s)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;&nbsp; x, y, z = struct.unpack(&quot;&gt;hhl&quot;, s)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The '&gt;' in the format string forces big-endian data; the letter 'h'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The '&gt;' in the format string forces big-endian data; the letter 'h'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">reads one &quot;short integer&quot; (2 bytes), and 'l' reads one &quot;long integer&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">reads one &quot;short integer&quot; (2 bytes), and 'l' reads one &quot;long integer&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(4 bytes) from the string.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(4 bytes) from the string.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For data that is more regular (e.g. a homogeneous list of ints or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For data that is more regular (e.g. a homogeneous list of ints or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">floats), you can also use the &quot;array&quot; module.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">floats), you can also use the &quot;array&quot; module.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Note:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">To</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">read</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">write</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">binary</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">data,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">mandatory</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">open</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">binary</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">mode</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(here,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">passing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;&quot;rb&quot;&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;open()&quot;).</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">&quot;&quot;r&quot;&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">instead</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">default),</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">open</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">text</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">mode</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">&quot;f.read()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">return</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;str&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">objects</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">rather</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">than</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;bytes&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">objects.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">I can't seem to use os.read() on a pipe created with os.popen(); why?</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">I can't seem to use os.read() on a pipe created with os.popen(); why?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;os.read()&quot; is a low-level function which takes a file descriptor, a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;os.read()&quot; is a low-level function which takes a file descriptor, a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">small integer representing the opened file.&nbsp; &quot;os.popen()&quot; creates a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">small integer representing the opened file.&nbsp; &quot;os.popen()&quot; creates a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">high-level file object, the same type returned by the built-in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">high-level file object, the same type returned by the built-in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;open()&quot; function. Thus, to read *n* bytes from a pipe *p* created</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;open()&quot; function. Thus, to read *n* bytes from a pipe *p* created</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">with &quot;os.popen()&quot;, you need to use &quot;p.read(n)&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">with &quot;os.popen()&quot;, you need to use &quot;p.read(n)&quot;.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">How</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">I</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">run</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">subprocess</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pipes</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">connected</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">both</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">input</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">output?</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">------------------------------------------------------------------------</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;popen2&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">For</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">example:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">import</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">popen2</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">fromchild,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tochild</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">popen2.popen2(&quot;command&quot;)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">tochild.write(&quot;input\n&quot;)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">tochild.flush()</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">output</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fromchild.readline()</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Warning:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">general</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">unwise</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">because</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">easily</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">cause</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">deadlock</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">where</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">process</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">blocked</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">waiting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">output</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">from</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">child</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">while</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">child</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">blocked</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">waiting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">input</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">from</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">This</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">caused</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">by</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">parent</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">expecting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">child</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">output</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">more</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">text</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">than</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">does</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">by</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">data</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">being</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">stuck</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">stdio</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">buffers</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">due</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">lack</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">flushing.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">parent</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">course</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">explicitly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">flush</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">data</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sends</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">child</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">before</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">reads</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">any</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">output,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">but</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">child</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">naive</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">C</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">program</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">may</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">been</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">written</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">never</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">explicitly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">flush</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">its</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">output,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">even</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">interactive,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">since</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">flushing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">normally</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">automatic.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Note</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">deadlock</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">also</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">possible</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;popen3()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">read</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">stdout</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">stderr.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">one</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">two</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">too</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">large</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">internal</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">buffer</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(increasing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">buffer</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">size</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">does</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">help)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;read()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">other</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">one</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">first,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">there</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">deadlock,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">too.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Note</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bug</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">popen2:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">unless</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">program</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">calls</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;wait()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;waitpid()&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">finished</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">child</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">processes</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">never</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">removed,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">eventually</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">calls</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">popen2</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fail</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">because</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">limit</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">number</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">child</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">processes.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Calling</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;os.waitpid()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;os.WNOHANG&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">option</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">prevent</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">good</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">place</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">insert</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">such</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">call</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">would</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">before</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">calling</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;popen2&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">again.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">In</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">many</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">cases,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">all</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">really</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">need</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">run</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">some</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">data</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">through</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">command</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">get</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">result</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">back.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Unless</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">amount</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">data</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">very</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">large,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">easiest</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">way</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">write</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">temporary</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">run</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">command</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">temporary</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">input.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">standard</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;tempfile&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">exports</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;mktemp()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">function</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">generate</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">unique</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">temporary</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">names.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">import</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tempfile</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">import</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">os</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">class</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Popen3:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">&quot;&quot;&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">This</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">deadlock-safe</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">popen</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">returns</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">object</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">errorlevel,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">out</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">string)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">err</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">string).</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">(capturestderr</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">may</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">work</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">under</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">windows.)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">Example:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">print</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Popen3('grep</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">spam','\n\nhere</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">spam\n\n').out</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">&quot;&quot;&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">def</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">__init__(self,command,input=None,capturestderr=None):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">outfile=tempfile.mktemp()</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">command=&quot;(</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">%s</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">%s&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">%</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(command,outfile)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">input:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">infile=tempfile.mktemp()</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">open(infile,&quot;w&quot;).write(input)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">command=command+&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&lt;&quot;+infile</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">capturestderr:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">errfile=tempfile.mktemp()</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">command=command+&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2&gt;&quot;+errfile</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">self.errorlevel=os.system(command)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">8</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">self.out=open(outfile,&quot;r&quot;).read()</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">os.remove(outfile)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">input:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">os.remove(infile)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">capturestderr:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">self.err=open(errfile,&quot;r&quot;).read()</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">os.remove(errfile)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Note</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">many</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">interactive</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">programs</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(e.g.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">vi)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">don't</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">work</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">well</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">pipes</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">substituted</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">standard</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">input</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">output.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">You</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">pseudo</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ttys</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(&quot;ptys&quot;)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">instead</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pipes.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">interface</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Don</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Libes'</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;expect&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">library.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">A</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">extension</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">interfaces</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">expect</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">called</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;expy&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">available</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">from</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">http://expectpy.sourceforge.net.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">A</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pure</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">solution</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">works</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">like</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">expect</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pexpect.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I access the serial (RS232) port?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I access the serial (RS232) port?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For Win32, POSIX (Linux, BSD, etc.), Jython:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For Win32, POSIX (Linux, BSD, etc.), Jython:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; http://pyserial.sourceforge.net</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; http://pyserial.sourceforge.net</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For Unix, see a Usenet post by Mitch Chapman:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For Unix, see a Usenet post by Mitch Chapman:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; https://groups.google.com/groups?selm=34A04430.CF9@ohioee.com</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; https://groups.google.com/groups?selm=34A04430.CF9@ohioee.com</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why doesn't closing sys.stdout (stdin, stderr) really close it?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why doesn't closing sys.stdout (stdin, stderr) really close it?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------------------------------------------------</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">Python <span class="TextSegSigDiff">*</span>file objects<span class="TextSegSigDiff">*</span> are a high-level layer of abstraction on <span class="TextSegSigDiff">low-</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Python file objects are a high-level layer of abstraction on<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">top</span> <span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">C</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">streams,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">which</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">turn</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">medium-level</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">layer</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">abstraction</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">top</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">level C file descriptors.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(among</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">other</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">things)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">low-</span>level C file descriptors.</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">For most file objects you create in Python via the built-in &quot;<span class="TextSegSigDiff">op</span><span class="TextSegSigDiff">en()</span>&quot;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">For most file objects you create in Python via the built-in &quot;<span class="TextSegSigDiff">file</span>&quot;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">f</span><span class="TextSegSigDiff">un</span>ct<span class="TextSegSigDiff">ion</span>, &quot;f.close()&quot; marks the Python file object as being closed</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">constru</span>ct<span class="TextSegSigDiff">or</span>, &quot;f.close()&quot; marks the Python file object as being closed</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">from Python's point of view, and also arranges to close the underlying</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">from Python's point of view, and also arranges to close the underlying</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">C <span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">descriptor</span>.&nbsp;<span class="TextSegInsigDiff"> </span>This also happens automatically in &quot;f&quot;'s</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">C <span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">ream</span>. This also happens automatically in &quot;f&quot;'s<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">destructor,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">when</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">destructor,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">when</span><span class="TextSegInsigDiff"> </span>&quot;f&quot; becomes garbage.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&quot;f&quot; becomes garbage.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">But stdin, stdout and stderr are treated specially by Python, because</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">But stdin, stdout and stderr are treated specially by Python, because</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of the special status also given to them by C.&nbsp; Running</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of the special status also given to them by C.&nbsp; Running</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&quot;sys.stdout.close()&quot; marks the Python-level file object as being</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;sys.stdout.close()&quot; marks the Python-level file object as being</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">closed, but does *not* close the associated C <span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">descriptor</span>.</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">closed, but does *not* close the associated C <span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">ream</span>.</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">To close the underlying C <span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">descriptor</span> for one of these three, you</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">To close the underlying C <span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">ream</span> for one of these three, you<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">should</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">should</span><span class="TextSegInsigDiff"> </span>first be sure that's what you really want to do (e.g., you may</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">first be sure that's what you really want to do (e.g., you may<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">confuse</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">confuse</span><span class="TextSegInsigDiff"> </span>extension modules trying to do I/O).&nbsp; If it is, u<span class="TextSegSigDiff">s</span>e</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">extension modules trying to do I/O).&nbsp; If it is, u<span class="TextSegSigDiff">se</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">os.clos</span>e<span class="TextSegSigDiff">:</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;os.close()&quot;:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; os.close(stdin<span class="TextSegSigDiff">.fileno())</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; os.close(<span class="TextSegSigDiff">0)</span><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">#</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">close</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">C's</span><span class="TextSegInsigDiff"> </span>stdin<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">stream</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; os.close(stdou<span class="TextSegSigDiff">t.fileno())</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; os.close(<span class="TextSegSigDiff">1)</span><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">#</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">close</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">C's</span><span class="TextSegInsigDiff"> </span>stdou<span class="TextSegSigDiff">t</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">str</span><span class="TextSegSigDiff">eam</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; os.close(stderr<span class="TextSegSigDiff">.fileno())</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; os.close(<span class="TextSegSigDiff">2)</span><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">#</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">close</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">C's</span><span class="TextSegInsigDiff"> </span>stde<span class="TextSegSigDiff">r</span>r<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">st</span>r<span class="TextSegSigDiff">eam</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">numeric</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">constants</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">0,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">1</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">respectively.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Network/Internet Programming</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Network/Internet Programming</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">============================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">============================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What WWW tools are there for Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What WWW tools are there for Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">See the chapters titled Internet Protocols and Support and Internet</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">See the chapters titled Internet Protocols and Support and Internet</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Data Handling in the Library Reference Manual.&nbsp; Python has many</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Data Handling in the Library Reference Manual.&nbsp; Python has many</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">modules that will help you build server-side and client-side web</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">modules that will help you build server-side and client-side web</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">systems.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">systems.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A summary of available frameworks is maintained by Paul Boddie at</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A summary of available frameworks is maintained by Paul Boddie at</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">https://wiki.python.org/moin/WebProgramming.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">https://wiki.python.org/moin/WebProgramming.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Cameron Laird maintains a useful set of pages about Python web</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Cameron Laird maintains a useful set of pages about Python web</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">technologies at http://phaseit.net/claird/comp.lang.python/web_python.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">technologies at http://phaseit.net/claird/comp.lang.python/web_python.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How can I mimic CGI form submission (METHOD=POST)?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How can I mimic CGI form submission (METHOD=POST)?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">I would like to retrieve web pages that are the result of POSTing a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">I would like to retrieve web pages that are the result of POSTing a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">form. Is there existing code that would let me do this easily?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">form. Is there existing code that would let me do this easily?</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">Yes. Here's a simple example that uses <span class="TextSegSigDiff">ur</span><span class="TextSegSigDiff">ll</span>ib<span class="TextSegSigDiff">.request</span>:</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Yes. Here's a simple example that uses <span class="TextSegSigDiff">httpl</span>ib:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #!/usr/local/bin/python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #!/usr/local/bin/python</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; import <span class="TextSegSigDiff">ur</span><span class="TextSegSigDiff">ll</span>ib<span class="TextSegSigDiff">.reques</span>t</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; import <span class="TextSegSigDiff">httpl</span>ib<span class="TextSegSigDiff">,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sy</span><span class="TextSegSigDiff">s,</span><span class="TextSegInsigDiff"> </span>t<span class="TextSegSigDiff">ime</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; # build the query string</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # build the query string</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; qs = &quot;First=Josephine&amp;MI=Q&amp;Last=Public&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; qs = &quot;First=Josephine&amp;MI=Q&amp;Last=Public&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; # connect and send the server a path</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # connect and send the server a path</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">req</span> = <span class="TextSegSigDiff">url</span>lib.<span class="TextSegSigDiff">request.urlopen</span>('<span class="TextSegSigDiff">http://</span>www.some-server.out-there'</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">httpobj</span> = <span class="TextSegSigDiff">http</span>lib.<span class="TextSegSigDiff">HT</span><span class="TextSegSigDiff">T</span><span class="TextSegSigDiff">P</span>('www.some-server.out-there'<span class="TextSegSigDiff">,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">80)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; &nbsp;<span class="TextSegInsigDiff">&nbsp; &nbsp; &nbsp; </span><span class="TextSegInsigDiff">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; </span>'/cgi-bin/some-cgi-script'<span class="TextSegSigDiff">,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">data=qs</span>)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">httpobj.putrequest('POST',</span><span class="TextSegInsigDiff"> </span>'/cgi-bin/some-cgi-script')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; w<span class="TextSegSigDiff">i</span>th re<span class="TextSegSigDiff">q:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">#</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">no</span>w<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">generate</span><span class="TextSegInsigDiff"> </span>th<span class="TextSegSigDiff">e</span> re<span class="TextSegSigDiff">st</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">HTTP</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">headers...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">httpobj.putheader('Accept',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'*/*')</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">httpobj.putheader('Connection',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'Keep-Alive')</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">httpobj.putheader('Content-type',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'application/x-www-form-urlencoded')</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">httpobj.putheader('Content-length',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'%d'</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">%</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">len(qs))</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">httpobj.endheaders()</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">httpobj.send(qs)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">#</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">find</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">out</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">what</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">server</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">said</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">response...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; &nbsp;<span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegInsigDiff">&nbsp; </span>msg, hdrs = <span class="TextSegSigDiff">req</span><span class="TextSegSigDiff">.read(),</span><span class="TextSegInsigDiff"> </span>re<span class="TextSegSigDiff">q.info</span>()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">reply,</span><span class="TextSegInsigDiff"> </span>msg, hdrs = <span class="TextSegSigDiff">httpobj.get</span>re<span class="TextSegSigDiff">ply</span>()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">reply</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">!=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">200:</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">sys.stdout.write(httpobj.getfile().read())</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">Note that in general for percent-encoded POST operations, query</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note that in general for percent-encoded POST operations, query</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">strings must be quoted using &quot;urllib.<span class="TextSegSigDiff">parse.</span>urlencode()&quot;.&nbsp; For example,</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">strings must be quoted using &quot;urllib.urlencode()&quot;.&nbsp; For example,<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span>send &quot;name=Guy Steele, Jr.&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">send &quot;name=Guy Steele, Jr.&quot;:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; import urllib<span class="TextSegSigDiff">.parse</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; import urllib</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; urllib.<span class="TextSegSigDiff">parse.</span>urlencode({'name': 'Guy Steele, Jr.'})</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; urllib.urlencode({'name': 'Guy Steele, Jr.'})</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; 'name=Guy+Steele%2C+Jr.'</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; 'name=Guy+Steele%2C+Jr.'</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">See</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">also:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">HOWTO</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Fetch</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Internet</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Resources</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">urllib</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Package</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">extensive</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">examples.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What module should I use to help with generating HTML?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What module should I use to help with generating HTML?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You can find a collection of useful links on the Web Programming wiki</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You can find a collection of useful links on the Web Programming wiki</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">page.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">page.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I send mail from a Python script?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I send mail from a Python script?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Use the standard library module &quot;smtplib&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Use the standard library module &quot;smtplib&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Here's a very simple interactive mail sender that uses it.&nbsp; This</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Here's a very simple interactive mail sender that uses it.&nbsp; This</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">method will work on any host that supports an SMTP listener.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">method will work on any host that supports an SMTP listener.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; import sys, smtplib</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import sys, smtplib</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; fromaddr = input(&quot;From: &quot;)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; fromaddr = <span class="TextSegSigDiff">raw_</span>input(&quot;From: &quot;)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; toaddrs&nbsp; = input(&quot;To: &quot;).split(',')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; toaddrs&nbsp; = <span class="TextSegSigDiff">raw_</span>input(&quot;To: &quot;).split(',')</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>&quot;Enter message, end with ^D:&quot;<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; print<span class="TextSegInsigDiff"> </span>&quot;Enter message, end with ^D:&quot;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; msg = ''</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; msg = ''</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; while True:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; while True:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; line = sys.stdin.readline()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; line = sys.stdin.readline()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; if not line:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; if not line:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; msg += line</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; msg += line</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; # The actual mail send</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # The actual mail send</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; server = smtplib.SMTP('localhost')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; server = smtplib.SMTP('localhost')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; server.sendmail(fromaddr, toaddrs, msg)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; server.sendmail(fromaddr, toaddrs, msg)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; server.quit()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; server.quit()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A Unix-only alternative uses sendmail.&nbsp; The location of the sendmail</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A Unix-only alternative uses sendmail.&nbsp; The location of the sendmail</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">program varies between systems; sometimes it is &quot;/usr/lib/sendmail&quot;,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">program varies between systems; sometimes it is &quot;/usr/lib/sendmail&quot;,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">sometimes &quot;/usr/sbin/sendmail&quot;.&nbsp; The sendmail manual page will help</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">sometimes &quot;/usr/sbin/sendmail&quot;.&nbsp; The sendmail manual page will help</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you out.&nbsp; Here's some sample code:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you out.&nbsp; Here's some sample code:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; import os</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import os</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; SENDMAIL = &quot;/usr/sbin/sendmail&quot;&nbsp; # sendmail location</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; SENDMAIL = &quot;/usr/sbin/sendmail&quot;&nbsp; # sendmail location</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; p = os.popen(&quot;%s -t -i&quot; % SENDMAIL, &quot;w&quot;)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; p = os.popen(&quot;%s -t -i&quot; % SENDMAIL, &quot;w&quot;)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; p.write(&quot;To: receiver@example.com\n&quot;)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; p.write(&quot;To: receiver@example.com\n&quot;)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; p.write(&quot;Subject: test\n&quot;)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; p.write(&quot;Subject: test\n&quot;)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemInsigMod">&nbsp;&nbsp; p.write(&quot;\n&quot;)&nbsp;<span class="TextSegInsigDiff"> </span># blank line separating headers from body</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemInsigMod">&nbsp;&nbsp; p.write(&quot;\n&quot;) # blank line separating headers from body</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; p.write(&quot;Some text\n&quot;)</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; p.write(&quot;Some text\n&quot;)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; p.write(&quot;some more text\n&quot;)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; p.write(&quot;some more text\n&quot;)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; sts = p.close()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; sts = p.close()</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; if sts != 0:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; if sts != 0:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>&quot;Sendmail exit status&quot;, sts<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegInsigDiff"> </span>&quot;Sendmail exit status&quot;, sts</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I avoid blocking in the connect() method of a socket?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I avoid blocking in the connect() method of a socket?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------------------------------------</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">The <span class="TextSegSigDiff">&quot;</span>select<span class="TextSegSigDiff">&quot;</span> module is commonly used to help with asynchronous I/O on</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">The select module is commonly used to help with asynchronous I/O on</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">sockets.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">sockets.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To prevent the TCP connect from blocking, you can set the socket to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To prevent the TCP connect from blocking, you can set the socket to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">non-blocking mode.&nbsp; Then when you do the &quot;connect()&quot;, you will either</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">non-blocking mode.&nbsp; Then when you do the &quot;connect()&quot;, you will either</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">connect immediately (unlikely) or get an exception that contains the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">connect immediately (unlikely) or get an exception that contains the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">error number as &quot;.errno&quot;. &quot;errno.EINPROGRESS&quot; indicates that the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">error number as &quot;.errno&quot;. &quot;errno.EINPROGRESS&quot; indicates that the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">connection is in progress, but hasn't finished yet.&nbsp; Different OSes</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">connection is in progress, but hasn't finished yet.&nbsp; Different OSes</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">will return different values, so you're going to have to check what's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">will return different values, so you're going to have to check what's</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">returned on your system.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">returned on your system.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You can use the &quot;connect_ex()&quot; method to avoid creating an exception.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You can use the &quot;connect_ex()&quot; method to avoid creating an exception.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">It will just return the errno value.&nbsp; To poll, you can call</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It will just return the errno value.&nbsp; To poll, you can call</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&quot;connect_ex()&quot; again later -- <span class="TextSegSigDiff">&quot;0&quot;</span> or &quot;errno.EISCONN&quot; indicate that</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&quot;connect_ex()&quot; again later -- <span class="TextSegSigDiff">0</span> or &quot;errno.EISCONN&quot; indicate that</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">you're connected -- or you can pass this socket to select to check if</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">you're connected -- or you can pass this socket to select to check if</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">it's writable.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">it's writable.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Note:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;asyncore&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">presents</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">framework-like</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">approach</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">problem</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">writing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">non-blocking</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">networking</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">third-party</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Twisted</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">library</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">popular</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">feature-rich</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">alternative.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">Databases</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">Databases</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=========</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=========</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Are there any interfaces to database packages in Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Are there any interfaces to database packages in Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Yes.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Yes.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2.3</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">includes</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;bsddb&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">package</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">which</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">provides</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">interface</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">I</span>nterfaces to disk-based hashes such as<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;DBM&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span> &quot;<span class="TextSegSigDiff">G</span>DBM&quot;<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">also</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">BerkeleyDB</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">l</span><span class="TextSegInsigDiff">i</span><span class="TextSegSigDiff">brary.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">I</span>nterfaces to disk-based hashes such as &quot;DBM&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">included with standard Python.<span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">There</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">also</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;sqlite3&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module,</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;GDBM&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">also</span><span class="TextSegInsigDiff"> </span>included with standard Python.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">which</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">provides</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">lightweight</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">disk-based</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">relational</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">database.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Support for most relational databases is available.&nbsp; See the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Support for most relational databases is available.&nbsp; See the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">DatabaseProgramming wiki page for details.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">DatabaseProgramming wiki page for details.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do you implement persistent objects in Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do you implement persistent objects in Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;pickle&quot; library module solves this in a very general way (though</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;pickle&quot; library module solves this in a very general way (though</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you still can't store things like open files, sockets or windows), and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you still can't store things like open files, sockets or windows), and</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">the &quot;shelve&quot; library module uses pickle and (g)dbm to create</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the &quot;shelve&quot; library module uses pickle and (g)dbm to create</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">persistent mappings containing arbitrary Python objects.</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">persistent mappings containing arbitrary Python objects.<span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">For</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">better</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">performance,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;cPickle&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">A</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">more</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">awkward</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">way</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">doing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">things</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pickle's</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">little</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sister,</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">marshal.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;marshal&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">provides</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">very</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fast</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ways</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">store</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">noncircular</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">basic</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">types</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">files</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">strings,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">back</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">again.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Although</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">marshal</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">does</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fancy</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">things</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">like</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">store</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">instances</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">handle</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">shared</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">references</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">properly,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">does</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">run</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">extremely</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fast.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">For</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">example,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">loading</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">half</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">megabyte</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">data</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">may</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">take</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">less</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">than</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">third</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">second.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">This</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">often</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">beats</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">doing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">something</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">more</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">complex</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">general</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">such</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">gdbm</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pickle/shelve.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Why</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">cPickle</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">so</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">slow?</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">-----------------------</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">By</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">default</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;pickle&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">uses</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">relatively</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">old</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">slow</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">format</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">backward</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">compatibility.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">You</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">however</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">specify</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">other</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">protocol</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">versions</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">faster:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">largeString</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'z'</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">*</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(100</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">*</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">1024)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">myPickle</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">cPickle.dumps(largeString,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">protocol=1)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">my</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">program</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">crashes</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bsddb</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">anydbm)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">database</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">open,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">gets</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">corrupted.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">How</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">come?</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">------------------------------------------------------------------------------------------</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Databases</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">opened</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">write</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">access</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bsddb</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">often</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">by</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">anydbm</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">since</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">preferentially</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bsddb)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">must</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">explicitly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">closed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;.close()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">method</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">database.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">The</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">underlying</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">library</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">caches</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">database</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">contents</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">which</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">need</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">converted</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on-disk</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">form</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">written.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">initialized</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">new</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bsddb</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">database</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">but</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">written</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">anything</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">before</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">program</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">crashes,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">often</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">wind</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">up</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">zero-</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">length</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">encounter</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">exception</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">next</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">time</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">opened.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">I</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tried</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">open</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Berkeley</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">DB</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">but</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bsddb</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">produces</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bsddb.error:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(22,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'Invalid</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">argument').</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Help!</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">How</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">I</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">restore</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">my</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">data?</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">----------------------------------------------------------------------------------------------------------------------------</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Don't</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">panic!</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">data</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">probably</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">intact.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">most</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">frequent</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">cause</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">error</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tried</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">open</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">earlier</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Berkeley</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">DB</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">later</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Berkeley</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">DB</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">library.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Many</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Linux</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">systems</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">now</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">all</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">three</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">versions</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Berkeley</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">DB</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">available.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">migrating</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">from</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">1</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">newer</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">db_dump185</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">dump</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">plain</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">text</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">database.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">migrating</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">from</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">3</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">db2_dump</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">create</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">plain</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">text</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">database.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">In</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">either</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">case,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">db_load</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">create</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">new</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">native</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">database</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">latest</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">installed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">computer.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">3</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Berkeley</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">DB</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">installed,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">should</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">able</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">db2_load</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">create</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">native</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">database.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">You</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">should</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">move</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">away</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">from</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Berkeley</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">DB</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">1</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">files</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">because</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">hash</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">contains</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">known</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bugs</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">corrupt</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">data.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Mathematics and Numerics</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Mathematics and Numerics</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">========================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">========================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I generate random numbers in Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I generate random numbers in Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The standard module &quot;random&quot; implements a random number generator.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The standard module &quot;random&quot; implements a random number generator.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Usage is simple:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Usage is simple:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; import random</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import random</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; random.random()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; random.random()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This returns a random floating point number in the range [0, 1).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This returns a random floating point number in the range [0, 1).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There are also many other specialized generators in this module, such</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There are also many other specialized generators in this module, such</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">as:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">as:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* &quot;randrange(a, b)&quot; chooses an integer in the range [a, b).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* &quot;randrange(a, b)&quot; chooses an integer in the range [a, b).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* &quot;uniform(a, b)&quot; chooses a floating point number in the range [a,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* &quot;uniform(a, b)&quot; chooses a floating point number in the range [a,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; b).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; b).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* &quot;normalvariate(mean, sdev)&quot; samples the normal (Gaussian)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* &quot;normalvariate(mean, sdev)&quot; samples the normal (Gaussian)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; distribution.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; distribution.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Some higher-level functions operate on sequences directly, such as:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Some higher-level functions operate on sequences directly, such as:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* &quot;choice(S)&quot; chooses random element from a given sequence</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* &quot;choice(S)&quot; chooses random element from a given sequence</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* &quot;shuffle(L)&quot; shuffles a list in-place, i.e. permutes it randomly</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* &quot;shuffle(L)&quot; shuffles a list in-place, i.e. permutes it randomly</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There's also a &quot;Random&quot; class you can instantiate to create</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There's also a &quot;Random&quot; class you can instantiate to create</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">independent multiple random number generators.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">independent multiple random number generators.</td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\faq\programming.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Programming FAQ</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Programming FAQ</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">***************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">***************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">General Questions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">General Questions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Is there a source code level debugger with breakpoints, single-stepping, etc.?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Is there a source code level debugger with breakpoints, single-stepping, etc.?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Yes.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Yes.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The pdb module is a simple but adequate console-mode debugger for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The pdb module is a simple but adequate console-mode debugger for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python. It is part of the standard Python library, and is &quot;documented</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python. It is part of the standard Python library, and is &quot;documented</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in the Library Reference Manual&quot;. You can also write your own debugger</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in the Library Reference Manual&quot;. You can also write your own debugger</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">by using the code for pdb as an example.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">by using the code for pdb as an example.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The IDLE interactive development environment, which is part of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The IDLE interactive development environment, which is part of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">standard Python distribution (normally available as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">standard Python distribution (normally available as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Tools/scripts/idle), includes a graphical debugger.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Tools/scripts/idle), includes a graphical debugger.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">PythonWin is a Python IDE that includes a GUI debugger based on pdb.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">PythonWin is a Python IDE that includes a GUI debugger based on pdb.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The Pythonwin debugger colors breakpoints and has quite a few cool</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The Pythonwin debugger colors breakpoints and has quite a few cool</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">features such as debugging non-Pythonwin programs.&nbsp; Pythonwin is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">features such as debugging non-Pythonwin programs.&nbsp; Pythonwin is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">available as part of the Python for Windows Extensions project and as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">available as part of the Python for Windows Extensions project and as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a part of the ActivePython distribution (see</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a part of the ActivePython distribution (see</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">https://www.activestate.com/activepython).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">https://www.activestate.com/activepython).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Boa Constructor is an IDE and GUI builder that uses wxWidgets.&nbsp; It</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Boa Constructor is an IDE and GUI builder that uses wxWidgets.&nbsp; It</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">offers visual frame creation and manipulation, an object inspector,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">offers visual frame creation and manipulation, an object inspector,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">many views on the source like object browsers, inheritance</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">many views on the source like object browsers, inheritance</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">hierarchies, doc string generated html documentation, an advanced</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">hierarchies, doc string generated html documentation, an advanced</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">debugger, integrated help, and Zope support.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">debugger, integrated help, and Zope support.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Eric is an IDE built on PyQt and the Scintilla editing component.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Eric is an IDE built on PyQt and the Scintilla editing component.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Pydb is a version of the standard Python debugger pdb, modified for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Pydb is a version of the standard Python debugger pdb, modified for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">use with DDD (Data Display Debugger), a popular graphical debugger</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">use with DDD (Data Display Debugger), a popular graphical debugger</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">front end.&nbsp; Pydb can be found at http://bashdb.sourceforge.net/pydb/</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">front end.&nbsp; Pydb can be found at http://bashdb.sourceforge.net/pydb/</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and DDD can be found at https://www.gnu.org/software/ddd.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and DDD can be found at https://www.gnu.org/software/ddd.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There are a number of commercial Python IDEs that include graphical</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There are a number of commercial Python IDEs that include graphical</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">debuggers. They include:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">debuggers. They include:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Wing IDE (https://wingware.com/)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Wing IDE (https://wingware.com/)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Komodo IDE (https://komodoide.com/)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Komodo IDE (https://komodoide.com/)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* PyCharm (https://www.jetbrains.com/pycharm/)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* PyCharm (https://www.jetbrains.com/pycharm/)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Is there a tool to help find bugs or perform static analysis?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Is there a tool to help find bugs or perform static analysis?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Yes.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Yes.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">PyChecker is a static analysis tool that finds bugs in Python source</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">PyChecker is a static analysis tool that finds bugs in Python source</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">code and warns about code complexity and style.&nbsp; You can get PyChecker</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">code and warns about code complexity and style.&nbsp; You can get PyChecker</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">from http://pychecker.sourceforge.net/.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">from http://pychecker.sourceforge.net/.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Pylint is another tool that checks if a module satisfies a coding</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Pylint is another tool that checks if a module satisfies a coding</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">standard, and also makes it possible to write plug-ins to add a custom</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">standard, and also makes it possible to write plug-ins to add a custom</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">feature.&nbsp; In addition to the bug checking that PyChecker performs,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">feature.&nbsp; In addition to the bug checking that PyChecker performs,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Pylint offers some additional features such as checking line length,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Pylint offers some additional features such as checking line length,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">whether variable names are well-formed according to your coding</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">whether variable names are well-formed according to your coding</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">standard, whether declared interfaces are fully implemented, and more.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">standard, whether declared interfaces are fully implemented, and more.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">https://docs.pylint.org/ provides a full list of Pylint's features.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">https://docs.pylint.org/ provides a full list of Pylint's features.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How can I create a stand-alone binary from a Python script?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How can I create a stand-alone binary from a Python script?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You don't need the ability to compile Python to C code if all you want</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You don't need the ability to compile Python to C code if all you want</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is a stand-alone program that users can download and run without</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is a stand-alone program that users can download and run without</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">having to install the Python distribution first.&nbsp; There are a number</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">having to install the Python distribution first.&nbsp; There are a number</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of tools that determine the set of modules required by a program and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of tools that determine the set of modules required by a program and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">bind these modules together with a Python binary to produce a single</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">bind these modules together with a Python binary to produce a single</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">executable.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">executable.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">One is to use the freeze tool, which is included in the Python source</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">One is to use the freeze tool, which is included in the Python source</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">tree as &quot;Tools/freeze&quot;. It converts Python byte code to C arrays; a C</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">tree as &quot;Tools/freeze&quot;. It converts Python byte code to C arrays; a C</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">compiler you can embed all your modules into a new program, which is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">compiler you can embed all your modules into a new program, which is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">then linked with the standard Python modules.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">then linked with the standard Python modules.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It works by scanning your source recursively for import statements (in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It works by scanning your source recursively for import statements (in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">both forms) and looking for the modules in the standard Python path as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">both forms) and looking for the modules in the standard Python path as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">well as in the source directory (for built-in modules).&nbsp; It then turns</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">well as in the source directory (for built-in modules).&nbsp; It then turns</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the bytecode for modules written in Python into C code (array</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the bytecode for modules written in Python into C code (array</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">initializers that can be turned into code objects using the marshal</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">initializers that can be turned into code objects using the marshal</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">module) and creates a custom-made config file that only contains those</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">module) and creates a custom-made config file that only contains those</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">built-in modules which are actually used in the program.&nbsp; It then</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">built-in modules which are actually used in the program.&nbsp; It then</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">compiles the generated C code and links it with the rest of the Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">compiles the generated C code and links it with the rest of the Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">interpreter to form a self-contained binary which acts exactly like</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interpreter to form a self-contained binary which acts exactly like</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">your script.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">your script.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Obviously, freeze requires a C compiler.&nbsp; There are several other</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Obviously, freeze requires a C compiler.&nbsp; There are several other</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">utilities which don't. One is Thomas Heller's py2exe (Windows only) at</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">utilities which don't. One is Thomas Heller's py2exe (Windows only) at</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; http://www.py2exe.org/</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; http://www.py2exe.org/</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Another tool is Anthony Tuininga's cx_Freeze.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Another tool is Anthony Tuininga's cx_Freeze.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Are there coding standards or a style guide for Python programs?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Are there coding standards or a style guide for Python programs?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Yes.&nbsp; The coding style required for standard library modules is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Yes.&nbsp; The coding style required for standard library modules is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">documented as **PEP 8**.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">documented as **PEP 8**.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">My</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">program</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">too</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">slow.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">How</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">I</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">speed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">up?</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">---------------------------------------------</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">That's</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tough</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">one,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">general.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">There</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">many</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tricks</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">speed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">up</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">consider</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">rewriting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">parts</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">C</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">last</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">resort.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">In</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">some</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">cases</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it's</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">possible</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">automatically</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">translate</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">C</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">x86</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">assembly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">language,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">meaning</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">don't</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">modify</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">gain</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">increased</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">speed.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Pyrex</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">compile</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">slightly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">modified</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">into</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">C</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">extension,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">used</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">many</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">different</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">platforms.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Psyco</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">just-in-time</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">compiler</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">translates</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">into</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">x86</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">assembly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">language.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Psyco</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">provide</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">dramatic</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">speedups</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">critical</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">functions.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">rest</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">answer</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">discuss</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">various</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tricks</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">squeezing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">bit</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">more</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">speed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">out</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">*Never*</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">apply</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">any</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">optimization</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">tricks</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">unless</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">know</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">need</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">them,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">after</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">profiling</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">has</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">indicated</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">particular</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">function</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">heavily</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">executed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">hot</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">spot</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">code.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Optimizations</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">almost</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">always</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">make</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">less</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">clear,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">shouldn't</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pay</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">costs</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">reduced</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">clarity</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(increased</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">development</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">time,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">greater</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">likelihood</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bugs)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">unless</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">resulting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">performance</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">benefit</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">worth</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">There</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">page</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">wiki</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">devoted</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">performance</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tips.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Guido</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">van</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Rossum</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">has</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">written</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">up</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">anecdote</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">related</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">optimization</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">at</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">https://www.python.org/doc/essays/list2str.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">One</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">thing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">notice</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">function</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(especially)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">method</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">calls</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">rather</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">expensive;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">designed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">purely</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">OO</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">interface</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">lots</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tiny</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">functions</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">don't</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">much</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">more</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">than</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">get</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">set</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">instance</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">variable</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">call</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">another</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">method,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">might</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">consider</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">more</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">direct</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">way</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">such</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">directly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">accessing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">instance</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">variables.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Also</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">see</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">standard</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;profile&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">which</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">makes</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">possible</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">find</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">out</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">where</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">program</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">spending</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">most</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">its</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">time</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">some</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">patience</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">--</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">profiling</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">itself</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">slow</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">program</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">down</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">by</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">order</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">magnitude).</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Remember</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">many</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">standard</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">optimization</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">heuristics</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">may</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">know</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">from</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">other</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">programming</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">experience</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">may</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">well</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">apply</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">For</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">example</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">may</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">faster</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">send</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">output</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">output</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">devices</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">larger</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">writes</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">rather</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">than</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">smaller</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ones</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">order</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">reduce</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">overhead</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">kernel</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">system</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">calls.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Thus</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">CGI</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">scripts</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">write</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">all</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">output</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;one</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">shot&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">may</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">faster</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">than</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">those</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">write</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">lots</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">small</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pieces</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">output.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Also,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sure</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python's</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">core</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">features</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">where</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">appropriate.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">For</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">example,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">slicing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">allows</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">programs</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">chop</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">up</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">lists</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">other</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sequence</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">objects</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">single</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tick</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">interpreter's</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">mainloop</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">highly</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">optimized</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">C</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">implementations.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Thus</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">get</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">same</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">effect</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">L2</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">[]</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">i</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">range(3):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">L2.append(L1[i])</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">much</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">shorter</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">far</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">faster</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">L2</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">list(L1[:3])</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">#</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;list&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">redundant</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">L1</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">list.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Note</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">functionally-oriented</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">built-in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">functions</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">such</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;map()&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;zip()&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">friends</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">convenient</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">accelerator</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">loops</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">perform</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">single</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">task.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">For</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">example</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pair</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">elements</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">two</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">lists</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">together:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">zip([1,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">3],</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">[4,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">5,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">6])</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">[(1,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">4),</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(2,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">5),</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(3,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">6)]</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">compute</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">number</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sines:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">map(math.sin,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(1,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">3,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">4))</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">[0.841470984808,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">0.909297426826,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">0.14112000806,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">-0.756802495308]</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">operation</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">completes</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">very</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">quickly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">such</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">cases.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Other</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">examples</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">include</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;join()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;split()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">methods</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">string</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">objects.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">For</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">example</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">s1..s7</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">large</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(10K+)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">strings</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">then</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;&quot;&quot;.join([s1,s2,s3,s4,s5,s6,s7])&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">may</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">far</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">faster</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">than</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">more</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">obvious</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;s1+s2+s3+s4+s5+s6+s7&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">since</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;summation&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">compute</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">many</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">subexpressions,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">whereas</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;join()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">does</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">all</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">copying</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">one</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">pass.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">For</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">manipulating</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">strings,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;replace()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;format()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">methods</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">string</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">objects.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">regular</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">expressions</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">only</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">when</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you're</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">dealing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">constant</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">string</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">patterns.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">You</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">may</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">still</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">old</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">%</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">operations</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;string</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">%</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tuple&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;string</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">%</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">dictionary&quot;.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sure</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;list.sort()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">built-in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">method</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sorting,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">see</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sorting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">mini-HOWTO</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">examples</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">moderately</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">advanced</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">usage.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;list.sort()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">beats</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">other</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">techniques</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sorting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">all</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">but</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">most</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">extreme</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">circumstances.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Another</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">common</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">trick</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;push</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">loops</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">into</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">functions</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">methods.&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">For</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">example</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">suppose</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">program</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">runs</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">slowly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">profiler</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">determine</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">function</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;ff()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">being</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">called</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">lots</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">times.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">notice</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;ff()&quot;:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">def</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ff(x):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">...</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">#</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">something</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">x</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">computing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">result...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">return</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">result</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">tends</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">called</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">loops</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">like:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">list</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">map(ff,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">oldlist)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">or:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">x</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sequence:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">value</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ff(x)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">...</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">#</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">something</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">value...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">then</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">often</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">eliminate</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">function</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">call</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">overhead</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">by</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">rewriting</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;ff()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">def</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ffseq(seq):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">resultseq</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">[]</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">x</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">seq:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">...</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">#</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">something</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">x</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">computing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">result...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">resultseq.append(result)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">return</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">resultseq</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">rewrite</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">two</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">examples</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;list</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ffseq(oldlist)&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">value</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ffseq(sequence):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">...</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">#</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">something</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">value...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Single</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">calls</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;ff(x)&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">translate</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;ffseq([x])[0]&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">little</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">penalty.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">course</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">technique</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">always</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">appropriate</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">there</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">other</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">variants</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">which</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">figure</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">out.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">You</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">gain</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">some</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">performance</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">by</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">explicitly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">storing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">results</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">function</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">method</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">lookup</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">into</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">local</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">variable.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">A</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">loop</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">like:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">key</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">token:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">dict[key]</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">dict.get(key,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">0)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">+</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">1</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">resolves</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;dict.get&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">every</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">iteration.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">method</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">isn't</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">going</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">change,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">slightly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">faster</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">implementation</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">dict_get</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">dict.get</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">#</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">look</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">up</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">method</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">once</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">key</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">token:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">dict[key]</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">dict_get(key,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">0)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">+</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">1</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Default</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">arguments</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">used</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">determine</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">values</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">once,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">at</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">compile</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">time</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">instead</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">at</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">run</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">time.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">This</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">only</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">done</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">functions</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">objects</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">which</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">changed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">during</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">program</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">execution,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">such</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">replacing</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">def</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">degree_sin(deg):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">return</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">math.sin(deg</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">*</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">math.pi</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">/</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">180.0)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">with</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">def</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">degree_sin(deg,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">factor=math.pi/180.0,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sin=math.sin):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">return</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sin(deg</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">*</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">factor)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Because</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">trick</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">uses</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">default</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">arguments</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">terms</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">which</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">should</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">changed,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">should</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">only</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">used</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">when</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">concerned</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">presenting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">possibly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">confusing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">API</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">users.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">Core Language</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">Core Language</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=============</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=============</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why am I getting an UnboundLocalError when the variable has a value?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why am I getting an UnboundLocalError when the variable has a value?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It can be a surprise to get the UnboundLocalError in previously</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It can be a surprise to get the UnboundLocalError in previously</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">working code when it is modified by adding an assignment statement</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">working code when it is modified by adding an assignment statement</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">somewhere in the body of a function.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">somewhere in the body of a function.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This code:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This code:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&gt;&gt;&gt; x = 10</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&gt;&gt;&gt; x = 10</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&gt;&gt;&gt; def bar():</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&gt;&gt;&gt; def bar():</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(x)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">...&nbsp; &nbsp;&nbsp; print<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">x</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&gt;&gt;&gt; bar()</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&gt;&gt;&gt; bar()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">10</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">10</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">works, but this code:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">works, but this code:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&gt;&gt;&gt; x = 10</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&gt;&gt;&gt; x = 10</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&gt;&gt;&gt; def foo():</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&gt;&gt;&gt; def foo():</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(x)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">...&nbsp; &nbsp;&nbsp; print<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">x</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">...&nbsp; &nbsp;&nbsp; x += 1</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">...&nbsp; &nbsp;&nbsp; x += 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">results in an UnboundLocalError:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">results in an UnboundLocalError:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&gt;&gt;&gt; foo()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&gt;&gt;&gt; foo()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Traceback (most recent call last):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Traceback (most recent call last):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">UnboundLocalError: local variable 'x' referenced before assignment</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">UnboundLocalError: local variable 'x' referenced before assignment</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This is because when you make an assignment to a variable in a scope,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This is because when you make an assignment to a variable in a scope,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that variable becomes local to that scope and shadows any similarly</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that variable becomes local to that scope and shadows any similarly</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">named variable in the outer scope.&nbsp; Since the last statement in foo</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">named variable in the outer scope.&nbsp; Since the last statement in foo</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">assigns a new value to &quot;x&quot;, the compiler recognizes it as a local</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">assigns a new value to &quot;x&quot;, the compiler recognizes it as a local</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">variable.&nbsp; Consequently when the earlier &quot;print<span class="TextSegSigDiff">(x)</span>&quot; attempts to print</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">variable.&nbsp; Consequently when the earlier &quot;print<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">x</span>&quot; attempts to print</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">the uninitialized local variable and an error results.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">the uninitialized local variable and an error results.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In the example above you can access the outer scope variable by</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In the example above you can access the outer scope variable by</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">declaring it global:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">declaring it global:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&gt;&gt;&gt; x = 10</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&gt;&gt;&gt; x = 10</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&gt;&gt;&gt; def foobar():</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&gt;&gt;&gt; def foobar():</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">...&nbsp; &nbsp;&nbsp; global x</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">...&nbsp; &nbsp;&nbsp; global x</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(x)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">...&nbsp; &nbsp;&nbsp; print<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">x</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">...&nbsp; &nbsp;&nbsp; x += 1</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">...&nbsp; &nbsp;&nbsp; x += 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&gt;&gt;&gt; foobar()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&gt;&gt;&gt; foobar()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">10</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">10</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This explicit declaration is required in order to remind you that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This explicit declaration is required in order to remind you that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(unlike the superficially analogous situation with class and instance</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(unlike the superficially analogous situation with class and instance</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">variables) you are actually modifying the value of the variable in the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">variables) you are actually modifying the value of the variable in the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">outer scope:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">outer scope:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&gt;&gt;&gt; print<span class="TextSegSigDiff">(x)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&gt;&gt;&gt; print<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">x</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">11</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">You</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">similar</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">thing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">nested</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">scope</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;nonlocal&quot;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">keyword:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">def</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">foo():</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">...</span><span class="TextSegInsigDiff">&nbsp; &nbsp; </span><span class="TextSegSigDiff">x</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">10</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">...</span><span class="TextSegInsigDiff">&nbsp; &nbsp; </span><span class="TextSegSigDiff">def</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bar():</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">...</span><span class="TextSegInsigDiff">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">nonlocal</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">x</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">...</span><span class="TextSegInsigDiff">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">print(x)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">...</span><span class="TextSegInsigDiff">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">x</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">+=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">1</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">...</span><span class="TextSegInsigDiff">&nbsp; &nbsp; </span><span class="TextSegSigDiff">bar()</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">...</span><span class="TextSegInsigDiff">&nbsp; &nbsp; </span><span class="TextSegSigDiff">print(x)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">foo()</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">10</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">11</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">11</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What are the rules for local and global variables in Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What are the rules for local and global variables in Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In Python, variables that are only referenced inside a function are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In Python, variables that are only referenced inside a function are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">implicitly global.&nbsp; If a variable is assigned a value anywhere within</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">implicitly global.&nbsp; If a variable is assigned a value anywhere within</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the function's body, it's assumed to be a local unless explicitly</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the function's body, it's assumed to be a local unless explicitly</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">declared as global.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">declared as global.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Though a bit surprising at first, a moment's consideration explains</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Though a bit surprising at first, a moment's consideration explains</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">this.&nbsp; On one hand, requiring &quot;global&quot; for assigned variables provides</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">this.&nbsp; On one hand, requiring &quot;global&quot; for assigned variables provides</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a bar against unintended side-effects.&nbsp; On the other hand, if &quot;global&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a bar against unintended side-effects.&nbsp; On the other hand, if &quot;global&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">was required for all global references, you'd be using &quot;global&quot; all</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">was required for all global references, you'd be using &quot;global&quot; all</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the time.&nbsp; You'd have to declare as global every reference to a built-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the time.&nbsp; You'd have to declare as global every reference to a built-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in function or to a component of an imported module.&nbsp; This clutter</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in function or to a component of an imported module.&nbsp; This clutter</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">would defeat the usefulness of the &quot;global&quot; declaration for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">would defeat the usefulness of the &quot;global&quot; declaration for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">identifying side-effects.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">identifying side-effects.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why do lambdas defined in a loop with different values all return the same result?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why do lambdas defined in a loop with different values all return the same result?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Assume you use a for loop to define a few different lambdas (or even</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Assume you use a for loop to define a few different lambdas (or even</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">plain functions), e.g.:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">plain functions), e.g.:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for x in range(5):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for x in range(5):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; squares.append(lambda: x**2)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; squares.append(lambda: x**2)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This gives you a list that contains 5 lambdas that calculate &quot;x**2&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This gives you a list that contains 5 lambdas that calculate &quot;x**2&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You might expect that, when called, they would return, respectively,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You might expect that, when called, they would return, respectively,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;0&quot;, &quot;1&quot;, &quot;4&quot;, &quot;9&quot;, and &quot;16&quot;.&nbsp; However, when you actually try you will</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;0&quot;, &quot;1&quot;, &quot;4&quot;, &quot;9&quot;, and &quot;16&quot;.&nbsp; However, when you actually try you will</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">see that they all return &quot;16&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">see that they all return &quot;16&quot;:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares[2]()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares[2]()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 16</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 16</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares[4]()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares[4]()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 16</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 16</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This happens because &quot;x&quot; is not local to the lambdas, but is defined</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This happens because &quot;x&quot; is not local to the lambdas, but is defined</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in the outer scope, and it is accessed when the lambda is called ---</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in the outer scope, and it is accessed when the lambda is called ---</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">not when it is defined.&nbsp; At the end of the loop, the value of &quot;x&quot; is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">not when it is defined.&nbsp; At the end of the loop, the value of &quot;x&quot; is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;4&quot;, so all the functions now return &quot;4**2&quot;, i.e. &quot;16&quot;.&nbsp; You can also</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;4&quot;, so all the functions now return &quot;4**2&quot;, i.e. &quot;16&quot;.&nbsp; You can also</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">verify this by changing the value of &quot;x&quot; and see how the results of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">verify this by changing the value of &quot;x&quot; and see how the results of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the lambdas change:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the lambdas change:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x = 8</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x = 8</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares[2]()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares[2]()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 64</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 64</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In order to avoid this, you need to save the values in variables local</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In order to avoid this, you need to save the values in variables local</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to the lambdas, so that they don't rely on the value of the global</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to the lambdas, so that they don't rely on the value of the global</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;x&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;x&quot;:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for x in range(5):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for x in range(5):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; squares.append(lambda n=x: n**2)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; squares.append(lambda n=x: n**2)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Here, &quot;n=x&quot; creates a new variable &quot;n&quot; local to the lambda and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Here, &quot;n=x&quot; creates a new variable &quot;n&quot; local to the lambda and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">computed when the lambda is defined so that it has the same value that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">computed when the lambda is defined so that it has the same value that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;x&quot; had at that point in the loop.&nbsp; This means that the value of &quot;n&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;x&quot; had at that point in the loop.&nbsp; This means that the value of &quot;n&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">will be &quot;0&quot; in the first lambda, &quot;1&quot; in the second, &quot;2&quot; in the third,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">will be &quot;0&quot; in the first lambda, &quot;1&quot; in the second, &quot;2&quot; in the third,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and so on. Therefore each lambda will now return the correct result:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and so on. Therefore each lambda will now return the correct result:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares[2]()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares[2]()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 4</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 4</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares[4]()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares[4]()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 16</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 16</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note that this behaviour is not peculiar to lambdas, but applies to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note that this behaviour is not peculiar to lambdas, but applies to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">regular functions too.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">regular functions too.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I share global variables across modules?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I share global variables across modules?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The canonical way to share information across modules within a single</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The canonical way to share information across modules within a single</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">program is to create a special module (often called config or cfg).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">program is to create a special module (often called config or cfg).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Just import the config module in all modules of your application; the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Just import the config module in all modules of your application; the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">module then becomes available as a global name.&nbsp; Because there is only</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">module then becomes available as a global name.&nbsp; Because there is only</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">one instance of each module, any changes made to the module object get</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">one instance of each module, any changes made to the module object get</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">reflected everywhere.&nbsp; For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">reflected everywhere.&nbsp; For example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">config.py:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">config.py:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; x = 0&nbsp;&nbsp; # Default value of the 'x' configuration setting</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; x = 0&nbsp;&nbsp; # Default value of the 'x' configuration setting</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">mod.py:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">mod.py:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; import config</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import config</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; config.x = 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; config.x = 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">main.py:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">main.py:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; import config</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import config</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; import mod</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import mod</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>config.x<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; print<span class="TextSegInsigDiff"> </span>config.x</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note that using a module is also the basis for implementing the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note that using a module is also the basis for implementing the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Singleton design pattern, for the same reason.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Singleton design pattern, for the same reason.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What are the &quot;best practices&quot; for using import in a module?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What are the &quot;best practices&quot; for using import in a module?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In general, don't use &quot;from modulename import *&quot;.&nbsp; Doing so clutters</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In general, don't use &quot;from modulename import *&quot;.&nbsp; Doing so clutters</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the importer's namespace, and makes it much harder for linters to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the importer's namespace, and makes it much harder for linters to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">detect undefined names.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">detect undefined names.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Import modules at the top of a file.&nbsp; Doing so makes it clear what</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Import modules at the top of a file.&nbsp; Doing so makes it clear what</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">other modules your code requires and avoids questions of whether the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">other modules your code requires and avoids questions of whether the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">module name is in scope. Using one import per line makes it easy to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">module name is in scope. Using one import per line makes it easy to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">add and delete module imports, but using multiple imports per line</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">add and delete module imports, but using multiple imports per line</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">uses less screen space.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">uses less screen space.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It's good practice if you import modules in the following order:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It's good practice if you import modules in the following order:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">1. standard library modules -- e.g. &quot;sys&quot;, &quot;os&quot;, &quot;getopt&quot;, &quot;re&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">1. standard library modules -- e.g. &quot;sys&quot;, &quot;os&quot;, &quot;getopt&quot;, &quot;re&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">2. third-party library modules (anything installed in Python's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">2. third-party library modules (anything installed in Python's</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; site- packages directory) -- e.g. mx.DateTime, ZODB, PIL.Image,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; site- packages directory) -- e.g. mx.DateTime, ZODB, PIL.Image,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; etc.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; etc.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">3. locally-developed modules</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">3. locally-developed modules</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Only</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">explicit</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">relative</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">package</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">imports.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you're</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">writing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">that's</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;package.sub.m1&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">want</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">import</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;package.sub.m2&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">just</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">write</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;import</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">m2&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">even</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">though</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it's</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">legal.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Write</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;from</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">package.sub</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">import</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">m2&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;from</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">import</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">m2&quot;</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">instead.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It is sometimes necessary to move imports to a function or class to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It is sometimes necessary to move imports to a function or class to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">avoid problems with circular imports.&nbsp; Gordon McMillan says:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">avoid problems with circular imports.&nbsp; Gordon McMillan says:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Circular imports are fine where both modules use the &quot;import</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Circular imports are fine where both modules use the &quot;import</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &lt;module&gt;&quot; form of import.&nbsp; They fail when the 2nd module wants to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &lt;module&gt;&quot; form of import.&nbsp; They fail when the 2nd module wants to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; grab a name out of the first (&quot;from module import name&quot;) and the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; grab a name out of the first (&quot;from module import name&quot;) and the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; import is at the top level.&nbsp; That's because names in the 1st are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import is at the top level.&nbsp; That's because names in the 1st are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; not yet available, because the first module is busy importing the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; not yet available, because the first module is busy importing the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 2nd.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 2nd.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In this case, if the second module is only used in one function, then</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In this case, if the second module is only used in one function, then</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the import can easily be moved into that function.&nbsp; By the time the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the import can easily be moved into that function.&nbsp; By the time the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">import is called, the first module will have finished initializing,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">import is called, the first module will have finished initializing,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and the second module can do its import.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and the second module can do its import.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It may also be necessary to move imports out of the top level of code</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It may also be necessary to move imports out of the top level of code</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">if some of the modules are platform-specific.&nbsp; In that case, it may</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">if some of the modules are platform-specific.&nbsp; In that case, it may</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">not even be possible to import all of the modules at the top of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">not even be possible to import all of the modules at the top of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">file.&nbsp; In this case, importing the correct modules in the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">file.&nbsp; In this case, importing the correct modules in the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">corresponding platform-specific code is a good option.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">corresponding platform-specific code is a good option.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Only move imports into a local scope, such as inside a function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Only move imports into a local scope, such as inside a function</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">definition, if it's necessary to solve a problem such as avoiding a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">definition, if it's necessary to solve a problem such as avoiding a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">circular import or are trying to reduce the initialization time of a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">circular import or are trying to reduce the initialization time of a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">module.&nbsp; This technique is especially helpful if many of the imports</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">module.&nbsp; This technique is especially helpful if many of the imports</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">are unnecessary depending on how the program executes.&nbsp; You may also</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">are unnecessary depending on how the program executes.&nbsp; You may also</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">want to move imports into a function if the modules are only ever used</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">want to move imports into a function if the modules are only ever used</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in that function.&nbsp; Note that loading a module the first time may be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in that function.&nbsp; Note that loading a module the first time may be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">expensive because of the one time initialization of the module, but</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">expensive because of the one time initialization of the module, but</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">loading a module multiple times is virtually free, costing only a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">loading a module multiple times is virtually free, costing only a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">couple of dictionary lookups.&nbsp; Even if the module name has gone out of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">couple of dictionary lookups.&nbsp; Even if the module name has gone out of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">scope, the module is probably available in &quot;sys.modules&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">scope, the module is probably available in &quot;sys.modules&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why are default values shared between objects?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why are default values shared between objects?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This type of bug commonly bites neophyte programmers.&nbsp; Consider this</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This type of bug commonly bites neophyte programmers.&nbsp; Consider this</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def foo(mydict={}):&nbsp; # Danger: shared reference to one dict for all calls</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def foo(mydict={}):&nbsp; # Danger: shared reference to one dict for all calls</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ... compute something ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ... compute something ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; mydict[key] = value</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; mydict[key] = value</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return mydict</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return mydict</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The first time you call this function, &quot;mydict&quot; contains a single</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The first time you call this function, &quot;mydict&quot; contains a single</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">item.&nbsp; The second time, &quot;mydict&quot; contains two items because when</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">item.&nbsp; The second time, &quot;mydict&quot; contains two items because when</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;foo()&quot; begins executing, &quot;mydict&quot; starts out with an item already in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;foo()&quot; begins executing, &quot;mydict&quot; starts out with an item already in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">it.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">it.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It is often expected that a function call creates new objects for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It is often expected that a function call creates new objects for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">default values. This is not what happens. Default values are created</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">default values. This is not what happens. Default values are created</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">exactly once, when the function is defined.&nbsp; If that object is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">exactly once, when the function is defined.&nbsp; If that object is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">changed, like the dictionary in this example, subsequent calls to the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">changed, like the dictionary in this example, subsequent calls to the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function will refer to this changed object.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function will refer to this changed object.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">By definition, immutable objects such as numbers, strings, tuples, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">By definition, immutable objects such as numbers, strings, tuples, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;None&quot;, are safe from change. Changes to mutable objects such as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;None&quot;, are safe from change. Changes to mutable objects such as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">dictionaries, lists, and class instances can lead to confusion.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">dictionaries, lists, and class instances can lead to confusion.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Because of this feature, it is good programming practice to not use</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Because of this feature, it is good programming practice to not use</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">mutable objects as default values.&nbsp; Instead, use &quot;None&quot; as the default</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">mutable objects as default values.&nbsp; Instead, use &quot;None&quot; as the default</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">value and inside the function, check if the parameter is &quot;None&quot; and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">value and inside the function, check if the parameter is &quot;None&quot; and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">create a new list/dictionary/whatever if it is.&nbsp; For example, don't</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">create a new list/dictionary/whatever if it is.&nbsp; For example, don't</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">write:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">write:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def foo(mydict={}):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def foo(mydict={}):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">but:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">but:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def foo(mydict=None):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def foo(mydict=None):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; if mydict is None:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; if mydict is None:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mydict = {}&nbsp; # create a new dict for local namespace</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mydict = {}&nbsp; # create a new dict for local namespace</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This feature can be useful.&nbsp; When you have a function that's time-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This feature can be useful.&nbsp; When you have a function that's time-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">consuming to compute, a common technique is to cache the parameters</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">consuming to compute, a common technique is to cache the parameters</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and the resulting value of each call to the function, and return the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and the resulting value of each call to the function, and return the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">cached value if the same value is requested again.&nbsp; This is called</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">cached value if the same value is requested again.&nbsp; This is called</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;memoizing&quot;, and can be implemented like this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;memoizing&quot;, and can be implemented like this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; # Callers will never provide a third parameter for this function.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # Callers will never provide a third parameter for this function.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def expensive(arg1, arg2, _cache={}):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def expensive(arg1, arg2, _cache={}):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; if (arg1, arg2) in _cache:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; if (arg1, arg2) in _cache:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return _cache[(arg1, arg2)]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return _cache[(arg1, arg2)]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; # Calculate the value</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; # Calculate the value</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; result = ... expensive computation ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; result = ... expensive computation ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; _cache[(arg1, arg2)] = result&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # Store result in the cache</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; _cache[(arg1, arg2)] = result&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # Store result in the cache</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return result</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return result</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You could use a global variable containing a dictionary instead of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You could use a global variable containing a dictionary instead of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">default value; it's a matter of taste.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">default value; it's a matter of taste.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How can I pass optional or keyword parameters from one function to another?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How can I pass optional or keyword parameters from one function to another?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Collect the arguments using the &quot;*&quot; and &quot;**&quot; specifiers in the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Collect the arguments using the &quot;*&quot; and &quot;**&quot; specifiers in the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function's parameter list; this gives you the positional arguments as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function's parameter list; this gives you the positional arguments as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a tuple and the keyword arguments as a dictionary.&nbsp; You can then pass</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a tuple and the keyword arguments as a dictionary.&nbsp; You can then pass</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">these arguments when calling another function by using &quot;*&quot; and &quot;**&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">these arguments when calling another function by using &quot;*&quot; and &quot;**&quot;:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def f(x, *args, **kwargs):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def f(x, *args, **kwargs):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; kwargs['width'] = '14.3c'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; kwargs['width'] = '14.3c'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; g(x, *args, **kwargs)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; g(x, *args, **kwargs)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">In</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">unlikely</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">case</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">care</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">about</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">versions</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">older</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">than</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">2.0,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;apply()&quot;:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">def</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">f(x,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">*args,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">**kwargs):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">kwargs['width']</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'14.3c'</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">apply(g,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(x,)+args,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">kwargs)</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What is the difference between arguments and parameters?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What is the difference between arguments and parameters?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*Parameters* are defined by the names that appear in a function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*Parameters* are defined by the names that appear in a function</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">definition, whereas *arguments* are the values actually passed to a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">definition, whereas *arguments* are the values actually passed to a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function when calling it.&nbsp; Parameters define what types of arguments a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function when calling it.&nbsp; Parameters define what types of arguments a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function can accept.&nbsp; For example, given the function definition:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function can accept.&nbsp; For example, given the function definition:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def func(foo, bar=None, **kwargs):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def func(foo, bar=None, **kwargs):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; pass</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; pass</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*foo*, *bar* and *kwargs* are parameters of &quot;func&quot;.&nbsp; However, when</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*foo*, *bar* and *kwargs* are parameters of &quot;func&quot;.&nbsp; However, when</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">calling &quot;func&quot;, for example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">calling &quot;func&quot;, for example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; func(42, bar=314, extra=somevar)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; func(42, bar=314, extra=somevar)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the values &quot;42&quot;, &quot;314&quot;, and &quot;somevar&quot; are arguments.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the values &quot;42&quot;, &quot;314&quot;, and &quot;somevar&quot; are arguments.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why did changing list 'y' also change list 'x'?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why did changing list 'y' also change list 'x'?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you wrote code like:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you wrote code like:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; y = x</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; y = x</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; y.append(10)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; y.append(10)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; y</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; y</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [10]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [10]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [10]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [10]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you might be wondering why appending an element to &quot;y&quot; changed &quot;x&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you might be wondering why appending an element to &quot;y&quot; changed &quot;x&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">too.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">too.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There are two factors that produce this result:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There are two factors that produce this result:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">1. Variables are simply names that refer to objects.&nbsp; Doing &quot;y = x&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">1. Variables are simply names that refer to objects.&nbsp; Doing &quot;y = x&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; doesn't create a copy of the list -- it creates a new variable &quot;y&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; doesn't create a copy of the list -- it creates a new variable &quot;y&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; that refers to the same object &quot;x&quot; refers to.&nbsp; This means that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; that refers to the same object &quot;x&quot; refers to.&nbsp; This means that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; there is only one object (the list), and both &quot;x&quot; and &quot;y&quot; refer to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; there is only one object (the list), and both &quot;x&quot; and &quot;y&quot; refer to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; it.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; it.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">2. Lists are *mutable*, which means that you can change their</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">2. Lists are *mutable*, which means that you can change their</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; content.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; content.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">After the call to &quot;append()&quot;, the content of the mutable object has</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">After the call to &quot;append()&quot;, the content of the mutable object has</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">changed from &quot;[]&quot; to &quot;[10]&quot;.&nbsp; Since both the variables refer to the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">changed from &quot;[]&quot; to &quot;[10]&quot;.&nbsp; Since both the variables refer to the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">same object, using either name accesses the modified value &quot;[10]&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">same object, using either name accesses the modified value &quot;[10]&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If we instead assign an immutable object to &quot;x&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If we instead assign an immutable object to &quot;x&quot;:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x = 5&nbsp; # ints are immutable</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x = 5&nbsp; # ints are immutable</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; y = x</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; y = x</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x = x + 1&nbsp; # 5 can't be mutated, we are creating a new object here</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x = x + 1&nbsp; # 5 can't be mutated, we are creating a new object here</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 6</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 6</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; y</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; y</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 5</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 5</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">we can see that in this case &quot;x&quot; and &quot;y&quot; are not equal anymore.&nbsp; This</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">we can see that in this case &quot;x&quot; and &quot;y&quot; are not equal anymore.&nbsp; This</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is because integers are *immutable*, and when we do &quot;x = x + 1&quot; we are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is because integers are *immutable*, and when we do &quot;x = x + 1&quot; we are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">not mutating the int &quot;5&quot; by incrementing its value; instead, we are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">not mutating the int &quot;5&quot; by incrementing its value; instead, we are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">creating a new object (the int &quot;6&quot;) and assigning it to &quot;x&quot; (that is,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">creating a new object (the int &quot;6&quot;) and assigning it to &quot;x&quot; (that is,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">changing which object &quot;x&quot; refers to).&nbsp; After this assignment we have</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">changing which object &quot;x&quot; refers to).&nbsp; After this assignment we have</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">two objects (the ints &quot;6&quot; and &quot;5&quot;) and two variables that refer to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">two objects (the ints &quot;6&quot; and &quot;5&quot;) and two variables that refer to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">them (&quot;x&quot; now refers to &quot;6&quot; but &quot;y&quot; still refers to &quot;5&quot;).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">them (&quot;x&quot; now refers to &quot;6&quot; but &quot;y&quot; still refers to &quot;5&quot;).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Some operations (for example &quot;y.append(10)&quot; and &quot;y.sort()&quot;) mutate the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Some operations (for example &quot;y.append(10)&quot; and &quot;y.sort()&quot;) mutate the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">object, whereas superficially similar operations (for example &quot;y = y +</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">object, whereas superficially similar operations (for example &quot;y = y +</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">[10]&quot; and &quot;sorted(y)&quot;) create a new object.&nbsp; In general in Python (and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">[10]&quot; and &quot;sorted(y)&quot;) create a new object.&nbsp; In general in Python (and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in all cases in the standard library) a method that mutates an object</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in all cases in the standard library) a method that mutates an object</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">will return &quot;None&quot; to help avoid getting the two types of operations</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">will return &quot;None&quot; to help avoid getting the two types of operations</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">confused.&nbsp; So if you mistakenly write &quot;y.sort()&quot; thinking it will give</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">confused.&nbsp; So if you mistakenly write &quot;y.sort()&quot; thinking it will give</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you a sorted copy of &quot;y&quot;, you'll instead end up with &quot;None&quot;, which</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you a sorted copy of &quot;y&quot;, you'll instead end up with &quot;None&quot;, which</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">will likely cause your program to generate an easily diagnosed error.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">will likely cause your program to generate an easily diagnosed error.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">However, there is one class of operations where the same operation</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">However, there is one class of operations where the same operation</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">sometimes has different behaviors with different types:&nbsp; the augmented</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">sometimes has different behaviors with different types:&nbsp; the augmented</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">assignment operators.&nbsp; For example, &quot;+=&quot; mutates lists but not tuples</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">assignment operators.&nbsp; For example, &quot;+=&quot; mutates lists but not tuples</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">or ints (&quot;a_list += [1, 2, 3]&quot; is equivalent to &quot;a_list.extend([1, 2,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">or ints (&quot;a_list += [1, 2, 3]&quot; is equivalent to &quot;a_list.extend([1, 2,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">3])&quot; and mutates &quot;a_list&quot;, whereas &quot;some_tuple += (1, 2, 3)&quot; and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">3])&quot; and mutates &quot;a_list&quot;, whereas &quot;some_tuple += (1, 2, 3)&quot; and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;some_int += 1&quot; create new objects).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;some_int += 1&quot; create new objects).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In other words:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In other words:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* If we have a mutable object (&quot;list&quot;, &quot;dict&quot;, &quot;set&quot;, etc.), we can</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* If we have a mutable object (&quot;list&quot;, &quot;dict&quot;, &quot;set&quot;, etc.), we can</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; use some specific operations to mutate it and all the variables that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; use some specific operations to mutate it and all the variables that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; refer to it will see the change.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; refer to it will see the change.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* If we have an immutable object (&quot;str&quot;, &quot;int&quot;, &quot;tuple&quot;, etc.), all</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* If we have an immutable object (&quot;str&quot;, &quot;int&quot;, &quot;tuple&quot;, etc.), all</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; the variables that refer to it will always see the same value, but</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; the variables that refer to it will always see the same value, but</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; operations that transform that value into a new value always return</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; operations that transform that value into a new value always return</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; a new object.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; a new object.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you want to know if two variables refer to the same object or not,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you want to know if two variables refer to the same object or not,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you can use the &quot;is&quot; operator, or the built-in function &quot;id()&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you can use the &quot;is&quot; operator, or the built-in function &quot;id()&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I write a function with output parameters (call by reference)?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I write a function with output parameters (call by reference)?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Remember that arguments are passed by assignment in Python.&nbsp; Since</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Remember that arguments are passed by assignment in Python.&nbsp; Since</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">assignment just creates references to objects, there's no alias</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">assignment just creates references to objects, there's no alias</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">between an argument name in the caller and callee, and so no call-by-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">between an argument name in the caller and callee, and so no call-by-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">reference per se.&nbsp; You can achieve the desired effect in a number of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">reference per se.&nbsp; You can achieve the desired effect in a number of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">ways.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">ways.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">1. By returning a tuple of the results:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">1. By returning a tuple of the results:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; def func2(a, b):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; def func2(a, b):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; a = 'new-value'&nbsp; &nbsp; &nbsp; &nbsp; # a and b are local names</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; a = 'new-value'&nbsp; &nbsp; &nbsp; &nbsp; # a and b are local names</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; b = b + 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # assigned to new objects</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; b = b + 1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # assigned to new objects</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return a, b&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # return new values</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return a, b&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # return new values</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; x, y = 'old-value', 99</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; x, y = 'old-value', 99</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; x, y = func2(x, y)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; x, y = func2(x, y)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>x, y<span class="TextSegSigDiff">)</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # output: new-value 100</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp;&nbsp; print<span class="TextSegInsigDiff"> </span>x, y<span class="TextSegInsigDiff"> </span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # output: new-value 100</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; This is almost always the clearest solution.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; This is almost always the clearest solution.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">2. By using global variables.&nbsp; This isn't thread-safe, and is not</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">2. By using global variables.&nbsp; This isn't thread-safe, and is not</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; recommended.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; recommended.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">3. By passing a mutable (changeable in-place) object:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">3. By passing a mutable (changeable in-place) object:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; def func1(a):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; def func1(a):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; a[0] = 'new-value'&nbsp; &nbsp;&nbsp; # 'a' references a mutable list</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; a[0] = 'new-value'&nbsp; &nbsp;&nbsp; # 'a' references a mutable list</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; a[1] = a[1] + 1&nbsp; &nbsp; &nbsp; &nbsp; # changes a shared object</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; a[1] = a[1] + 1&nbsp; &nbsp; &nbsp; &nbsp; # changes a shared object</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; args = ['old-value', 99]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; args = ['old-value', 99]</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; func1(args)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; func1(args)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>args[0], args[1]<span class="TextSegSigDiff">)</span>&nbsp; &nbsp; # output: new-value 100</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp;&nbsp; print<span class="TextSegInsigDiff"> </span>args[0], args[1]<span class="TextSegInsigDiff"> </span>&nbsp; &nbsp; # output: new-value 100</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">4. By passing in a dictionary that gets mutated:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">4. By passing in a dictionary that gets mutated:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; def func3(args):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; def func3(args):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; args['a'] = 'new-value'&nbsp; &nbsp;&nbsp; # args is a mutable dictionary</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; args['a'] = 'new-value'&nbsp; &nbsp;&nbsp; # args is a mutable dictionary</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; args['b'] = args['b'] + 1&nbsp;&nbsp; # change it in-place</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; args['b'] = args['b'] + 1&nbsp;&nbsp; # change it in-place</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; args = {'a': 'old-value', 'b': 99}</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; args = {'a': 'old-value', 'b': 99}</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; func3(args)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; func3(args)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>args['a'], args['b']<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp;&nbsp; print<span class="TextSegInsigDiff"> </span>args['a'], args['b']</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">5. Or bundle up values in a class instance:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">5. Or bundle up values in a class instance:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; class callByRef:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; class callByRef:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; def __init__(self, **args):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; def __init__(self, **args):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; for (key, value) in args.items():</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; for (key, value) in args.items():</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; setattr(self, key, value)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; setattr(self, key, value)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; def func4(args):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; def func4(args):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; args.a = 'new-value'&nbsp; &nbsp; &nbsp; &nbsp; # args is a mutable callByRef</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; args.a = 'new-value'&nbsp; &nbsp; &nbsp; &nbsp; # args is a mutable callByRef</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; args.b = args.b + 1&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # change object in-place</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; args.b = args.b + 1&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # change object in-place</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; args = callByRef(a='old-value', b=99)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; args = callByRef(a='old-value', b=99)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; func4(args)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; func4(args)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>args.a, args.b<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp;&nbsp; print<span class="TextSegInsigDiff"> </span>args.a, args.b</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; There's almost never a good reason to get this complicated.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; There's almost never a good reason to get this complicated.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Your best choice is to return a tuple containing the multiple results.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Your best choice is to return a tuple containing the multiple results.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do you make a higher order function in Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do you make a higher order function in Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You have two choices: you can use nested scopes or you can use</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You have two choices: you can use nested scopes or you can use</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">callable objects. For example, suppose you wanted to define</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">callable objects. For example, suppose you wanted to define</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;linear(a,b)&quot; which returns a function &quot;f(x)&quot; that computes the value</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;linear(a,b)&quot; which returns a function &quot;f(x)&quot; that computes the value</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;a*x+b&quot;.&nbsp; Using nested scopes:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;a*x+b&quot;.&nbsp; Using nested scopes:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def linear(a, b):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def linear(a, b):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def result(x):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def result(x):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return a * x + b</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return a * x + b</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return result</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return result</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Or using a callable object:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Or using a callable object:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class linear:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class linear:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, a, b):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, a, b):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.a, self.b = a, b</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.a, self.b = a, b</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __call__(self, x):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __call__(self, x):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return self.a * x + self.b</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return self.a * x + self.b</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In both cases,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In both cases,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; taxes = linear(0.3, 2)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; taxes = linear(0.3, 2)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">gives a callable object where &quot;taxes(10e6) == 0.3 * 10e6 + 2&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">gives a callable object where &quot;taxes(10e6) == 0.3 * 10e6 + 2&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The callable object approach has the disadvantage that it is a bit</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The callable object approach has the disadvantage that it is a bit</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">slower and results in slightly longer code.&nbsp; However, note that a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">slower and results in slightly longer code.&nbsp; However, note that a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">collection of callables can share their signature via inheritance:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">collection of callables can share their signature via inheritance:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class exponential(linear):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class exponential(linear):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; # __init__ inherited</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; # __init__ inherited</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __call__(self, x):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __call__(self, x):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return self.a * (x ** self.b)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return self.a * (x ** self.b)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Object can encapsulate state for several methods:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Object can encapsulate state for several methods:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class counter:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class counter:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; value = 0</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; value = 0</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def set(self, x):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def set(self, x):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.value = x</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.value = x</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def up(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def up(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.value = self.value + 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.value = self.value + 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def down(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def down(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.value = self.value - 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.value = self.value - 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; count = counter()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; count = counter()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; inc, dec, reset = count.up, count.down, count.set</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; inc, dec, reset = count.up, count.down, count.set</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Here &quot;inc()&quot;, &quot;dec()&quot; and &quot;reset()&quot; act like functions which share the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Here &quot;inc()&quot;, &quot;dec()&quot; and &quot;reset()&quot; act like functions which share the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">same counting variable.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">same counting variable.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I copy an object in Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I copy an object in Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In general, try &quot;copy.copy()&quot; or &quot;copy.deepcopy()&quot; for the general</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In general, try &quot;copy.copy()&quot; or &quot;copy.deepcopy()&quot; for the general</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">case. Not all objects can be copied, but most can.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">case. Not all objects can be copied, but most can.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Some objects can be copied more easily.&nbsp; Dictionaries have a &quot;copy()&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Some objects can be copied more easily.&nbsp; Dictionaries have a &quot;copy()&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">method:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">method:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; newdict = olddict.copy()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; newdict = olddict.copy()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Sequences can be copied by slicing:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Sequences can be copied by slicing:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; new_l = l[:]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; new_l = l[:]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How can I find the methods or attributes of an object?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How can I find the methods or attributes of an object?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For an instance x of a user-defined class, &quot;dir(x)&quot; returns an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For an instance x of a user-defined class, &quot;dir(x)&quot; returns an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">alphabetized list of the names containing the instance attributes and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">alphabetized list of the names containing the instance attributes and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">methods and attributes defined by its class.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">methods and attributes defined by its class.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How can my code discover the name of an object?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How can my code discover the name of an object?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Generally speaking, it can't, because objects don't really have names.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Generally speaking, it can't, because objects don't really have names.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Essentially, assignment always binds a name to a value; The same is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Essentially, assignment always binds a name to a value; The same is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">true of &quot;def&quot; and &quot;class&quot; statements, but in that case the value is a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">true of &quot;def&quot; and &quot;class&quot; statements, but in that case the value is a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">callable. Consider the following code:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">callable. Consider the following code:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; class A:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; class A:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; pass</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; pass</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; B = A</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; B = A</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = B()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = B()</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; b = a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; b = a</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(b)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">b</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &lt;__main__.A <span class="TextSegSigDiff">obj</span><span class="TextSegSigDiff">ect</span> at 0x16D07CC&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &lt;__main__.A <span class="TextSegSigDiff">instance</span> at 0x16D07CC&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(a)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &lt;__main__.A <span class="TextSegSigDiff">obj</span><span class="TextSegSigDiff">ect</span> at 0x16D07CC&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &lt;__main__.A <span class="TextSegSigDiff">instance</span> at 0x16D07CC&gt;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Arguably the class has a name: even though it is bound to two names</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Arguably the class has a name: even though it is bound to two names</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and invoked through the name B the created instance is still reported</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and invoked through the name B the created instance is still reported</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">as an instance of class A.&nbsp; However, it is impossible to say whether</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">as an instance of class A.&nbsp; However, it is impossible to say whether</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the instance's name is a or b, since both names are bound to the same</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the instance's name is a or b, since both names are bound to the same</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">value.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">value.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Generally speaking it should not be necessary for your code to &quot;know</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Generally speaking it should not be necessary for your code to &quot;know</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the names&quot; of particular values. Unless you are deliberately writing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the names&quot; of particular values. Unless you are deliberately writing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">introspective programs, this is usually an indication that a change of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">introspective programs, this is usually an indication that a change of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">approach might be beneficial.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">approach might be beneficial.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In comp.lang.python, Fredrik Lundh once gave an excellent analogy in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In comp.lang.python, Fredrik Lundh once gave an excellent analogy in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">answer to this question:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">answer to this question:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; The same way as you get the name of that cat you found on your</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; The same way as you get the name of that cat you found on your</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; porch: the cat (object) itself cannot tell you its name, and it</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; porch: the cat (object) itself cannot tell you its name, and it</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; doesn't really care -- so the only way to find out what it's called</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; doesn't really care -- so the only way to find out what it's called</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; is to ask all your neighbours (namespaces) if it's their cat</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; is to ask all your neighbours (namespaces) if it's their cat</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; (object)...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; (object)...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ....and don't be surprised if you'll find that it's known by many</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ....and don't be surprised if you'll find that it's known by many</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; names, or no name at all!</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; names, or no name at all!</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What's up with the comma operator's precedence?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What's up with the comma operator's precedence?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Comma is not an operator in Python.&nbsp; Consider this session:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Comma is not an operator in Python.&nbsp; Consider this session:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; &quot;a&quot; in &quot;b&quot;, &quot;a&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; &quot;a&quot; in &quot;b&quot;, &quot;a&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; (False, 'a')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; (False, 'a')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Since the comma is not an operator, but a separator between</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Since the comma is not an operator, but a separator between</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">expressions the above is evaluated as if you had entered:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">expressions the above is evaluated as if you had entered:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; (&quot;a&quot; in &quot;b&quot;), &quot;a&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; (&quot;a&quot; in &quot;b&quot;), &quot;a&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">not:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">not:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &quot;a&quot; in (&quot;b&quot;, &quot;a&quot;)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &quot;a&quot; in (&quot;b&quot;, &quot;a&quot;)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The same is true of the various assignment operators (&quot;=&quot;, &quot;+=&quot; etc).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The same is true of the various assignment operators (&quot;=&quot;, &quot;+=&quot; etc).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">They are not truly operators but syntactic delimiters in assignment</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">They are not truly operators but syntactic delimiters in assignment</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">statements.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">statements.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Is there an equivalent of C's &quot;?:&quot; ternary operator?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Is there an equivalent of C's &quot;?:&quot; ternary operator?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------------------------------------</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">Yes, th<span class="TextSegSigDiff">e</span>re i<span class="TextSegSigDiff">s</span>. The syntax <span class="TextSegSigDiff">is</span> a<span class="TextSegSigDiff">s</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">follows:</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Yes, th<span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">featu</span>re <span class="TextSegSigDiff">was</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">added</span><span class="TextSegInsigDiff"> </span>i<span class="TextSegSigDiff">n</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2.5</span>. The syntax<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">would</span> <span class="TextSegSigDiff">be</span> a<span class="TextSegSigDiff">s</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">follows:</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [on_true] if [expression] else [on_false]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [on_true] if [expression] else [on_false]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; x, y = 50, 25</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; x, y = 50, 25</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; small = x if x &lt; y else y</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; small = x if x &lt; y else y</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Before</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">syntax</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">was</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">introduced</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2.5,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">common</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">idiom</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">was</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">logical</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">operators:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">For</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">versions</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">previous</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2.5</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">answer</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">would</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'No'.</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">[expression]</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">[on_true]</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">[on_false]</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">However,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">idiom</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">unsafe,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">give</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">wrong</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">results</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">when</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*on_true*</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">has</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">false</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">boolean</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">value.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Therefore,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">always</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">better</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;...</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">...</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">else</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">...&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">form.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">Is it possible to write obfuscated one-liners in Python?</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">Is it possible to write obfuscated one-liners in Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Yes.&nbsp; Usually this is done by nesting &quot;lambda&quot; within &quot;lambda&quot;.&nbsp; See</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Yes.&nbsp; Usually this is done by nesting &quot;lambda&quot; within &quot;lambda&quot;.&nbsp; See</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the following three examples, due to Ulf Bartelt:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the following three examples, due to Ulf Bartelt:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">from</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">functools</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">import</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">reduce</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; # Primes &lt; 1000</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; # Primes &lt; 1000</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; print<span class="TextSegSigDiff">(list(</span>filter(None,map(lambda y:y*reduce(lambda x,y:x*y!=0,</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; print<span class="TextSegInsigDiff"> </span>filter(None,map(lambda y:y*reduce(lambda x,y:x*y!=0,</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; map(lambda x,y=y:y%x,range(2,int(pow(y,0.5)+1))),1),range(2,1000)))<span class="TextSegSigDiff">))</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; map(lambda x,y=y:y%x,range(2,int(pow(y,0.5)+1))),1),range(2,1000)))</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; # First 10 Fibonacci numbers</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # First 10 Fibonacci numbers</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; print<span class="TextSegSigDiff">(list(</span>map(lambda x,f=lambda x,f:(f(x-1,f)+f(x-2,f)) if x&gt;1 else 1:</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; print<span class="TextSegInsigDiff"> </span>map(lambda x,f=lambda x,f:(f(x-1,f)+f(x-2,f)) if x&gt;1 else 1:<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">f(x,f),</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">f(x,f),</span><span class="TextSegInsigDiff"> </span>range(10<span class="TextSegSigDiff">))</span>))</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; range(10))</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; # Mandelbrot set</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # Mandelbrot set</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; print(<span class="TextSegSigDiff">(</span>lambda Ru,Ro,Iu,Io,IM,Sx,Sy:reduce(lambda x,y:x+y,map(lambda y,</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; print<span class="TextSegInsigDiff"> </span>(lambda Ru,Ro,Iu,Io,IM,Sx,Sy:reduce(lambda x,y:x+y,map(lambda y,</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; Iu=Iu,Io=Io,Ru=Ru,Ro=Ro,Sy=Sy,L=lambda yc,Iu=Iu,Io=Io,Ru=Ru,Ro=Ro,i=IM,</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; Iu=Iu,Io=Io,Ru=Ru,Ro=Ro,Sy=Sy,L=lambda yc,Iu=Iu,Io=Io,Ru=Ru,Ro=Ro,i=IM,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Sx=Sx,Sy=Sy:reduce(lambda x,y:x+y,map(lambda x,xc=Ru,yc=yc,Ru=Ru,Ro=Ro,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Sx=Sx,Sy=Sy:reduce(lambda x,y:x+y,map(lambda x,xc=Ru,yc=yc,Ru=Ru,Ro=Ro,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; i=i,Sx=Sx,F=lambda xc,yc,x,y,k,f=lambda xc,yc,x,y,k,f:(k&lt;=0)or (x*x+y*y</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; i=i,Sx=Sx,F=lambda xc,yc,x,y,k,f=lambda xc,yc,x,y,k,f:(k&lt;=0)or (x*x+y*y</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;=4.0) or 1+f(xc,yc,x*x-y*y+xc,2.0*x*y+yc,k-1,f):f(xc,yc,x,y,k,f):chr(</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;=4.0) or 1+f(xc,yc,x*x-y*y+xc,2.0*x*y+yc,k-1,f):f(xc,yc,x,y,k,f):chr(</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; 64+F(Ru+x*(Ro-Ru)/Sx,yc,0,0,i)),range(Sx))):L(Iu+y*(Io-Iu)/Sy),range(Sy</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 64+F(Ru+x*(Ro-Ru)/Sx,yc,0,0,i)),range(Sx))):L(Iu+y*(Io-Iu)/Sy),range(Sy</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ))))(-2.1, 0.7, -1.2, 1.2, 30, 80, 24)<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ))))(-2.1, 0.7, -1.2, 1.2, 30, 80, 24)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; #&nbsp; &nbsp; \___ ___/&nbsp; \___ ___/&nbsp; |&nbsp;&nbsp; |&nbsp;&nbsp; |__ lines on screen</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; #&nbsp; &nbsp; \___ ___/&nbsp; \___ ___/&nbsp; |&nbsp;&nbsp; |&nbsp;&nbsp; |__ lines on screen</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #&nbsp; &nbsp; &nbsp; &nbsp; V&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; V&nbsp; &nbsp; &nbsp; |&nbsp;&nbsp; |______ columns on screen</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #&nbsp; &nbsp; &nbsp; &nbsp; V&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; V&nbsp; &nbsp; &nbsp; |&nbsp;&nbsp; |______ columns on screen</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #&nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp; &nbsp; |__________ maximum of &quot;iterations&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #&nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp; &nbsp; |__________ maximum of &quot;iterations&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #&nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |_________________ range on y axis</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #&nbsp; &nbsp; &nbsp; &nbsp; |&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |_________________ range on y axis</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; #&nbsp; &nbsp; &nbsp; &nbsp; |____________________________ range on x axis</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; #&nbsp; &nbsp; &nbsp; &nbsp; |____________________________ range on x axis</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Don't try this at home, kids!</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Don't try this at home, kids!</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Numbers and strings</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Numbers and strings</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I specify hexadecimal and octal integers?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I specify hexadecimal and octal integers?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To specify an octal digit, precede the octal value with a zero, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To specify an octal digit, precede the octal value with a zero, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">then a lower or uppercase &quot;o&quot;.&nbsp; For example, to set the variable &quot;a&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">then a lower or uppercase &quot;o&quot;.&nbsp; For example, to set the variable &quot;a&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to the octal value &quot;10&quot; (8 in decimal), type:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to the octal value &quot;10&quot; (8 in decimal), type:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = 0o10</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = 0o10</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 8</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 8</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Hexadecimal is just as easy.&nbsp; Simply precede the hexadecimal number</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Hexadecimal is just as easy.&nbsp; Simply precede the hexadecimal number</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">with a zero, and then a lower or uppercase &quot;x&quot;.&nbsp; Hexadecimal digits</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">with a zero, and then a lower or uppercase &quot;x&quot;.&nbsp; Hexadecimal digits</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">can be specified in lower or uppercase.&nbsp; For example, in the Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">can be specified in lower or uppercase.&nbsp; For example, in the Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">interpreter:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interpreter:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = 0xa5</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = 0xa5</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 165</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 165</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; b = 0XB2</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; b = 0XB2</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; b</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; b</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 178</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 178</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why does -22 // 10 return -3?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why does -22 // 10 return -3?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It's primarily driven by the desire that &quot;i % j&quot; have the same sign as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It's primarily driven by the desire that &quot;i % j&quot; have the same sign as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;j&quot;. If you want that, and also want:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;j&quot;. If you want that, and also want:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; i == (i // j) * j + (i % j)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; i == (i // j) * j + (i % j)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">then integer division has to return the floor.&nbsp; C also requires that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">then integer division has to return the floor.&nbsp; C also requires that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">identity to hold, and then compilers that truncate &quot;i // j&quot; need to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">identity to hold, and then compilers that truncate &quot;i // j&quot; need to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">make &quot;i % j&quot; have the same sign as &quot;i&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">make &quot;i % j&quot; have the same sign as &quot;i&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There are few real use cases for &quot;i % j&quot; when &quot;j&quot; is negative.&nbsp; When</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There are few real use cases for &quot;i % j&quot; when &quot;j&quot; is negative.&nbsp; When</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;j&quot; is positive, there are many, and in virtually all of them it's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;j&quot; is positive, there are many, and in virtually all of them it's</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">more useful for &quot;i % j&quot; to be &quot;&gt;= 0&quot;.&nbsp; If the clock says 10 now, what</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">more useful for &quot;i % j&quot; to be &quot;&gt;= 0&quot;.&nbsp; If the clock says 10 now, what</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">did it say 200 hours ago?&nbsp; &quot;-190 % 12 == 2&quot; is useful; &quot;-190 % 12 ==</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">did it say 200 hours ago?&nbsp; &quot;-190 % 12 == 2&quot; is useful; &quot;-190 % 12 ==</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-10&quot; is a bug waiting to bite.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-10&quot; is a bug waiting to bite.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Note:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">On</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">/</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">b&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">returns</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">same</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">//</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">b&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">&quot;__future__.division&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">effect.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">This</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">also</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">known</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">&quot;classic&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">division.</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I convert a string to a number?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I convert a string to a number?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For integers, use the built-in &quot;int()&quot; type constructor, e.g.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For integers, use the built-in &quot;int()&quot; type constructor, e.g.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;int('144') == 144&quot;.&nbsp; Similarly, &quot;float()&quot; converts to floating-point,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;int('144') == 144&quot;.&nbsp; Similarly, &quot;float()&quot; converts to floating-point,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">e.g. &quot;float('144') == 144.0&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">e.g. &quot;float('144') == 144.0&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">By default, these interpret the number as decimal, so that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">By default, these interpret the number as decimal, so that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;int('0144') == 144&quot; and &quot;int('0x144')&quot; raises &quot;ValueError&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;int('0144') == 144&quot; and &quot;int('0x144')&quot; raises &quot;ValueError&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;int(string, base)&quot; takes the base to convert from as a second</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;int(string, base)&quot; takes the base to convert from as a second</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">optional argument, so &quot;int('0x144', 16) == 324&quot;.&nbsp; If the base is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">optional argument, so &quot;int('0x144', 16) == 324&quot;.&nbsp; If the base is</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">specified as 0, the number is interpreted using Python's rules: a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">specified as 0, the number is interpreted using Python's rules: a</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">leading '0<span class="TextSegSigDiff">o</span>' indicates octal, and '0x' indicates a hex number.</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">leading '0' indicates octal, and '0x' indicates a hex number.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Do not use the built-in function &quot;eval()&quot; if all you need is to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Do not use the built-in function &quot;eval()&quot; if all you need is to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">convert strings to numbers.&nbsp; &quot;eval()&quot; will be significantly slower and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">convert strings to numbers.&nbsp; &quot;eval()&quot; will be significantly slower and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">it presents a security risk: someone could pass you a Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">it presents a security risk: someone could pass you a Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">expression that might have unwanted side effects.&nbsp; For example,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">expression that might have unwanted side effects.&nbsp; For example,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">someone could pass &quot;__import__('os').system(&quot;rm -rf $HOME&quot;)&quot; which</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">someone could pass &quot;__import__('os').system(&quot;rm -rf $HOME&quot;)&quot; which</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">would erase your home directory.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">would erase your home directory.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;eval()&quot; also has the effect of interpreting numbers as Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;eval()&quot; also has the effect of interpreting numbers as Python</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">expressions, so that e.g. &quot;eval('09')&quot; gives a syntax error because</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">expressions, so that e.g. &quot;eval('09')&quot; gives a syntax error because</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">Python <span class="TextSegSigDiff">do</span><span class="TextSegSigDiff">e</span>s <span class="TextSegSigDiff">no</span>t<span class="TextSegInsigDiff"> </span>a<span class="TextSegSigDiff">llow</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">lead</span>ing '0'<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span> a <span class="TextSegSigDiff">decim</span>al <span class="TextSegSigDiff">numb</span><span class="TextSegSigDiff">er</span> <span class="TextSegSigDiff">(except</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'0'</span>).</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Python <span class="TextSegSigDiff">regards</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">number</span>s <span class="TextSegSigDiff">s</span>ta<span class="TextSegSigDiff">rt</span>ing<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span> '0' a<span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">ct</span>al <span class="TextSegSigDiff">(</span><span class="TextSegSigDiff">base</span> <span class="TextSegSigDiff">8</span>).</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I convert a number to a string?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I convert a number to a string?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To convert, e.g., the number 144 to the string '144', use the built-in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To convert, e.g., the number 144 to the string '144', use the built-in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">type constructor &quot;str()&quot;.&nbsp; If you want a hexadecimal or octal</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">type constructor &quot;str()&quot;.&nbsp; If you want a hexadecimal or octal</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">representation, use the built-in functions &quot;hex()&quot; or &quot;oct()&quot;.&nbsp; For</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">representation, use the built-in functions &quot;hex()&quot; or &quot;oct()&quot;.&nbsp; For</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">fancy formatting, see the Format<span class="TextSegSigDiff">ted</span> <span class="TextSegInsigDiff">s</span>tring <span class="TextSegSigDiff">literal</span><span class="TextSegInsigDiff">s</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Format</span> <span class="TextSegInsigDiff">S</span>t<span class="TextSegSigDiff">r</span>i<span class="TextSegSigDiff">n</span>g</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">fancy formatting, see the Format <span class="TextSegInsigDiff">S</span>tring <span class="TextSegInsigDiff">S</span><span class="TextSegSigDiff">y</span><span class="TextSegSigDiff">nt</span><span class="TextSegSigDiff">ax</span> <span class="TextSegInsigDiff">s</span><span class="TextSegSigDiff">ec</span>ti<span class="TextSegSigDiff">on,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">e.</span>g<span class="TextSegSigDiff">.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Syntax</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sections,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">e.g.</span><span class="TextSegInsigDiff"> </span>&quot;&quot;{:04d}&quot;.format(144)&quot; yields &quot;'0144'&quot; and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&quot;&quot;{:04d}&quot;.format(144)&quot; yields &quot;'0144'&quot; and<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;&quot;{:.3f}&quot;.format(1/3)&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;&quot;{:.3f}&quot;.format(1.0/3.0)&quot;</span><span class="TextSegInsigDiff"> </span>yields &quot;'0.333'&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">yields &quot;'0.333'&quot;.<span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">You</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">may</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">also</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">%</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">operator</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">strings.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">See</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">library</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">reference</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">manual</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">details.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I modify a string in place?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I modify a string in place?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------------------</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">You can't, because strings are immutable.&nbsp; In <span class="TextSegSigDiff">m</span><span class="TextSegSigDiff">os</span>t <span class="TextSegSigDiff">s</span>it<span class="TextSegSigDiff">uations,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">You can't, because strings are immutable.&nbsp; I<span class="TextSegSigDiff">f</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span>n<span class="TextSegSigDiff">eed</span> <span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">objec</span>t <span class="TextSegSigDiff">w</span>it<span class="TextSegSigDiff">h</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">s<span class="TextSegSigDiff">hould</span> <span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">impl</span><span class="TextSegSigDiff">y</span> con<span class="TextSegSigDiff">struct</span> <span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">new</span> string <span class="TextSegSigDiff">from</span> t<span class="TextSegSigDiff">he</span> <span class="TextSegSigDiff">vario</span>us <span class="TextSegSigDiff">p</span>ar<span class="TextSegSigDiff">ts</span><span class="TextSegInsigDiff"> </span>y<span class="TextSegSigDiff">ou</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">want</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">thi</span>s <span class="TextSegSigDiff">abi</span><span class="TextSegSigDiff">lity,</span> <span class="TextSegSigDiff">try</span><span class="TextSegInsigDiff"> </span>con<span class="TextSegSigDiff">ver</span><span class="TextSegSigDiff">ting</span> <span class="TextSegSigDiff">th</span><span class="TextSegSigDiff">e</span> string <span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">o</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">lis</span>t <span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">r</span><span class="TextSegInsigDiff"> </span>us<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span>ar<span class="TextSegSigDiff">ra</span>y</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">assemble</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">from.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">However,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">need</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">object</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ability</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">modify</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in-place</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">unicode</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">data,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">try</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;io.StringIO&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">object</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;array&quot;</span><span class="TextSegInsigDiff"> </span>module:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">module:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import io</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import io</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; s = &quot;Hello, world&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; s = &quot;Hello, world&quot;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sio</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">io.StringIO(s)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; s<span class="TextSegSigDiff">io.getvalue(</span>)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">li</span>s<span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">(s</span>)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">'Hello,</span> <span class="TextSegSigDiff">world'</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">p</span><span class="TextSegSigDiff">rint</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">sio.seek(7)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">['H',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'e',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'l',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'l',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'o',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">',',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'w',</span> <span class="TextSegSigDiff">'</span><span class="TextSegSigDiff">o',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'r',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'l',</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'d']</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">7</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; s<span class="TextSegSigDiff">io.write</span>(&quot;there!&quot;)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">a[7:]</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">li</span>s<span class="TextSegSigDiff">t</span>(&quot;there!&quot;)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">6</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">io.getvalue(</span>)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">''.join(</span><span class="TextSegSigDiff">a</span>)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; 'Hello, there!'</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; 'Hello, there!'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import array</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import array</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; a = array.array('<span class="TextSegSigDiff">u</span>', s)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; a = array.array('<span class="TextSegSigDiff">c</span>', s)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(a)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; array('<span class="TextSegSigDiff">u</span>', 'Hello, world')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; array('<span class="TextSegSigDiff">c</span>', 'Hello, world')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; a[0] = 'y'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; a[0] = 'y'<span class="TextSegSigDiff">;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">print</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">print(a)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; array('<span class="TextSegSigDiff">u</span>', 'yello, world')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; array('<span class="TextSegSigDiff">c</span>', 'yello, world')</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; a.to<span class="TextSegSigDiff">u</span><span class="TextSegSigDiff">nicode</span>()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; a.to<span class="TextSegSigDiff">string</span>()</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; 'yello, world'</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; 'yello, world'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I use strings to call functions/methods?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I use strings to call functions/methods?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There are various techniques.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There are various techniques.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* The best is to use a dictionary that maps strings to functions.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* The best is to use a dictionary that maps strings to functions.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; The primary advantage of this technique is that the strings do not</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; The primary advantage of this technique is that the strings do not</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; need to match the names of the functions.&nbsp; This is also the primary</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; need to match the names of the functions.&nbsp; This is also the primary</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; technique used to emulate a case construct:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; technique used to emulate a case construct:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; def a():</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; def a():</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; pass</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; pass</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; def b():</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; def b():</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; pass</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; pass</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; dispatch = {'go': a, 'stop': b}&nbsp; # Note lack of parens for funcs</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; dispatch = {'go': a, 'stop': b}&nbsp; # Note lack of parens for funcs</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; dispatch[get_input()]()&nbsp; # Note trailing parens to call function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; dispatch[get_input()]()&nbsp; # Note trailing parens to call function</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Use the built-in function &quot;getattr()&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Use the built-in function &quot;getattr()&quot;:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; import foo</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; import foo</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; getattr(foo, 'bar')()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; getattr(foo, 'bar')()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; Note that &quot;getattr()&quot; works on any object, including classes, class</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; Note that &quot;getattr()&quot; works on any object, including classes, class</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; instances, modules, and so on.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; instances, modules, and so on.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; This is used in several places in the standard library, like this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; This is used in several places in the standard library, like this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; class Foo:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; class Foo:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; def do_foo(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; def do_foo(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; def do_bar(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; def do_bar(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; f = getattr(foo_instance, 'do_' + opname)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; f = getattr(foo_instance, 'do_' + opname)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; f()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; f()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Use &quot;locals()&quot; or &quot;eval()&quot; to resolve the function name:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Use &quot;locals()&quot; or &quot;eval()&quot; to resolve the function name:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; def myFunc():</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; def myFunc():</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>&quot;hello&quot;<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegInsigDiff"> </span>&quot;hello&quot;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; fname = &quot;myFunc&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; fname = &quot;myFunc&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; f = locals()[fname]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; f = locals()[fname]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; f()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; f()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; f = eval(fname)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; f = eval(fname)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; f()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; f()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; Note: Using &quot;eval()&quot; is slow and dangerous.&nbsp; If you don't have</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; Note: Using &quot;eval()&quot; is slow and dangerous.&nbsp; If you don't have</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; absolute control over the contents of the string, someone could pass</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; absolute control over the contents of the string, someone could pass</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; a string that resulted in an arbitrary function being executed.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; a string that resulted in an arbitrary function being executed.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Is there an equivalent to Perl's chomp() for removing trailing newlines from strings?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Is there an equivalent to Perl's chomp() for removing trailing newlines from strings?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------------------------------------------------------------</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">Y</span>ou can use &quot;S.rstrip(&quot;\r\n&quot;)&quot; to remove all<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">occurrences</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">any</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">line</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Starting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2.2,</span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff">y</span>ou can use &quot;S.rstrip(&quot;\r\n&quot;)&quot; to remove all</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">terminator from the end of the string &quot;S&quot;<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">without</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">removing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">other</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">occurrences</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">any</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">line</span><span class="TextSegInsigDiff"> </span>terminator from the end of the string &quot;S&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">trailing whitespace.&nbsp; If the string &quot;S&quot;<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">represents</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">more</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">than</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">one</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">line,</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">wi</span>t<span class="TextSegSigDiff">hout</span><span class="TextSegInsigDiff"> </span>r<span class="TextSegSigDiff">emoving</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">other</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tr</span>ailing whitespace.&nbsp; If the string &quot;S&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">with several empty lines at the end,<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">line</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">terminators</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">all</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">represents</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">more</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">than</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">one</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">line,</span><span class="TextSegInsigDiff"> </span>with several empty lines at the end,</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">blank lines will be removed:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">line</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">terminators</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">all</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span>blank lines will be removed:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; lines = (&quot;line 1 \r\n&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; lines = (&quot;line 1 \r\n&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;\r\n&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;\r\n&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;\r\n&quot;)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &quot;\r\n&quot;)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; lines.rstrip(&quot;\n\r&quot;)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; lines.rstrip(&quot;\n\r&quot;)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'line 1 '</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'line 1 '</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Since this is typically only desired when reading text one line at a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Since this is typically only desired when reading text one line at a</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">time, using &quot;S.rstrip()&quot; this way works well.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">time, using &quot;S.rstrip()&quot; this way works well.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">For</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">older</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">versions</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">there</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">two</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">partial</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">substitutes:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">want</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">remove</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">all</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">trailing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">whitespace,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;rstrip()&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">method</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">string</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">objects.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">This</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">removes</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">all</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">trailing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">whitespace,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">just</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">single</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">newline.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Otherwise,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">there</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">only</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">one</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">line</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">string</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;S&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">&quot;S.splitlines()[0]&quot;.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Is there a scanf() or sscanf() equivalent?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Is there a scanf() or sscanf() equivalent?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Not as such.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Not as such.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For simple input parsing, the easiest approach is usually to split the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For simple input parsing, the easiest approach is usually to split the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">line into whitespace-delimited words using the &quot;split()&quot; method of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">line into whitespace-delimited words using the &quot;split()&quot; method of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">string objects and then convert decimal strings to numeric values</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">string objects and then convert decimal strings to numeric values</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">using &quot;int()&quot; or &quot;float()&quot;.&nbsp; &quot;split()&quot; supports an optional &quot;sep&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">using &quot;int()&quot; or &quot;float()&quot;.&nbsp; &quot;split()&quot; supports an optional &quot;sep&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">parameter which is useful if the line uses something other than</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">parameter which is useful if the line uses something other than</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">whitespace as a separator.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">whitespace as a separator.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For more complicated input parsing, regular expressions are more</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For more complicated input parsing, regular expressions are more</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">powerful than C's &quot;sscanf()&quot; and better suited for the task.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">powerful than C's &quot;sscanf()&quot; and better suited for the task.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">What does 'Unicode<span class="TextSegSigDiff">Decode</span>Error<span class="TextSegSigDiff">'</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">'Uni</span>code<span class="TextSegSigDiff">E</span>ncod<span class="TextSegSigDiff">e</span><span class="TextSegInsigDiff">E</span>rror<span class="TextSegSigDiff">'</span> <span class="TextSegSigDiff">err</span><span class="TextSegSigDiff">o</span>r<span class="TextSegInsigDiff">&nbsp;</span> mean?</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">What does 'UnicodeError<span class="TextSegSigDiff">:</span> <span class="TextSegSigDiff">ASCII</span> <span class="TextSegSigDiff">[de</span>cod<span class="TextSegSigDiff">ing,</span>encod<span class="TextSegSigDiff">ing]</span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff">e</span>rror<span class="TextSegSigDiff">:</span> <span class="TextSegSigDiff">ordinal</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span>r<span class="TextSegSigDiff">ange(128)'</span> mean?</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">-------------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">-------------------------------------------------------------------<span class="TextSegSigDiff">-----------------------</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">See</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Unicode</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">HOWTO.</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Performance</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">===========</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">My</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">program</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">too</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">slow.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">How</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">I</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">speed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">up?</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">---------------------------------------------</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">That<span class="TextSegSigDiff">'</span>s <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">t</span>ou<span class="TextSegSigDiff">g</span>h<span class="TextSegInsigDiff"> </span>on<span class="TextSegSigDiff">e,</span> in<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">gener</span>al<span class="TextSegSigDiff">.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">First,</span> <span class="TextSegSigDiff">here</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">list</span> o<span class="TextSegSigDiff">f</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">things</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">Th<span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">error</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">indic</span>at<span class="TextSegSigDiff">e</span>s <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">y</span>ou<span class="TextSegSigDiff">r</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Pyt</span>hon in<span class="TextSegSigDiff">st</span>al<span class="TextSegSigDiff">lat</span><span class="TextSegSigDiff">ion</span> <span class="TextSegSigDiff">c</span><span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">handle</span> o<span class="TextSegSigDiff">nly</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">remember</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">before</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">diving</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">further:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">7-bit</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ASCII</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">strings.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">There</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">couple</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ways</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fix</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">work</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">around</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Performance</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">characteristics</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">vary</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">across</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">implementations.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">This</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">FAQ</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">focusses</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">*CPython*.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">problem.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Behaviour</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">vary</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">across</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">operating</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">systems,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">especially</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">when</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">talking</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">about</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">I/O</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">multi-threading.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span> <span class="TextSegInsigDiff">Y</span>ou s<span class="TextSegSigDiff">hould</span> a<span class="TextSegSigDiff">lways</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fi</span>nd<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">th</span>e <span class="TextSegSigDiff">hot</span> <span class="TextSegSigDiff">spots</span><span class="TextSegInsigDiff"> </span>in y<span class="TextSegSigDiff">our</span> <span class="TextSegSigDiff">p</span><span class="TextSegSigDiff">rogram</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">*befo</span>r<span class="TextSegSigDiff">e*</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span> <span class="TextSegInsigDiff">y</span>ou<span class="TextSegSigDiff">r</span> <span class="TextSegSigDiff">program</span>s<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">must</span> <span class="TextSegSigDiff">h</span>and<span class="TextSegSigDiff">l</span>e <span class="TextSegSigDiff">data</span> in <span class="TextSegSigDiff">arbitrar</span>y <span class="TextSegSigDiff">char</span><span class="TextSegSigDiff">act</span><span class="TextSegSigDiff">e</span>r<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">set</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">attempting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">optimize</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">any</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(see</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;profile&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module).</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Writ</span>ing <span class="TextSegSigDiff">b</span>en<span class="TextSegSigDiff">ch</span><span class="TextSegSigDiff">mark</span> <span class="TextSegSigDiff">scripts</span> <span class="TextSegSigDiff">w</span><span class="TextSegSigDiff">ill</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">allow</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">it</span>era<span class="TextSegSigDiff">te</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">quick</span>ly<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">when</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">encod</span>ing<span class="TextSegSigDiff">s,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span> en<span class="TextSegSigDiff">vironment</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">applic</span><span class="TextSegSigDiff">ation</span> <span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">uns</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">gen</span>era<span class="TextSegSigDiff">l</span>ly</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">searching</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">improvements</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(see</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;timeit&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module).</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">It</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">highly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">recommended</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">good</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">coverage</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(through</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">unit</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">tes</span>ti<span class="TextSegSigDiff">ng</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span>y <span class="TextSegSigDiff">o</span>the<span class="TextSegSigDiff">r</span> <span class="TextSegSigDiff">t</span>e<span class="TextSegSigDiff">ch</span><span class="TextSegSigDiff">nique)</span> <span class="TextSegSigDiff">before</span> <span class="TextSegSigDiff">po</span>te<span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">ially</span> in<span class="TextSegSigDiff">troduc</span>ing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">id</span><span class="TextSegSigDiff">en</span>ti<span class="TextSegSigDiff">f</span>y the e<span class="TextSegSigDiff">ncoding</span> <span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">f</span> t<span class="TextSegSigDiff">h</span>e<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">data</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span> i<span class="TextSegSigDiff">s</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ha</span>n<span class="TextSegSigDiff">d</span>ing<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">You</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">need</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">regressions</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">hidden</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sophisticated</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">optimizations.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">T</span><span class="TextSegSigDiff">hat</span> <span class="TextSegSigDiff">be</span>in<span class="TextSegSigDiff">g</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">said,</span> t<span class="TextSegSigDiff">here</span> <span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">many</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tr</span>ic<span class="TextSegSigDiff">ks</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">t</span>o <span class="TextSegSigDiff">spee</span>d u<span class="TextSegSigDiff">p</span> <span class="TextSegSigDiff">Py</span>th<span class="TextSegSigDiff">o</span>n<span class="TextSegInsigDiff"> </span>cod<span class="TextSegSigDiff">e</span>.&nbsp; <span class="TextSegSigDiff">Her</span>e</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">conver</span><span class="TextSegInsigDiff">t</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span> in<span class="TextSegSigDiff">put</span> t<span class="TextSegSigDiff">o</span> <span class="TextSegSigDiff">U</span><span class="TextSegSigDiff">n</span>ico<span class="TextSegSigDiff">de</span> d<span class="TextSegSigDiff">ata</span> u<span class="TextSegSigDiff">sing</span> th<span class="TextSegSigDiff">at</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">e</span>ncod<span class="TextSegSigDiff">ing</span>.<span class="TextSegInsigDiff">&nbsp;</span> <span class="TextSegSigDiff">For</span> <span class="TextSegSigDiff">exampl</span>e<span class="TextSegSigDiff">,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">so</span><span class="TextSegSigDiff">me</span> <span class="TextSegSigDiff">general</span> <span class="TextSegSigDiff">princip</span>les <span class="TextSegSigDiff">wh</span><span class="TextSegSigDiff">ich</span> <span class="TextSegSigDiff">g</span>o <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">long</span> w<span class="TextSegSigDiff">a</span>y <span class="TextSegSigDiff">towards</span> r<span class="TextSegSigDiff">e</span>ac<span class="TextSegSigDiff">hing</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">pr</span><span class="TextSegSigDiff">ogram</span> <span class="TextSegSigDiff">th</span><span class="TextSegSigDiff">at</span> <span class="TextSegSigDiff">ha</span><span class="TextSegSigDiff">nd</span>les <span class="TextSegSigDiff">email</span> o<span class="TextSegSigDiff">r</span> <span class="TextSegSigDiff">web</span> <span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">nput</span> w<span class="TextSegSigDiff">ill</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">typicall</span>y <span class="TextSegSigDiff">fin</span><span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">cha</span>rac<span class="TextSegSigDiff">ter</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">acceptable</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">performance</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">levels:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Making</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">algorithms</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">faster</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">changing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">faster</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ones)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">yiel</span><span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">mu</span><span class="TextSegInsigDiff">c</span>h<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">larg</span>er <span class="TextSegSigDiff">benefit</span>s <span class="TextSegSigDiff">th</span>an t<span class="TextSegSigDiff">rying</span> <span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sprinkl</span>e<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">micro-</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">set</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">encoding</span> <span class="TextSegSigDiff">information</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff">C</span><span class="TextSegSigDiff">ontent-Type</span><span class="TextSegInsigDiff"> </span>h<span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">ad</span>er<span class="TextSegSigDiff">s.</span>&nbsp;<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Th</span><span class="TextSegSigDiff">i</span>s <span class="TextSegSigDiff">c</span>an t<span class="TextSegSigDiff">he</span><span class="TextSegSigDiff">n</span> <span class="TextSegSigDiff">b</span>e</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">optimization</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tricks</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">all</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">over</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff">U</span>se t<span class="TextSegSigDiff">h</span><span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">igh</span>t data <span class="TextSegSigDiff">str</span><span class="TextSegInsigDiff">u</span><span class="TextSegSigDiff">ctures</span>.&nbsp;<span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff">S</span><span class="TextSegSigDiff">tudy</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">documentation</span> <span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span>the <span class="TextSegSigDiff">Bu</span><span class="TextSegSigDiff">ilt-</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">u</span>se<span class="TextSegSigDiff">d</span> t<span class="TextSegSigDiff">o</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">properly</span> <span class="TextSegSigDiff">convert</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">inpu</span>t data <span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff">U</span><span class="TextSegSigDiff">nicod</span><span class="TextSegSigDiff">e</span>. <span class="TextSegSigDiff">As</span><span class="TextSegInsigDiff">s</span><span class="TextSegSigDiff">u</span><span class="TextSegSigDiff">m</span><span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">ng</span> the <span class="TextSegSigDiff">string</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Types</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;collections&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">referred</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">by</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;value&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">encoded</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">UTF-8:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">When</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">standard</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">library</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">provides</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">primitive</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">doing</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">something,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">likely</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(although</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">guaranteed)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">faster</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">than</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">any</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">alternative</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">may</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">come</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">up</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">This</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">doubly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">true</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">primitives</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">written</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">C,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">such</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">builtins</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">some</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">extension</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">types.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">For</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">example,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sure</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">either</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;list.sort()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">built-in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">method</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">related</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;sorted()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">function</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">do</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sorting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">see</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Sorting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">HOW</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">TO</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">examples</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">moderately</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">advanced</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">usage).</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">value</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">unicode(value,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;utf-8&quot;)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Abstractions</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tend</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">create</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">indirections</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">force</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">interpreter</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">work</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">more.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">levels</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">indirection</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">outweigh</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">amount</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">useful</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">work</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">done,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">program</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">slower.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">You</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">should</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">avoid</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp; </span>e<span class="TextSegSigDiff">xcessive</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">abs</span>tr<span class="TextSegSigDiff">action,</span> <span class="TextSegSigDiff">especially</span> <span class="TextSegInsigDiff">u</span>n<span class="TextSegSigDiff">d</span><span class="TextSegSigDiff">er</span> the <span class="TextSegSigDiff">f</span><span class="TextSegSigDiff">orm</span> <span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tin</span>y <span class="TextSegSigDiff">fu</span>nc<span class="TextSegSigDiff">tion</span>s</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">r</span>et<span class="TextSegSigDiff">u</span>r<span class="TextSegSigDiff">n</span> <span class="TextSegSigDiff">a</span> <span class="TextSegInsigDiff">U</span>n<span class="TextSegSigDiff">icode</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">object.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">If</span> the <span class="TextSegSigDiff">data</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">correctl</span>y <span class="TextSegSigDiff">e</span>nc<span class="TextSegSigDiff">oded</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span>s</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">methods</span> <span class="TextSegSigDiff">(which</span> <span class="TextSegSigDiff">ar</span>e a<span class="TextSegSigDiff">lso</span> <span class="TextSegSigDiff">often</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">detrimental</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">eadability)</span>.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">UTF-8,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">above</span> <span class="TextSegSigDiff">call</span> <span class="TextSegSigDiff">w</span><span class="TextSegSigDiff">ill</span> <span class="TextSegSigDiff">rais</span>e a <span class="TextSegSigDiff">&quot;Unicod</span><span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">Err</span><span class="TextSegSigDiff">or&quot;</span> <span class="TextSegSigDiff">except</span><span class="TextSegSigDiff">ion</span>.</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">reached</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">limit</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">what</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pure</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">allow,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">there</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">tools</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">take</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">further</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">away.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">For</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">example,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Cython</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">compile</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">slight</span>ly <span class="TextSegSigDiff">modified</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">Pyth</span>o<span class="TextSegSigDiff">n</span><span class="TextSegInsigDiff"> </span>code <span class="TextSegSigDiff">into</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">C</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">extensi</span>on<span class="TextSegSigDiff">,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span>ly <span class="TextSegSigDiff">want</span> <span class="TextSegSigDiff">str</span><span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">ngs</span> <span class="TextSegSigDiff">converted</span> <span class="TextSegSigDiff">t</span>o<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Uni</span>code <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">n</span>on<span class="TextSegSigDiff">-</span><span class="TextSegSigDiff">AS</span><span class="TextSegSigDiff">CII</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span>d <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">m</span>any <span class="TextSegSigDiff">diff</span>er<span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">n</span>t <span class="TextSegSigDiff">platforms.</span>&nbsp;<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Cython</span> <span class="TextSegSigDiff">c</span>an <span class="TextSegSigDiff">tak</span>e<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">dvantage</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">d<span class="TextSegSigDiff">ata,</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">c</span>an<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tr</span>y <span class="TextSegSigDiff">conv</span>er<span class="TextSegSigDiff">ting</span><span class="TextSegInsigDiff"> </span>t<span class="TextSegSigDiff">hem</span> <span class="TextSegSigDiff">fir</span><span class="TextSegSigDiff">st</span> <span class="TextSegSigDiff">assuming</span> an <span class="TextSegSigDiff">ASCII</span><span class="TextSegInsigDiff"> </span>e<span class="TextSegSigDiff">ncodi</span><span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">g,</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">compilation</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">optional</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">type</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">annotations)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">make</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">code</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">signific</span>an<span class="TextSegSigDiff">tly</span> <span class="TextSegSigDiff">fas</span>te<span class="TextSegSigDiff">r</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tha</span>n <span class="TextSegSigDiff">when</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">int</span>er<span class="TextSegSigDiff">pre</span>te<span class="TextSegSigDiff">d.</span>&nbsp; <span class="TextSegInsigDiff">I</span>f <span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">con</span>f<span class="TextSegSigDiff">ident</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">an<span class="TextSegSigDiff">d</span> t<span class="TextSegSigDiff">h</span>en <span class="TextSegSigDiff">g</span><span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">n</span>er<span class="TextSegSigDiff">a</span>te<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">objects</span> <span class="TextSegInsigDiff">i</span>f <span class="TextSegSigDiff">th</span><span class="TextSegSigDiff">at</span> f<span class="TextSegSigDiff">ails:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">C</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">programming</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">skills,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">also</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">write</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">C</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">extension</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">y<span class="TextSegSigDiff">ourself.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">tr</span>y<span class="TextSegSigDiff">:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">x</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">unicode(value,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;ascii&quot;)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">See</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">also:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">wiki</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pag</span>e<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">devoted</span> <span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">o</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pe</span><span class="TextSegSigDiff">rf</span>or<span class="TextSegSigDiff">mance</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tips.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff"> </span>e<span class="TextSegSigDiff">xcep</span><span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">UnicodeErr</span>or<span class="TextSegSigDiff">:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">value</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">unicode(value,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;utf-8&quot;)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">else:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">What</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">most</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">efficient</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">way</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">concat</span><span class="TextSegSigDiff">en</span><span class="TextSegSigDiff">ate</span> <span class="TextSegSigDiff">many</span> <span class="TextSegSigDiff">strings</span> <span class="TextSegSigDiff">together?</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;</span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">v</span><span class="TextSegSigDiff">alue</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">was</span> <span class="TextSegSigDiff">valid</span> <span class="TextSegSigDiff">ASCII</span> <span class="TextSegSigDiff">data</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">--------------------------------------------------------------------</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">pass</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;str&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;bytes&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">objects</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">immutable,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">therefore</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">concatenating</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">many</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">strings</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">together</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">inefficient</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">each</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">concatenation</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">creates</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">new</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">o<span class="TextSegSigDiff">bject.</span><span class="TextSegInsigDiff">&nbsp;</span> <span class="TextSegSigDiff">In</span><span class="TextSegInsigDiff"> </span>t<span class="TextSegSigDiff">he</span> <span class="TextSegSigDiff">general</span> <span class="TextSegSigDiff">case,</span> <span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tota</span><span class="TextSegSigDiff">l</span> <span class="TextSegSigDiff">runtime</span><span class="TextSegInsigDiff"> </span>co<span class="TextSegSigDiff">st</span> i<span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">quadrati</span>c<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">It's</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">p</span>o<span class="TextSegSigDiff">ssible</span> t<span class="TextSegSigDiff">o</span> <span class="TextSegSigDiff">set</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">d</span><span class="TextSegSigDiff">ef</span><span class="TextSegSigDiff">ault</span> <span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">n</span>co<span class="TextSegSigDiff">ding</span> i<span class="TextSegSigDiff">n</span> <span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">f</span><span class="TextSegSigDiff">ile</span><span class="TextSegInsigDiff"> </span>c<span class="TextSegSigDiff">alled</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">total</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">string</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">length.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;sitecustomize.py&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that's</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">part</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">library.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">However,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">T</span><span class="TextSegSigDiff">o</span> <span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">ccumulat</span>e<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">many</span> <span class="TextSegSigDiff">&quot;str&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">obj</span>ec<span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">s,</span> the <span class="TextSegSigDiff">rec</span><span class="TextSegSigDiff">ommen</span>de<span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">idiom</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span>t<span class="TextSegSigDiff">o</span> <span class="TextSegSigDiff">place</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">isn'</span><span class="TextSegInsigDiff">t</span> <span class="TextSegSigDiff">recomm</span>e<span class="TextSegSigDiff">nded</span> <span class="TextSegSigDiff">b</span>ec<span class="TextSegSigDiff">ause</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">changing</span> the <span class="TextSegSigDiff">Pytho</span><span class="TextSegSigDiff">n-wi</span>de <span class="TextSegSigDiff">defaul</span>t <span class="TextSegSigDiff">en</span><span class="TextSegSigDiff">coding</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span>m <span class="TextSegSigDiff">into</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">l</span><span class="TextSegSigDiff">is</span><span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">a</span>n<span class="TextSegSigDiff">d</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">call</span> <span class="TextSegSigDiff">&quot;str.join()&quot;</span> <span class="TextSegSigDiff">at</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">end:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">m<span class="TextSegSigDiff">ay</span> <span class="TextSegSigDiff">c</span><span class="TextSegSigDiff">ause</span> <span class="TextSegSigDiff">third-party</span> <span class="TextSegSigDiff">extensio</span>n<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">modu</span><span class="TextSegSigDiff">les</span> <span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">o</span> <span class="TextSegSigDiff">fail.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">chunks</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">[]</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">s</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">my_strings:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">chunks.append(s)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">result</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">''.join(chunks)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Note</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Windows,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">there</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">encoding</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">known</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;mbcs&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">which</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">uses</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">(</span>an<span class="TextSegSigDiff">other</span> <span class="TextSegSigDiff">reaso</span><span class="TextSegSigDiff">nably</span> <span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">ff</span>ic<span class="TextSegSigDiff">i</span>ent <span class="TextSegSigDiff">idiom</span> <span class="TextSegInsigDiff">i</span><span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">u</span>se <span class="TextSegSigDiff">&quot;io.StringIO&quot;)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">an <span class="TextSegSigDiff">encoding</span> <span class="TextSegSigDiff">specif</span>ic<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">curr</span>ent <span class="TextSegSigDiff">l</span><span class="TextSegSigDiff">ocale.</span><span class="TextSegInsigDiff">&nbsp;</span> <span class="TextSegInsigDiff">I</span><span class="TextSegSigDiff">n</span> <span class="TextSegSigDiff">many</span> <span class="TextSegSigDiff">ca</span>se<span class="TextSegSigDiff">s,</span> <span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">nd</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">particularly</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">when</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">working</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">COM,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">may</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">appropriate</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">default</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">To</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">accumulate</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">many</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;bytes&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">objects,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">recommended</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">idiom</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">extend</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;bytearray&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">object</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in-place</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">concatenation</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;+=&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">operator):</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">encoding</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">result</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">bytearray()</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">b</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">my_bytes_objects:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">result</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">+=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">b</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Sequences (Tuples/Lists)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Sequences (Tuples/Lists)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">========================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">========================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I convert between tuples and lists?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I convert between tuples and lists?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The type constructor &quot;tuple(seq)&quot; converts any sequence (actually, any</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The type constructor &quot;tuple(seq)&quot; converts any sequence (actually, any</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">iterable) into a tuple with the same items in the same order.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">iterable) into a tuple with the same items in the same order.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For example, &quot;tuple([1, 2, 3])&quot; yields &quot;(1, 2, 3)&quot; and &quot;tuple('abc')&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For example, &quot;tuple([1, 2, 3])&quot; yields &quot;(1, 2, 3)&quot; and &quot;tuple('abc')&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">yields &quot;('a', 'b', 'c')&quot;.&nbsp; If the argument is a tuple, it does not</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">yields &quot;('a', 'b', 'c')&quot;.&nbsp; If the argument is a tuple, it does not</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">make a copy but returns the same object, so it is cheap to call</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">make a copy but returns the same object, so it is cheap to call</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;tuple()&quot; when you aren't sure that an object is already a tuple.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;tuple()&quot; when you aren't sure that an object is already a tuple.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The type constructor &quot;list(seq)&quot; converts any sequence or iterable</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The type constructor &quot;list(seq)&quot; converts any sequence or iterable</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">into a list with the same items in the same order.&nbsp; For example,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">into a list with the same items in the same order.&nbsp; For example,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;list((1, 2, 3))&quot; yields &quot;[1, 2, 3]&quot; and &quot;list('abc')&quot; yields &quot;['a',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;list((1, 2, 3))&quot; yields &quot;[1, 2, 3]&quot; and &quot;list('abc')&quot; yields &quot;['a',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">'b', 'c']&quot;.&nbsp; If the argument is a list, it makes a copy just like</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">'b', 'c']&quot;.&nbsp; If the argument is a list, it makes a copy just like</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;seq[:]&quot; would.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;seq[:]&quot; would.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What's a negative index?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What's a negative index?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python sequences are indexed with positive numbers and negative</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python sequences are indexed with positive numbers and negative</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">numbers.&nbsp; For positive numbers 0 is the first index 1 is the second</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">numbers.&nbsp; For positive numbers 0 is the first index 1 is the second</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">index and so forth.&nbsp; For negative indices -1 is the last index and -2</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">index and so forth.&nbsp; For negative indices -1 is the last index and -2</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is the penultimate (next to last) index and so forth.&nbsp; Think of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is the penultimate (next to last) index and so forth.&nbsp; Think of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;seq[-n]&quot; as the same as &quot;seq[len(seq)-n]&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;seq[-n]&quot; as the same as &quot;seq[len(seq)-n]&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Using negative indices can be very convenient.&nbsp; For example &quot;S[:-1]&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Using negative indices can be very convenient.&nbsp; For example &quot;S[:-1]&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is all of the string except for its last character, which is useful</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is all of the string except for its last character, which is useful</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for removing the trailing newline from a string.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for removing the trailing newline from a string.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I iterate over a sequence in reverse order?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I iterate over a sequence in reverse order?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Use the &quot;reversed()&quot; built-in function, which is new in Python 2.4:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Use the &quot;reversed()&quot; built-in function, which is new in Python 2.4:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; for x in reversed(sequence):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; for x in reversed(sequence):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...&nbsp; # do something with x ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...&nbsp; # do something with x ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This won't touch your original sequence, but build a new copy with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This won't touch your original sequence, but build a new copy with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">reversed order to iterate over.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">reversed order to iterate over.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">With Python 2.3, you can use an extended slice syntax:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">With Python 2.3, you can use an extended slice syntax:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; for x in sequence[::-1]:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; for x in sequence[::-1]:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...&nbsp; # do something with x ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...&nbsp; # do something with x ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do you remove duplicates from a list?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do you remove duplicates from a list?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">See the Python Cookbook for a long discussion of many ways to do this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">See the Python Cookbook for a long discussion of many ways to do this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; https://code.activestate.com/recipes/52560/</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; https://code.activestate.com/recipes/52560/</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you don't mind reordering the list, sort it and then scan from the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you don't mind reordering the list, sort it and then scan from the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">end of the list, deleting duplicates as you go:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">end of the list, deleting duplicates as you go:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; if mylist:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; if mylist:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; mylist.sort()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; mylist.sort()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; last = mylist[-1]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; last = mylist[-1]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; for i in range(len(mylist)-2, -1, -1):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; for i in range(len(mylist)-2, -1, -1):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if last == mylist[i]:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if last == mylist[i]:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; del mylist[i]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; del mylist[i]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; last = mylist[i]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; last = mylist[i]</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">If all elements of the list may be used as <span class="TextSegSigDiff">se</span><span class="TextSegSigDiff">t</span> keys (i.e. they<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">all</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">If all elements of the list may be used as <span class="TextSegSigDiff">dictionary</span> keys (i.e. they</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span>hashable<span class="TextSegSigDiff">*</span>) this is often faster</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">all</span><span class="TextSegInsigDiff"> </span>hashable) this is often faster</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">d</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">{}</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">x</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">mylist:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">d[x]</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">1</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">mylist</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">list(d.keys())</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">In</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2.5</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">later,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">following</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">possible</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">instead:</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; mylist = list(set(mylist))</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; mylist = list(set(mylist))</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This converts the list into a set, thereby removing duplicates, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This converts the list into a set, thereby removing duplicates, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">then back into a list.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">then back into a list.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do you make an array in Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do you make an array in Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Use a list:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Use a list:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [&quot;this&quot;, 1, &quot;is&quot;, &quot;an&quot;, &quot;array&quot;]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [&quot;this&quot;, 1, &quot;is&quot;, &quot;an&quot;, &quot;array&quot;]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Lists are equivalent to C or Pascal arrays in their time complexity;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Lists are equivalent to C or Pascal arrays in their time complexity;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the primary difference is that a Python list can contain objects of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the primary difference is that a Python list can contain objects of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">many different types.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">many different types.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;array&quot; module also provides methods for creating arrays of fixed</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;array&quot; module also provides methods for creating arrays of fixed</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">types with compact representations, but they are slower to index than</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">types with compact representations, but they are slower to index than</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">lists.&nbsp; Also note that the Numeric extensions and others define array-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">lists.&nbsp; Also note that the Numeric extensions and others define array-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">like structures with various characteristics as well.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">like structures with various characteristics as well.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To get Lisp-style linked lists, you can emulate cons cells using</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To get Lisp-style linked lists, you can emulate cons cells using</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">tuples:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">tuples:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; lisp_list = (&quot;like&quot;,&nbsp; (&quot;this&quot;,&nbsp; (&quot;example&quot;, None) ) )</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; lisp_list = (&quot;like&quot;,&nbsp; (&quot;this&quot;,&nbsp; (&quot;example&quot;, None) ) )</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If mutability is desired, you could use lists instead of tuples.&nbsp; Here</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If mutability is desired, you could use lists instead of tuples.&nbsp; Here</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the analogue of lisp car is &quot;lisp_list[0]&quot; and the analogue of cdr is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the analogue of lisp car is &quot;lisp_list[0]&quot; and the analogue of cdr is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;lisp_list[1]&quot;.&nbsp; Only do this if you're sure you really need to,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;lisp_list[1]&quot;.&nbsp; Only do this if you're sure you really need to,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">because it's usually a lot slower than using Python lists.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">because it's usually a lot slower than using Python lists.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I create a multidimensional list?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I create a multidimensional list?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You probably tried to make a multidimensional array like this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You probably tried to make a multidimensional array like this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; A = [[None] * 2] * 3</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; A = [[None] * 2] * 3</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This looks correct if you print it:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This looks correct if you print it:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; A</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; A</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [[None, None], [None, None], [None, None]]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [[None, None], [None, None], [None, None]]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">But when you assign a value, it shows up in multiple places:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">But when you assign a value, it shows up in multiple places:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemInsigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span>&gt;&gt;&gt; A[0][0] = 5</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemInsigMod">&gt;&gt;&gt; A[0][0] = 5</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span>&gt;&gt;&gt; A</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&gt;&gt;&gt; A</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemInsigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span>[[5, None], [5, None], [5, None]]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">[[5, None], [5, None], [5, None]]</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The reason is that replicating a list with &quot;*&quot; doesn't create copies,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The reason is that replicating a list with &quot;*&quot; doesn't create copies,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">it only creates references to the existing objects.&nbsp; The &quot;*3&quot; creates</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">it only creates references to the existing objects.&nbsp; The &quot;*3&quot; creates</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a list containing 3 references to the same list of length two.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a list containing 3 references to the same list of length two.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Changes to one row will show in all rows, which is almost certainly</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Changes to one row will show in all rows, which is almost certainly</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">not what you want.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">not what you want.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The suggested approach is to create a list of the desired length first</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The suggested approach is to create a list of the desired length first</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and then fill in each element with a newly created list:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and then fill in each element with a newly created list:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; A = [None] * 3</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; A = [None] * 3</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; for i in range(3):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; for i in range(3):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; A[i] = [None] * 2</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; A[i] = [None] * 2</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This generates a list containing 3 different lists of length two.&nbsp; You</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This generates a list containing 3 different lists of length two.&nbsp; You</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">can also use a list comprehension:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">can also use a list comprehension:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; w, h = 2, 3</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; w, h = 2, 3</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; A = [[None] * w for i in range(h)]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; A = [[None] * w for i in range(h)]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Or, you can use an extension that provides a matrix datatype; NumPy is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Or, you can use an extension that provides a matrix datatype; NumPy is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the best known.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the best known.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I apply a method to a sequence of objects?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I apply a method to a sequence of objects?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Use a list comprehension:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Use a list comprehension:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; result = [obj.method() for obj in mylist]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; result = [obj.method() for obj in mylist]</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">More</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">generically,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">try</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">following</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">function:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">def</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">method_map(objects,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">method,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">arguments):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">&quot;&quot;&quot;method_map([a,b],</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;meth&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(1,2))</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">gives</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">[a.meth(1,2),</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">b.meth(1,2)]&quot;&quot;&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">nobjects</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">len(objects)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">methods</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">map(getattr,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">objects,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">[method]*nobjects)</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">return</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">map(apply,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">methods,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">[arguments]*nobjects)</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why does a_tuple[i] += ['item'] raise an exception when the addition works?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why does a_tuple[i] += ['item'] raise an exception when the addition works?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This is because of a combination of the fact that augmented assignment</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This is because of a combination of the fact that augmented assignment</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">operators are *assignment* operators, and the difference between</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">operators are *assignment* operators, and the difference between</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">mutable and immutable objects in Python.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">mutable and immutable objects in Python.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This discussion applies in general when augmented assignment operators</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This discussion applies in general when augmented assignment operators</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">are applied to elements of a tuple that point to mutable objects, but</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">are applied to elements of a tuple that point to mutable objects, but</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">we'll use a &quot;list&quot; and &quot;+=&quot; as our exemplar.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">we'll use a &quot;list&quot; and &quot;+=&quot; as our exemplar.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you wrote:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you wrote:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_tuple = (1, 2)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_tuple = (1, 2)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_tuple[0] += 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_tuple[0] += 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; TypeError: 'tuple' object does not support item assignment</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; TypeError: 'tuple' object does not support item assignment</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The reason for the exception should be immediately clear: &quot;1&quot; is added</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The reason for the exception should be immediately clear: &quot;1&quot; is added</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to the object &quot;a_tuple[0]&quot; points to (&quot;1&quot;), producing the result</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to the object &quot;a_tuple[0]&quot; points to (&quot;1&quot;), producing the result</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">object, &quot;2&quot;, but when we attempt to assign the result of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">object, &quot;2&quot;, but when we attempt to assign the result of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">computation, &quot;2&quot;, to element &quot;0&quot; of the tuple, we get an error because</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">computation, &quot;2&quot;, to element &quot;0&quot; of the tuple, we get an error because</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">we can't change what an element of a tuple points to.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">we can't change what an element of a tuple points to.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Under the covers, what this augmented assignment statement is doing is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Under the covers, what this augmented assignment statement is doing is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">approximately this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">approximately this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; result = a_tuple[0] + 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; result = a_tuple[0] + 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_tuple[0] = result</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_tuple[0] = result</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; TypeError: 'tuple' object does not support item assignment</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; TypeError: 'tuple' object does not support item assignment</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It is the assignment part of the operation that produces the error,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It is the assignment part of the operation that produces the error,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">since a tuple is immutable.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">since a tuple is immutable.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When you write something like:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When you write something like:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_tuple = (['foo'], 'bar')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_tuple = (['foo'], 'bar')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_tuple[0] += ['item']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_tuple[0] += ['item']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; TypeError: 'tuple' object does not support item assignment</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; TypeError: 'tuple' object does not support item assignment</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The exception is a bit more surprising, and even more surprising is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The exception is a bit more surprising, and even more surprising is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the fact that even though there was an error, the append worked:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the fact that even though there was an error, the append worked:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_tuple[0]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_tuple[0]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ['foo', 'item']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ['foo', 'item']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To see why this happens, you need to know that (a) if an object</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To see why this happens, you need to know that (a) if an object</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">implements an &quot;__iadd__&quot; magic method, it gets called when the &quot;+=&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">implements an &quot;__iadd__&quot; magic method, it gets called when the &quot;+=&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">augmented assignment is executed, and its return value is what gets</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">augmented assignment is executed, and its return value is what gets</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">used in the assignment statement; and (b) for lists, &quot;__iadd__&quot; is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">used in the assignment statement; and (b) for lists, &quot;__iadd__&quot; is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">equivalent to calling &quot;extend&quot; on the list and returning the list.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">equivalent to calling &quot;extend&quot; on the list and returning the list.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">That's why we say that for lists, &quot;+=&quot; is a &quot;shorthand&quot; for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">That's why we say that for lists, &quot;+=&quot; is a &quot;shorthand&quot; for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;list.extend&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;list.extend&quot;:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_list = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_list = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_list += [1]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_list += [1]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_list</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_list</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [1]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [1]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This is equivalent to:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This is equivalent to:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; result = a_list.__iadd__([1])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; result = a_list.__iadd__([1])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_list = result</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_list = result</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The object pointed to by a_list has been mutated, and the pointer to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The object pointed to by a_list has been mutated, and the pointer to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the mutated object is assigned back to &quot;a_list&quot;.&nbsp; The end result of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the mutated object is assigned back to &quot;a_list&quot;.&nbsp; The end result of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the assignment is a no-op, since it is a pointer to the same object</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the assignment is a no-op, since it is a pointer to the same object</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that &quot;a_list&quot; was previously pointing to, but the assignment still</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that &quot;a_list&quot; was previously pointing to, but the assignment still</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">happens.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">happens.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Thus, in our tuple example what is happening is equivalent to:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Thus, in our tuple example what is happening is equivalent to:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; result = a_tuple[0].__iadd__(['item'])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; result = a_tuple[0].__iadd__(['item'])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_tuple[0] = result</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a_tuple[0] = result</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; TypeError: 'tuple' object does not support item assignment</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; TypeError: 'tuple' object does not support item assignment</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;__iadd__&quot; succeeds, and thus the list is extended, but even</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;__iadd__&quot; succeeds, and thus the list is extended, but even</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">though &quot;result&quot; points to the same object that &quot;a_tuple[0]&quot; already</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">though &quot;result&quot; points to the same object that &quot;a_tuple[0]&quot; already</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">points to, that final assignment still results in an error, because</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">points to, that final assignment still results in an error, because</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">tuples are immutable.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">tuples are immutable.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Dictionaries</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Dictionaries</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">============</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">============</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">How can I get a dictionary to <span class="TextSegSigDiff">store</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span>display its keys in a consistent order?</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">How can I get a dictionary to display its keys in a consistent order?</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">---------------------------------------------------------------------<span class="TextSegSigDiff">----------</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">---------------------------------------------------------------------</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">You</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can't.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Dictionaries</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">store</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">their</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">keys</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">unpredictable</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">order,</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">so</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">display</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">order</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">dictionary's</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">elements</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">similarly</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">unpredictable.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;collections.OrderedDict&quot;.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">This</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">frustrating</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">want</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">save</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">printable</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">file,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">make</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">some</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">changes</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">then</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">compare</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">some</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">other</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">printed</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">dictionary.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">In</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">case,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;pprint&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pretty-print</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">dictionary;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">items</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">presented</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">order</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sorted</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">by</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">key.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">A</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">more</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">complicated</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">solution</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">subclass</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;dict&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">create</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;SortedDict&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">class</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">prints</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">itself</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">predictable</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">order.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Here's</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">one</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">simpleminded</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">implementation</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">such</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">class:</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">class</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">SortedDict(dict):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">def</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">__repr__(self):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">keys</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sorted(self.keys())</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">result</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(&quot;{!r}:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">{!r}&quot;.format(k,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">self[k])</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">k</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">keys)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">return</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;{{{}}}&quot;.format(&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;.join(result))</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">__str__</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">__repr__</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">This</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">work</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">many</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">common</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">situations</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">might</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">encounter,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">though</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">it's</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">far</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">from</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">perfect</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">solution.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">largest</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">flaw</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">some</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">values</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">dictionary</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">also</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">dictionaries,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">their</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">values</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">won't</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">presented</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">any</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">particular</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">order.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">I want to do a complicated sort: can you do a Schwartzian Transform in Python?</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">I want to do a complicated sort: can you do a Schwartzian Transform in Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The technique, attributed to Randal Schwartz of the Perl community,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The technique, attributed to Randal Schwartz of the Perl community,</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">sorts the elements of a list by a metric which maps each element to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">sorts the elements of a list by a metric which maps each element to</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">its &quot;sort value&quot;. In Python, use the &quot;key&quot; argument for the</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">its &quot;sort value&quot;. In Python, use the &quot;key&quot; argument for the<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;sort()&quot;</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;l</span><span class="TextSegSigDiff">ist.sort()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">method</span>:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">functi</span><span class="TextSegSigDiff">on</span>:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Isorted = L[:]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Isorted = L[:]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Isorted.sort(key=lambda s: int(s[10:15]))</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Isorted.sort(key=lambda s: int(s[10:15]))</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How can I sort one list by values from another list?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How can I sort one list by values from another list?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------------------------------------</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">Merge them into a<span class="TextSegSigDiff">n</span> <span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">terator</span> of tuples, sort the resulting list, and</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Merge them into a<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">single</span> <span class="TextSegSigDiff">list</span> of tuples, sort the resulting list, and</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">then pick out the element you want.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">then pick out the element you want.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; list1 = [&quot;what&quot;, &quot;I'm&quot;, &quot;sorting&quot;, &quot;by&quot;]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; list1 = [&quot;what&quot;, &quot;I'm&quot;, &quot;sorting&quot;, &quot;by&quot;]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; list2 = [&quot;something&quot;, &quot;else&quot;, &quot;to&quot;, &quot;sort&quot;]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; list2 = [&quot;something&quot;, &quot;else&quot;, &quot;to&quot;, &quot;sort&quot;]</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; pairs = zip(list1, list2)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; pairs = zip(list1, list2)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pairs</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">sorted(pairs)</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; pairs</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; pairs</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; [(<span class="TextSegSigDiff">&quot;I</span><span class="TextSegSigDiff">'m&quot;</span>, '<span class="TextSegSigDiff">el</span>s<span class="TextSegSigDiff">e</span>'), (<span class="TextSegSigDiff">'by'</span>, '<span class="TextSegSigDiff">sort</span>'), ('sorting', 'to'), ('<span class="TextSegSigDiff">what</span>', 'so<span class="TextSegSigDiff">mething</span>')]</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; [(<span class="TextSegSigDiff">'what'</span>, 's<span class="TextSegSigDiff">omething</span>'), (<span class="TextSegSigDiff">&quot;I'm&quot;</span>, '<span class="TextSegSigDiff">else</span>'), ('sorting', 'to'), ('<span class="TextSegSigDiff">by</span>', 'so<span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">t</span>')]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">pairs.sort()</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemInsigMod">&nbsp;&nbsp; &gt;&gt;&gt; result = [x[1] for x in pairs]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;&nbsp; &gt;&gt;&gt; result = [<span class="TextSegInsigDiff"> </span>x[1] for x in pairs<span class="TextSegInsigDiff"> </span>]</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; result</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; result</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ['else', 'sort', 'to', 'something']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ['else', 'sort', 'to', 'something']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">An alternative for the last step is:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">An alternative for the last step is:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; result = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; result = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for p in pairs: result.append(p[1])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for p in pairs: result.append(p[1])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you find this more legible, you might prefer to use this instead of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you find this more legible, you might prefer to use this instead of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the final list comprehension.&nbsp; However, it is almost twice as slow for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the final list comprehension.&nbsp; However, it is almost twice as slow for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">long lists.&nbsp; Why? First, the &quot;append()&quot; operation has to reallocate</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">long lists.&nbsp; Why? First, the &quot;append()&quot; operation has to reallocate</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">memory, and while it uses some tricks to avoid doing that each time,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">memory, and while it uses some tricks to avoid doing that each time,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">it still has to do it occasionally, and that costs quite a bit.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">it still has to do it occasionally, and that costs quite a bit.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Second, the expression &quot;result.append&quot; requires an extra attribute</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Second, the expression &quot;result.append&quot; requires an extra attribute</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">lookup, and third, there's a speed reduction from having to make all</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">lookup, and third, there's a speed reduction from having to make all</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">those function calls.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">those function calls.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Objects</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Objects</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=======</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=======</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What is a class?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What is a class?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A class is the particular object type created by executing a class</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A class is the particular object type created by executing a class</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">statement. Class objects are used as templates to create instance</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">statement. Class objects are used as templates to create instance</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">objects, which embody both the data (attributes) and code (methods)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">objects, which embody both the data (attributes) and code (methods)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">specific to a datatype.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">specific to a datatype.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A class can be based on one or more other classes, called its base</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A class can be based on one or more other classes, called its base</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">class(es). It then inherits the attributes and methods of its base</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">class(es). It then inherits the attributes and methods of its base</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">classes. This allows an object model to be successively refined by</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">classes. This allows an object model to be successively refined by</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">inheritance.&nbsp; You might have a generic &quot;Mailbox&quot; class that provides</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">inheritance.&nbsp; You might have a generic &quot;Mailbox&quot; class that provides</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">basic accessor methods for a mailbox, and subclasses such as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">basic accessor methods for a mailbox, and subclasses such as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;MboxMailbox&quot;, &quot;MaildirMailbox&quot;, &quot;OutlookMailbox&quot; that handle various</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;MboxMailbox&quot;, &quot;MaildirMailbox&quot;, &quot;OutlookMailbox&quot; that handle various</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">specific mailbox formats.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">specific mailbox formats.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What is a method?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What is a method?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A method is a function on some object &quot;x&quot; that you normally call as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A method is a function on some object &quot;x&quot; that you normally call as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;x.name(arguments...)&quot;.&nbsp; Methods are defined as functions inside the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;x.name(arguments...)&quot;.&nbsp; Methods are defined as functions inside the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">class definition:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">class definition:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class C:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class C:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def meth(self, arg):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def meth(self, arg):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return arg * 2 + self.attribute</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return arg * 2 + self.attribute</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What is self?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What is self?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Self is merely a conventional name for the first argument of a method.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Self is merely a conventional name for the first argument of a method.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A method defined as &quot;meth(self, a, b, c)&quot; should be called as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A method defined as &quot;meth(self, a, b, c)&quot; should be called as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;x.meth(a, b, c)&quot; for some instance &quot;x&quot; of the class in which the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;x.meth(a, b, c)&quot; for some instance &quot;x&quot; of the class in which the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">definition occurs; the called method will think it is called as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">definition occurs; the called method will think it is called as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;meth(x, a, b, c)&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;meth(x, a, b, c)&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">See also Why must 'self' be used explicitly in method definitions and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">See also Why must 'self' be used explicitly in method definitions and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">calls?.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">calls?.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I check if an object is an instance of a given class or of a subclass of it?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I check if an object is an instance of a given class or of a subclass of it?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Use the built-in function &quot;isinstance(obj, cls)&quot;.&nbsp; You can check if an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Use the built-in function &quot;isinstance(obj, cls)&quot;.&nbsp; You can check if an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">object is an instance of any of a number of classes by providing a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">object is an instance of any of a number of classes by providing a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">tuple instead of a single class, e.g. &quot;isinstance(obj, (class1,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">tuple instead of a single class, e.g. &quot;isinstance(obj, (class1,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">class2, ...))&quot;, and can also check whether an object is one of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">class2, ...))&quot;, and can also check whether an object is one of</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">Python's built-in types, e.g. &quot;isinstance(obj, str)&quot; or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python's built-in types, e.g. &quot;isinstance(obj, str)&quot; or</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&quot;isinstance(obj, (int, float, complex))&quot;.</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&quot;isinstance(obj, (int, <span class="TextSegSigDiff">long,</span><span class="TextSegInsigDiff"> </span>float, complex))&quot;.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note that most programs do not use &quot;isinstance()&quot; on user-defined</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note that most programs do not use &quot;isinstance()&quot; on user-defined</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">classes very often.&nbsp; If you are developing the classes yourself, a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">classes very often.&nbsp; If you are developing the classes yourself, a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">more proper object-oriented style is to define methods on the classes</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">more proper object-oriented style is to define methods on the classes</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that encapsulate a particular behaviour, instead of checking the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that encapsulate a particular behaviour, instead of checking the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">object's class and doing a different thing based on what class it is.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">object's class and doing a different thing based on what class it is.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For example, if you have a function that does something:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For example, if you have a function that does something:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def search(obj):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def search(obj):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; if isinstance(obj, Mailbox):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; if isinstance(obj, Mailbox):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; # code to search a mailbox</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; # code to search a mailbox</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; elif isinstance(obj, Document):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; elif isinstance(obj, Document):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; # code to search a document</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; # code to search a document</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; elif ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; elif ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A better approach is to define a &quot;search()&quot; method on all the classes</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A better approach is to define a &quot;search()&quot; method on all the classes</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and just call it:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and just call it:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class Mailbox:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class Mailbox:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def search(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def search(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; # code to search a mailbox</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; # code to search a mailbox</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class Document:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class Document:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def search(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def search(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; # code to search a document</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...&nbsp; # code to search a document</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; obj.search()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; obj.search()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What is delegation?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What is delegation?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Delegation is an object oriented technique (also called a design</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Delegation is an object oriented technique (also called a design</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">pattern). Let's say you have an object &quot;x&quot; and want to change the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">pattern). Let's say you have an object &quot;x&quot; and want to change the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">behaviour of just one of its methods.&nbsp; You can create a new class that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">behaviour of just one of its methods.&nbsp; You can create a new class that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">provides a new implementation of the method you're interested in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">provides a new implementation of the method you're interested in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">changing and delegates all other methods to the corresponding method</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">changing and delegates all other methods to the corresponding method</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of &quot;x&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of &quot;x&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python programmers can easily implement delegation.&nbsp; For example, the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python programmers can easily implement delegation.&nbsp; For example, the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">following class implements a class that behaves like a file but</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">following class implements a class that behaves like a file but</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">converts all written data to uppercase:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">converts all written data to uppercase:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class UpperOut:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class UpperOut:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, outfile):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, outfile):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self._outfile = outfile</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self._outfile = outfile</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def write(self, s):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def write(self, s):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self._outfile.write(s.upper())</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self._outfile.write(s.upper())</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __getattr__(self, name):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __getattr__(self, name):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return getattr(self._outfile, name)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return getattr(self._outfile, name)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Here the &quot;UpperOut&quot; class redefines the &quot;write()&quot; method to convert</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Here the &quot;UpperOut&quot; class redefines the &quot;write()&quot; method to convert</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the argument string to uppercase before calling the underlying</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the argument string to uppercase before calling the underlying</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;self.__outfile.write()&quot; method.&nbsp; All other methods are delegated to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;self.__outfile.write()&quot; method.&nbsp; All other methods are delegated to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the underlying &quot;self.__outfile&quot; object.&nbsp; The delegation is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the underlying &quot;self.__outfile&quot; object.&nbsp; The delegation is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">accomplished via the &quot;__getattr__&quot; method; consult the language</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">accomplished via the &quot;__getattr__&quot; method; consult the language</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">reference for more information about controlling attribute access.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">reference for more information about controlling attribute access.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note that for more general cases delegation can get trickier. When</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note that for more general cases delegation can get trickier. When</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">attributes must be set as well as retrieved, the class must define a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">attributes must be set as well as retrieved, the class must define a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;__setattr__()&quot; method too, and it must do so carefully.&nbsp; The basic</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;__setattr__()&quot; method too, and it must do so carefully.&nbsp; The basic</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">implementation of &quot;__setattr__()&quot; is roughly equivalent to the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">implementation of &quot;__setattr__()&quot; is roughly equivalent to the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">following:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">following:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class X:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class X:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __setattr__(self, name, value):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __setattr__(self, name, value):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.__dict__[name] = value</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.__dict__[name] = value</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Most &quot;__setattr__()&quot; implementations must modify &quot;self.__dict__&quot; to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Most &quot;__setattr__()&quot; implementations must modify &quot;self.__dict__&quot; to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">store local state for self without causing an infinite recursion.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">store local state for self without causing an infinite recursion.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I call a method defined in a base class from a derived class that overrides it?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I call a method defined in a base class from a derived class that overrides it?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------------------------------------------------------------------</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">U</span>s<span class="TextSegSigDiff">e</span> the built-in &quot;super()&quot;<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">function:</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you're</span><span class="TextSegInsigDiff"> </span><span class="TextSegInsigDiff">u</span>s<span class="TextSegSigDiff">ing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">new-style</span> <span class="TextSegSigDiff">classes,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">use</span><span class="TextSegInsigDiff"> </span>the built-in &quot;super()&quot;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">function:</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class Derived(Base):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class Derived(Base):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def meth(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def meth(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; super(Derived, self).meth()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; super(Derived, self).meth()</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">For</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">prior</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">3.0,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">may</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">classic</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">classes:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">For</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">class definition such as &quot;clas<span class="TextSegSigDiff">s</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Derived(Base):</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">...&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">call</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you're</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">using</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">classic</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">classes:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">For</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span>class definition such as &quot;clas<span class="TextSegSigDiff">s</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">method &quot;meth()&quot; defined in &quot;Base&quot; (or<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">one</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;Base&quot;'s</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">base</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">classes)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Derived(Base):</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">...&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">call</span><span class="TextSegInsigDiff"> </span>method &quot;meth()&quot; defined in &quot;Base&quot; (or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&quot;Base.meth(self, arguments...)&quot;.<span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">Here,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;Base.meth&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">unbound</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">one</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;Base&quot;'s</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">base</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">classes)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span>&quot;Base.meth(self, arguments...)&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">meth<span class="TextSegSigDiff">o</span>d, so you need to provide th<span class="TextSegSigDiff">e</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;self&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">argument.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Here,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;Base.</span>meth<span class="TextSegSigDiff">&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">unboun</span>d<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">method</span>, so you need to provide th<span class="TextSegSigDiff">e</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;self&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">argument.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How can I organize my code to make it easier to change the base class?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How can I organize my code to make it easier to change the base class?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You could define an alias for the base class, assign the real base</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You could define an alias for the base class, assign the real base</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">class to it before your class definition, and use the alias throughout</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">class to it before your class definition, and use the alias throughout</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">your class.&nbsp; Then all you have to change is the value assigned to the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">your class.&nbsp; Then all you have to change is the value assigned to the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">alias.&nbsp; Incidentally, this trick is also handy if you want to decide</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">alias.&nbsp; Incidentally, this trick is also handy if you want to decide</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">dynamically (e.g. depending on availability of resources) which base</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">dynamically (e.g. depending on availability of resources) which base</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">class to use.&nbsp; Example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">class to use.&nbsp; Example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; BaseAlias = &lt;real base class&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; BaseAlias = &lt;real base class&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class Derived(BaseAlias):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class Derived(BaseAlias):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def meth(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def meth(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BaseAlias.meth(self)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; BaseAlias.meth(self)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I create static class data and static class methods?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I create static class data and static class methods?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Both static data and static methods (in the sense of C++ or Java) are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Both static data and static methods (in the sense of C++ or Java) are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">supported in Python.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">supported in Python.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For static data, simply define a class attribute.&nbsp; To assign a new</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For static data, simply define a class attribute.&nbsp; To assign a new</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">value to the attribute, you have to explicitly use the class name in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">value to the attribute, you have to explicitly use the class name in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the assignment:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the assignment:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class C:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class C:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; count = 0&nbsp;&nbsp; # number of times C.__init__ called</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; count = 0&nbsp;&nbsp; # number of times C.__init__ called</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; C.count = C.count + 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; C.count = C.count + 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def getcount(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def getcount(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return C.count&nbsp; # or return self.count</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return C.count&nbsp; # or return self.count</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;c.count&quot; also refers to &quot;C.count&quot; for any &quot;c&quot; such that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;c.count&quot; also refers to &quot;C.count&quot; for any &quot;c&quot; such that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;isinstance(c, C)&quot; holds, unless overridden by &quot;c&quot; itself or by some</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;isinstance(c, C)&quot; holds, unless overridden by &quot;c&quot; itself or by some</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">class on the base-class search path from &quot;c.__class__&quot; back to &quot;C&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">class on the base-class search path from &quot;c.__class__&quot; back to &quot;C&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Caution: within a method of C, an assignment like &quot;self.count = 42&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Caution: within a method of C, an assignment like &quot;self.count = 42&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">creates a new and unrelated instance named &quot;count&quot; in &quot;self&quot;'s own</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">creates a new and unrelated instance named &quot;count&quot; in &quot;self&quot;'s own</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">dict.&nbsp; Rebinding of a class-static data name must always specify the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">dict.&nbsp; Rebinding of a class-static data name must always specify the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">class whether inside a method or not:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">class whether inside a method or not:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; C.count = 314</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; C.count = 314</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">Static methods are possible:</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Static methods are possible<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">since</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2.2</span>:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">class</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">C:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">def</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">static(arg1,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">arg2,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">arg3):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">#</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">No</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">'self'</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">parameter!</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; &nbsp; &nbsp; </span><span class="TextSegSigDiff">static</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">=</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">staticmethod(static)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">With</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2.4's</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">decorators,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">also</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">written</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class C:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class C:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; @staticmethod</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; @staticmethod</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def static(arg1, arg2, arg3):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def static(arg1, arg2, arg3):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # No 'self' parameter!</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # No 'self' parameter!</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">However, a far more straightforward way to get the effect of a static</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">However, a far more straightforward way to get the effect of a static</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">method is via a simple module-level function:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">method is via a simple module-level function:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def getcount():</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def getcount():</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return C.count</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return C.count</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If your code is structured so as to define one class (or tightly</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If your code is structured so as to define one class (or tightly</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">related class hierarchy) per module, this supplies the desired</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">related class hierarchy) per module, this supplies the desired</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">encapsulation.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">encapsulation.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How can I overload constructors (or methods) in Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How can I overload constructors (or methods) in Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This answer actually applies to all methods, but the question usually</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This answer actually applies to all methods, but the question usually</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">comes up first in the context of constructors.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">comes up first in the context of constructors.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In C++ you'd write</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In C++ you'd write</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class C {</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class C {</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; C() { cout &lt;&lt; &quot;No arguments\n&quot;; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; C() { cout &lt;&lt; &quot;No arguments\n&quot;; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; C(int i) { cout &lt;&lt; &quot;Argument is &quot; &lt;&lt; i &lt;&lt; &quot;\n&quot;; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; C(int i) { cout &lt;&lt; &quot;Argument is &quot; &lt;&lt; i &lt;&lt; &quot;\n&quot;; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; }</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; }</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In Python you have to write a single constructor that catches all</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In Python you have to write a single constructor that catches all</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">cases using default arguments.&nbsp; For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">cases using default arguments.&nbsp; For example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class C:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class C:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, i=None):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, i=None):</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if i is None:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if i is None:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>&quot;No arguments&quot;<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegInsigDiff"> </span>&quot;No arguments&quot;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else:</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; else:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>&quot;Argument is&quot;, i<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegInsigDiff"> </span>&quot;Argument is&quot;, i</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This is not entirely equivalent, but close enough in practice.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This is not entirely equivalent, but close enough in practice.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You could also try a variable-length argument list, e.g.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You could also try a variable-length argument list, e.g.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def __init__(self, *args):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def __init__(self, *args):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The same approach works for all method definitions.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The same approach works for all method definitions.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">I try to use __spam and I get an error about _SomeClassName__spam.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">I try to use __spam and I get an error about _SomeClassName__spam.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Variable names with double leading underscores are &quot;mangled&quot; to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Variable names with double leading underscores are &quot;mangled&quot; to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">provide a simple but effective way to define class private variables.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">provide a simple but effective way to define class private variables.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Any identifier of the form &quot;__spam&quot; (at least two leading underscores,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Any identifier of the form &quot;__spam&quot; (at least two leading underscores,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">at most one trailing underscore) is textually replaced with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">at most one trailing underscore) is textually replaced with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;_classname__spam&quot;, where &quot;classname&quot; is the current class name with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;_classname__spam&quot;, where &quot;classname&quot; is the current class name with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">any leading underscores stripped.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">any leading underscores stripped.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This doesn't guarantee privacy: an outside user can still deliberately</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This doesn't guarantee privacy: an outside user can still deliberately</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">access the &quot;_classname__spam&quot; attribute, and private values are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">access the &quot;_classname__spam&quot; attribute, and private values are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">visible in the object's &quot;__dict__&quot;.&nbsp; Many Python programmers never</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">visible in the object's &quot;__dict__&quot;.&nbsp; Many Python programmers never</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">bother to use private variable names at all.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">bother to use private variable names at all.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">My class defines __del__ but it is not called when I delete the object.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">My class defines __del__ but it is not called when I delete the object.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There are several possible reasons for this.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There are several possible reasons for this.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The del statement does not necessarily call &quot;__del__()&quot; -- it simply</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The del statement does not necessarily call &quot;__del__()&quot; -- it simply</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">decrements the object's reference count, and if this reaches zero</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">decrements the object's reference count, and if this reaches zero</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;__del__()&quot; is called.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;__del__()&quot; is called.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If your data structures contain circular links (e.g. a tree where each</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If your data structures contain circular links (e.g. a tree where each</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">child has a parent reference and each parent has a list of children)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">child has a parent reference and each parent has a list of children)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the reference counts will never go back to zero.&nbsp; Once in a while</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the reference counts will never go back to zero.&nbsp; Once in a while</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python runs an algorithm to detect such cycles, but the garbage</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python runs an algorithm to detect such cycles, but the garbage</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">collector might run some time after the last reference to your data</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">collector might run some time after the last reference to your data</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">structure vanishes, so your &quot;__del__()&quot; method may be called at an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">structure vanishes, so your &quot;__del__()&quot; method may be called at an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">inconvenient and random time. This is inconvenient if you're trying to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">inconvenient and random time. This is inconvenient if you're trying to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">reproduce a problem. Worse, the order in which object's &quot;__del__()&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">reproduce a problem. Worse, the order in which object's &quot;__del__()&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">methods are executed is arbitrary.&nbsp; You can run &quot;gc.collect()&quot; to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">methods are executed is arbitrary.&nbsp; You can run &quot;gc.collect()&quot; to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">force a collection, but there *are* pathological cases where objects</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">force a collection, but there *are* pathological cases where objects</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">will never be collected.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">will never be collected.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Despite the cycle collector, it's still a good idea to define an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Despite the cycle collector, it's still a good idea to define an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">explicit &quot;close()&quot; method on objects to be called whenever you're done</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">explicit &quot;close()&quot; method on objects to be called whenever you're done</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">with them.&nbsp; The &quot;close()&quot; method can then remove attributes that refer</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">with them.&nbsp; The &quot;close()&quot; method can then remove attributes that refer</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to subobjecs.&nbsp; Don't call &quot;__del__()&quot; directly -- &quot;__del__()&quot; should</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to subobjecs.&nbsp; Don't call &quot;__del__()&quot; directly -- &quot;__del__()&quot; should</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">call &quot;close()&quot; and &quot;close()&quot; should make sure that it can be called</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">call &quot;close()&quot; and &quot;close()&quot; should make sure that it can be called</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">more than once for the same object.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">more than once for the same object.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Another way to avoid cyclical references is to use the &quot;weakref&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Another way to avoid cyclical references is to use the &quot;weakref&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">module, which allows you to point to objects without incrementing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">module, which allows you to point to objects without incrementing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">their reference count. Tree data structures, for instance, should use</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">their reference count. Tree data structures, for instance, should use</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">weak references for their parent and sibling references (if they need</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">weak references for their parent and sibling references (if they need</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">them!).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">them!).</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">object</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">has</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ever</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">been</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">local</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">variable</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">function</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">caught</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">expression</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">an</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">except</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">clause,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">chances</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">reference</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">object</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">still</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">exists</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">function's</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">stack</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">frame</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">contained</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">stack</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">trace.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Normally,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">calling</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;sys.exc_clear()&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">take</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">care</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">this</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">by</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">clearing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">last</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">recorded</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">exception.</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemInsigMod">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">Finally, if your &quot;__del__()&quot; method raises an exception, a warning</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">Finally, if your &quot;__del__()&quot; method raises an exception, a warning</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">message is printed to &quot;sys.stderr&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">message is printed to &quot;sys.stderr&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I get a list of all instances of a given class?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I get a list of all instances of a given class?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python does not keep track of all instances of a class (or of a built-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python does not keep track of all instances of a class (or of a built-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in type). You can program the class's constructor to keep track of all</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in type). You can program the class's constructor to keep track of all</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">instances by keeping a list of weak references to each instance.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">instances by keeping a list of weak references to each instance.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why does the result of &quot;id()&quot; appear to be not unique?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why does the result of &quot;id()&quot; appear to be not unique?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;id()&quot; builtin returns an integer that is guaranteed to be unique</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;id()&quot; builtin returns an integer that is guaranteed to be unique</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">during the lifetime of the object.&nbsp; Since in CPython, this is the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">during the lifetime of the object.&nbsp; Since in CPython, this is the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">object's memory address, it happens frequently that after an object is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">object's memory address, it happens frequently that after an object is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">deleted from memory, the next freshly created object is allocated at</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">deleted from memory, the next freshly created object is allocated at</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the same position in memory.&nbsp; This is illustrated by this example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the same position in memory.&nbsp; This is illustrated by this example:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&gt;&gt;&gt; id(1000)<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">#</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">doctest:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">+SKIP</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&gt;&gt;&gt; id(1000)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">13901272</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">13901272</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&gt;&gt;&gt; id(2000)<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">#</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">doctest:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">+SKIP</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&gt;&gt;&gt; id(2000)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">13901272</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">13901272</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The two ids belong to different integer objects that are created</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The two ids belong to different integer objects that are created</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">before, and deleted immediately after execution of the &quot;id()&quot; call.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">before, and deleted immediately after execution of the &quot;id()&quot; call.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To be sure that objects whose id you want to examine are still alive,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To be sure that objects whose id you want to examine are still alive,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">create another reference to the object:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">create another reference to the object:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&gt;&gt;&gt; a = 1000; b = 2000</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&gt;&gt;&gt; a = 1000; b = 2000</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&gt;&gt;&gt; id(a)<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">#</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">doctest:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">+SKIP</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&gt;&gt;&gt; id(a)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">13901272</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">13901272</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&gt;&gt;&gt; id(b)<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">#</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">doctest:</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">+SKIP</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&gt;&gt;&gt; id(b)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">13891296</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">13891296</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Modules</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Modules</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=======</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=======</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I create a .pyc file?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I create a .pyc file?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------------</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">When a module is imported for the first time (or when the source <span class="TextSegSigDiff">file</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">When a module is imported for the first time (or when the source <span class="TextSegSigDiff">is</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">has</span> <span class="TextSegSigDiff">c</span>han<span class="TextSegSigDiff">ged</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">since</span> the current compiled file<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">was</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">created</span>) a &quot;.pyc&quot; file</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">more</span> <span class="TextSegSigDiff">recent</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">t</span>han the current compiled file) a &quot;.pyc&quot; file<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">containing</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">containing</span><span class="TextSegInsigDiff"> </span>the compiled code should be created in <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">&quot;__p</span><span class="TextSegSigDiff">ycac</span>he<span class="TextSegSigDiff">__</span>&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">the compiled code should be created in <span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">same</span> <span class="TextSegSigDiff">directory</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">t</span>he<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;.py</span>&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">subdirectory</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">directory</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">containing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;.py&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">The</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;.pyc&quot;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">have</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">filename</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">starts</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">same</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">name</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;.py&quot;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">file,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">ends</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;.pyc&quot;,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">middle</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">component</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">depends</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">on</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">particular</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;python&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">binary</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">created</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegSigDiff">(See</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">**PEP</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">3147**</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">deta</span>il<span class="TextSegSigDiff">s.)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">f</span>il<span class="TextSegSigDiff">e.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">One reason that a &quot;.pyc&quot; file may not be created is <span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span>permissions</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">One reason that a &quot;.pyc&quot; file may not be created is permissions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">problem with the directory c<span class="TextSegSigDiff">ontaining</span> <span class="TextSegSigDiff">t</span>h<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">sourc</span>e<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">fi</span>le, <span class="TextSegSigDiff">meaning</span> <span class="TextSegSigDiff">that</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">problem<span class="TextSegSigDiff">s</span> with the directory<span class="TextSegSigDiff">.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">This</span> c<span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">n</span> h<span class="TextSegSigDiff">appen,</span> <span class="TextSegSigDiff">fo</span><span class="TextSegSigDiff">r</span><span class="TextSegInsigDiff"> </span>e<span class="TextSegSigDiff">xamp</span>le, <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">you</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;__pycache__&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">subdirectory</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">cannot</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">created.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">This</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">happen,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">example,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span>develop as one user but run as another, such as if you</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">develop as one user but run as another, such as if you<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">testing</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">are</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">testing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">web</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">server.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemInsigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Unless</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;PYTHONDONTWRITEBYTECODE&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">environment</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">variable</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">set,</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">c</span>reation of a .pyc file is automatic if you're<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">importing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">web</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">server.</span><span class="TextSegInsigDiff">&nbsp; </span><span class="TextSegInsigDiff">C</span>reation of a .pyc file is automatic if you're</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">P</span>ython has the ability (permissions, f<span class="TextSegSigDiff">ree</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">space,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">etc...)</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">c</span>re<span class="TextSegSigDiff">at</span>e<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">im</span><span class="TextSegInsigDiff">p</span><span class="TextSegSigDiff">orting</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">module</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">P</span>ython has the ability (permissions, free</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;__pyc</span>ac<span class="TextSegSigDiff">he__&quot;</span> <span class="TextSegSigDiff">subdir</span>e<span class="TextSegSigDiff">c</span>to<span class="TextSegSigDiff">ry</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span> write the compiled module to th<span class="TextSegSigDiff">a</span>t</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">p</span>ac<span class="TextSegSigDiff">e,</span> e<span class="TextSegSigDiff">tc...)</span><span class="TextSegInsigDiff"> </span>to write the compiled module <span class="TextSegSigDiff">back</span><span class="TextSegInsigDiff"> </span>to th<span class="TextSegSigDiff">e</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">direc</span>t<span class="TextSegSigDiff">ory.</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">subdirectory.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Running Python on a top level script is not considered an import and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Running Python on a top level script is not considered an import and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">no &quot;.pyc&quot; will be created.&nbsp; For example, if you have a top-level</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">no &quot;.pyc&quot; will be created.&nbsp; For example, if you have a top-level</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">module &quot;foo.py&quot; that imports another module &quot;xyz.py&quot;, when you run</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">module &quot;foo.py&quot; that imports another module &quot;xyz.py&quot;, when you run</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;foo&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(by</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">typing</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">foo.py&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">shell</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">command),</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;.pyc&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">created</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">f</span><span class="TextSegSigDiff">or</span> &quot;xyz&quot; bec<span class="TextSegSigDiff">au</span>se &quot;xyz&quot; is imported, but no<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;.pyc&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;</span><span class="TextSegSigDiff">foo&quot;,</span> &quot;xyz<span class="TextSegSigDiff">.pyc</span>&quot;<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span> be<span class="TextSegInsigDiff"> </span>c<span class="TextSegSigDiff">reated</span><span class="TextSegInsigDiff"> </span>s<span class="TextSegSigDiff">inc</span>e &quot;xyz&quot; is imported, but no</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">be created<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;foo&quot;</span> since &quot;foo.py&quot; isn't being imported.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;foo.pyc&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span>be created since &quot;foo.py&quot; isn't being imported.</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">If you need to create <span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span>&quot;.pyc<span class="TextSegSigDiff">&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span>&quot;<span class="TextSegSigDiff">foo&quot;</span> -- that is, to create a</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">If you need to create &quot;<span class="TextSegSigDiff">foo</span>.pyc&quot; -- that is, to create a<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;.pyc&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">file</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;.pyc&quot;</span><span class="TextSegInsigDiff"> </span>f<span class="TextSegSigDiff">ile</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">f</span>or a module that is not imported -- you can, using the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">for a module that is not imported -- you can, using the<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;py_compile&quot;</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;py_compile&quot;</span><span class="TextSegInsigDiff"> </span>and &quot;compileall&quot; modules.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">and &quot;compileall&quot; modules.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;py_compile&quot; module can manually compile any module.&nbsp; One way is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;py_compile&quot; module can manually compile any module.&nbsp; One way is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to use the &quot;compile()&quot; function in that module interactively:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to use the &quot;compile()&quot; function in that module interactively:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import py_compile</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import py_compile</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; py_compile.compile('foo.py')&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # doctest: +SKIP</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; py_compile.compile('foo.py')&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # doctest: +SKIP</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">This will write the &quot;.pyc&quot; to <span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;__pycac</span>he<span class="TextSegSigDiff">__&quot;</span> s<span class="TextSegSigDiff">ubdir</span>e<span class="TextSegSigDiff">c</span><span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">or</span><span class="TextSegSigDiff">y</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">same</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">This will write the &quot;.pyc&quot; to <span class="TextSegSigDiff">t</span>he s<span class="TextSegSigDiff">am</span>e<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">location</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;foo.py&quot;</span> <span class="TextSegSigDiff">(or</span> <span class="TextSegSigDiff">you</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">lo</span>ca<span class="TextSegSigDiff">tio</span>n <span class="TextSegSigDiff">as</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;foo.py&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">(or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">can</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">o</span>verride that with the option<span class="TextSegSigDiff">a</span>l</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">can <span class="TextSegSigDiff">o</span>verride that with the option<span class="TextSegSigDiff">al</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">parameter</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;cfi</span>l<span class="TextSegSigDiff">e&quot;).</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">parameter</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;cfile&quot;).</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You can also automatically compile all files in a directory or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You can also automatically compile all files in a directory or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">directories using the &quot;compileall&quot; module.&nbsp; You can do it from the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">directories using the &quot;compileall&quot; module.&nbsp; You can do it from the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">shell prompt by running &quot;compileall.py&quot; and providing the path of a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">shell prompt by running &quot;compileall.py&quot; and providing the path of a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">directory containing Python files to compile:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">directory containing Python files to compile:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; python -m compileall .</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; python -m compileall .</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I find the current module name?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I find the current module name?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A module can find out its own module name by looking at the predefined</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A module can find out its own module name by looking at the predefined</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">global variable &quot;__name__&quot;.&nbsp; If this has the value &quot;'__main__'&quot;, the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">global variable &quot;__name__&quot;.&nbsp; If this has the value &quot;'__main__'&quot;, the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">program is running as a script.&nbsp; Many modules that are usually used by</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">program is running as a script.&nbsp; Many modules that are usually used by</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">importing them also provide a command-line interface or a self-test,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">importing them also provide a command-line interface or a self-test,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and only execute this code after checking &quot;__name__&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and only execute this code after checking &quot;__name__&quot;:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; def main():</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def main():</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>'Running test...'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegInsigDiff"> </span>'Running test...'</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; if __name__ == '__main__':</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; if __name__ == '__main__':</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; main()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; main()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How can I have modules that mutually import each other?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How can I have modules that mutually import each other?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Suppose you have the following modules:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Suppose you have the following modules:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">foo.py:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">foo.py:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; from bar import bar_var</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; from bar import bar_var</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; foo_var = 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; foo_var = 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">bar.py:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">bar.py:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; from foo import foo_var</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; from foo import foo_var</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; bar_var = 2</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; bar_var = 2</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The problem is that the interpreter will perform the following steps:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The problem is that the interpreter will perform the following steps:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* main imports foo</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* main imports foo</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Empty globals for foo are created</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Empty globals for foo are created</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* foo is compiled and starts executing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* foo is compiled and starts executing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* foo imports bar</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* foo imports bar</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Empty globals for bar are created</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Empty globals for bar are created</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* bar is compiled and starts executing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* bar is compiled and starts executing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* bar imports foo (which is a no-op since there already is a module</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* bar imports foo (which is a no-op since there already is a module</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; named foo)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; named foo)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* bar.foo_var = foo.foo_var</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* bar.foo_var = foo.foo_var</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The last step fails, because Python isn't done with interpreting &quot;foo&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The last step fails, because Python isn't done with interpreting &quot;foo&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">yet and the global symbol dictionary for &quot;foo&quot; is still empty.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">yet and the global symbol dictionary for &quot;foo&quot; is still empty.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The same thing happens when you use &quot;import foo&quot;, and then try to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The same thing happens when you use &quot;import foo&quot;, and then try to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">access &quot;foo.foo_var&quot; in global code.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">access &quot;foo.foo_var&quot; in global code.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There are (at least) three possible workarounds for this problem.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There are (at least) three possible workarounds for this problem.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Guido van Rossum recommends avoiding all uses of &quot;from &lt;module&gt; import</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Guido van Rossum recommends avoiding all uses of &quot;from &lt;module&gt; import</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">...&quot;, and placing all code inside functions.&nbsp; Initializations of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">...&quot;, and placing all code inside functions.&nbsp; Initializations of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">global variables and class variables should use constants or built-in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">global variables and class variables should use constants or built-in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">functions only.&nbsp; This means everything from an imported module is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">functions only.&nbsp; This means everything from an imported module is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">referenced as &quot;&lt;module&gt;.&lt;name&gt;&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">referenced as &quot;&lt;module&gt;.&lt;name&gt;&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Jim Roskind suggests performing steps in the following order in each</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Jim Roskind suggests performing steps in the following order in each</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">module:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">module:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* exports (globals, functions, and classes that don't need imported</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* exports (globals, functions, and classes that don't need imported</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; base classes)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; base classes)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* &quot;import&quot; statements</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* &quot;import&quot; statements</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* active code (including globals that are initialized from imported</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* active code (including globals that are initialized from imported</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; values).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; values).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">van Rossum doesn't like this approach much because the imports appear</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">van Rossum doesn't like this approach much because the imports appear</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in a strange place, but it does work.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in a strange place, but it does work.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Matthias Urlichs recommends restructuring your code so that the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Matthias Urlichs recommends restructuring your code so that the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">recursive import is not necessary in the first place.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">recursive import is not necessary in the first place.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">These solutions are not mutually exclusive.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">These solutions are not mutually exclusive.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">__import__('x.y.z') returns &lt;module 'x'&gt;; how do I get z?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">__import__('x.y.z') returns &lt;module 'x'&gt;; how do I get z?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Consider using the convenience function &quot;import_module()&quot; from</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Consider using the convenience function &quot;import_module()&quot; from</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;importlib&quot; instead:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;importlib&quot; instead:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; z = importlib.import_module('x.y.z')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; z = importlib.import_module('x.y.z')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When I edit an imported module and reimport it, the changes don't show up.&nbsp; Why does this happen?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When I edit an imported module and reimport it, the changes don't show up.&nbsp; Why does this happen?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------------------------------------------------------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------------------------------------------------------------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For reasons of efficiency as well as consistency, Python only reads</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For reasons of efficiency as well as consistency, Python only reads</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the module file on the first time a module is imported.&nbsp; If it didn't,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the module file on the first time a module is imported.&nbsp; If it didn't,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in a program consisting of many modules where each one imports the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in a program consisting of many modules where each one imports the</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">same basic module, the basic module would be parsed and re-parsed many</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">same basic module, the basic module would be parsed and re-parsed many</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">times.&nbsp; To force re<span class="TextSegSigDiff">-</span>reading of a changed module, do this:</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">times.&nbsp; To force rereading of a changed module, do this:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegInsigDiff">&nbsp;&nbsp; </span><span class="TextSegSigDiff">import</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">importlib</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; import modname</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; import modname</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">importlib.</span>reload(modname)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; reload(modname)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Warning: this technique is not 100% fool-proof.&nbsp; In particular,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Warning: this technique is not 100% fool-proof.&nbsp; In particular,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">modules containing statements like</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">modules containing statements like</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; from modname import some_objects</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; from modname import some_objects</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">will continue to work with the old version of the imported objects.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">will continue to work with the old version of the imported objects.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If the module contains class definitions, existing class instances</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If the module contains class definitions, existing class instances</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">will *not* be updated to use the new class definition.&nbsp; This can</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">will *not* be updated to use the new class definition.&nbsp; This can</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">result in the following paradoxical behaviour:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">result in the following paradoxical behaviour:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&gt;&gt;&gt;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">import</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">importlib</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&gt;&gt;&gt; import cls</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&gt;&gt;&gt; import cls</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&gt;&gt;&gt; c = cls.C()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # Create an instance of C</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&gt;&gt;&gt; c = cls.C()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # Create an instance of C</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&gt;&gt;&gt; <span class="TextSegSigDiff">importlib.</span>reload(cls)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&gt;&gt;&gt; reload(cls)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&lt;module 'cls' from 'cls.py'&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&lt;module 'cls' from 'cls.py<span class="TextSegSigDiff">c</span>'&gt;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&gt;&gt;&gt; isinstance(c, cls.C)&nbsp; &nbsp; &nbsp;&nbsp; # isinstance is false?!?</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&gt;&gt;&gt; isinstance(c, cls.C)&nbsp; &nbsp; &nbsp;&nbsp; # isinstance is false?!?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">False</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">False</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">The nature of the problem is made clear if you print out the</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">The nature of the problem is made clear if you print out the<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">class</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;identity&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">of</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">class</span><span class="TextSegInsigDiff"> </span>objects:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">objects:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&gt;&gt;&gt; <span class="TextSegSigDiff">hex(id(</span>c.__class__<span class="TextSegSigDiff">))</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&gt;&gt;&gt; c.__class__</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">'</span>0x7352a0<span class="TextSegSigDiff">'</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&lt;class</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">cls.C</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">at</span><span class="TextSegInsigDiff"> </span>0x7352a0<span class="TextSegSigDiff">&gt;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&gt;&gt;&gt; <span class="TextSegSigDiff">hex(id(</span>cls.C<span class="TextSegSigDiff">))</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&gt;&gt;&gt; cls.C</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">'</span>0x4198d0<span class="TextSegSigDiff">'</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&lt;class</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">cls.C</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">at</span><span class="TextSegInsigDiff"> </span>0x4198d0<span class="TextSegSigDiff">&gt;</span></td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\faq\windows.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python on Windows FAQ</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python on Windows FAQ</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*********************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*********************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I run a Python program under Windows?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I run a Python program under Windows?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">============================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">============================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This is not necessarily a straightforward question. If you are already</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This is not necessarily a straightforward question. If you are already</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">familiar with running programs from the Windows command line then</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">familiar with running programs from the Windows command line then</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">everything will seem obvious; otherwise, you might need a little more</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">everything will seem obvious; otherwise, you might need a little more</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">guidance.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">guidance.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">[image: Python Development on XP][image]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">[image: Python Development on XP][image]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python Development on XP</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python Development on XP</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This series of screencasts aims to get you up and running with Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This series of screencasts aims to get you up and running with Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">on Windows XP.&nbsp; The knowledge is distilled into 1.5 hours and will get</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">on Windows XP.&nbsp; The knowledge is distilled into 1.5 hours and will get</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you up and running with the right Python distribution, coding in your</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you up and running with the right Python distribution, coding in your</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">choice of IDE, and debugging and writing solid code with unit-tests.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">choice of IDE, and debugging and writing solid code with unit-tests.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Unless you use some sort of integrated development environment, you</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Unless you use some sort of integrated development environment, you</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">will end up *typing* Windows commands into what is variously referred</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">will end up *typing* Windows commands into what is variously referred</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to as a &quot;DOS window&quot; or &quot;Command prompt window&quot;.&nbsp; Usually you can</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to as a &quot;DOS window&quot; or &quot;Command prompt window&quot;.&nbsp; Usually you can</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">create such a window from your Start menu; under Windows 7 the menu</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">create such a window from your Start menu; under Windows 7 the menu</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">selection is Start ‣ Programs ‣ Accessories ‣ Command Prompt.&nbsp; You</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">selection is Start ‣ Programs ‣ Accessories ‣ Command Prompt.&nbsp; You</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">should be able to recognize when you have started such a window</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">should be able to recognize when you have started such a window</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">because you will see a Windows &quot;command prompt&quot;, which usually looks</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">because you will see a Windows &quot;command prompt&quot;, which usually looks</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">like this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">like this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; C:\&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; C:\&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The letter may be different, and there might be other things after it,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The letter may be different, and there might be other things after it,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">so you might just as easily see something like:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">so you might just as easily see something like:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; D:\YourName\Projects\Python&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; D:\YourName\Projects\Python&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">depending on how your computer has been set up and what else you have</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">depending on how your computer has been set up and what else you have</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">recently done with it.&nbsp; Once you have started such a window, you are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">recently done with it.&nbsp; Once you have started such a window, you are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">well on the way to running Python programs.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">well on the way to running Python programs.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You need to realize that your Python scripts have to be processed by</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You need to realize that your Python scripts have to be processed by</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">another program called the Python *interpreter*.&nbsp; The interpreter</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">another program called the Python *interpreter*.&nbsp; The interpreter</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">reads your script, compiles it into bytecodes, and then executes the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">reads your script, compiles it into bytecodes, and then executes the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">bytecodes to run your program. So, how do you arrange for the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">bytecodes to run your program. So, how do you arrange for the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">interpreter to handle your Python?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interpreter to handle your Python?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">First, you need to make sure that your command window recognises the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">First, you need to make sure that your command window recognises the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">word &quot;python&quot; as an instruction to start the interpreter.&nbsp; If you have</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">word &quot;python&quot; as an instruction to start the interpreter.&nbsp; If you have</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">opened a command window, you should try entering the command &quot;python&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">opened a command window, you should try entering the command &quot;python&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and hitting return.:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and hitting return.:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; C:\Users\YourName&gt; python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; C:\Users\YourName&gt; python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You should then see something like:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You should then see something like:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; Python <span class="TextSegSigDiff">3</span>.3<span class="TextSegSigDiff">.0</span> (<span class="TextSegSigDiff">v3.3.0:bd8afb90ebf2</span>, <span class="TextSegSigDiff">Sep</span> <span class="TextSegSigDiff">29</span> 2012, 1<span class="TextSegSigDiff">0:55:48</span>) [MSC v.1<span class="TextSegSigDiff">6</span>00 32 bit (Intel)] on win32</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; Python <span class="TextSegSigDiff">2.7</span>.3 (<span class="TextSegSigDiff">d</span><span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">fault</span>, <span class="TextSegSigDiff">A</span><span class="TextSegSigDiff">pr</span> <span class="TextSegSigDiff">10</span> 2012, <span class="TextSegSigDiff">22.7</span>1<span class="TextSegSigDiff">:26</span>) [MSC v.1<span class="TextSegSigDiff">5</span>00 32 bit (Intel)] on win32</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You have started the interpreter in &quot;interactive mode&quot;. That means you</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You have started the interpreter in &quot;interactive mode&quot;. That means you</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">can enter Python statements or expressions interactively and have them</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">can enter Python statements or expressions interactively and have them</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">executed or evaluated while you wait.&nbsp; This is one of Python's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">executed or evaluated while you wait.&nbsp; This is one of Python's</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">strongest features.&nbsp; Check it by entering a few expressions of your</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">strongest features.&nbsp; Check it by entering a few expressions of your</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">choice and seeing the results:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">choice and seeing the results:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>&quot;Hello&quot;<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegInsigDiff"> </span>&quot;Hello&quot;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; Hello</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; Hello</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; &quot;Hello&quot; * 3</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; &quot;Hello&quot; * 3</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'HelloHelloHello'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'HelloHelloHello'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Many people use the interactive mode as a convenient yet highly</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Many people use the interactive mode as a convenient yet highly</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">programmable calculator.&nbsp; When you want to end your interactive Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">programmable calculator.&nbsp; When you want to end your interactive Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">session, hold the &quot;Ctrl&quot; key down while you enter a &quot;Z&quot;, then hit the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">session, hold the &quot;Ctrl&quot; key down while you enter a &quot;Z&quot;, then hit the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;&quot;Enter&quot;&quot; key to get back to your Windows command prompt.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;&quot;Enter&quot;&quot; key to get back to your Windows command prompt.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">You may also find that you have a Start-menu entry such as Start ‣</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You may also find that you have a Start-menu entry such as Start ‣</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">Programs ‣ Python <span class="TextSegSigDiff">3.3</span> ‣ Python (command line) that results in you</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Programs ‣ Python <span class="TextSegSigDiff">2.7</span> ‣ Python (command line) that results in you</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">seeing the &quot;&gt;&gt;&gt;&quot; prompt in a new window.&nbsp; If so, the window will</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">seeing the &quot;&gt;&gt;&gt;&quot; prompt in a new window.&nbsp; If so, the window will</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">disappear after you enter the &quot;Ctrl-Z&quot; character; Windows is running a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">disappear after you enter the &quot;Ctrl-Z&quot; character; Windows is running a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">single &quot;python&quot; command in the window, and closes it when you</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">single &quot;python&quot; command in the window, and closes it when you</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">terminate the interpreter.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">terminate the interpreter.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If the &quot;python&quot; command, instead of displaying the interpreter prompt</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If the &quot;python&quot; command, instead of displaying the interpreter prompt</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;&gt;&gt;&gt;&quot;, gives you a message like:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;&gt;&gt;&gt;&quot;, gives you a message like:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'python' is not recognized as an internal or external command, operable program or batch file.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'python' is not recognized as an internal or external command, operable program or batch file.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">[image: Adding Python to DOS Path][image]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">[image: Adding Python to DOS Path][image]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Adding Python to DOS Path</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Adding Python to DOS Path</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python is not added to the DOS path by default.&nbsp; This screencast will</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python is not added to the DOS path by default.&nbsp; This screencast will</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">walk you through the steps to add the correct entry to the *System</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">walk you through the steps to add the correct entry to the *System</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Path*, allowing Python to be executed from the command-line by all</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Path*, allowing Python to be executed from the command-line by all</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">users.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">users.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">or:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">or:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Bad command or filename</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Bad command or filename</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">then you need to make sure that your computer knows where to find the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">then you need to make sure that your computer knows where to find the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python interpreter.&nbsp; To do this you will have to modify a setting</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python interpreter.&nbsp; To do this you will have to modify a setting</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">called PATH, which is a list of directories where Windows will look</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">called PATH, which is a list of directories where Windows will look</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for programs.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for programs.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You should arrange for Python's installation directory to be added to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You should arrange for Python's installation directory to be added to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the PATH of every command window as it starts.&nbsp; If you installed</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the PATH of every command window as it starts.&nbsp; If you installed</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python fairly recently then the command</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python fairly recently then the command</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; dir C:\py*</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; dir C:\py*</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">will probably tell you where it is installed; the usual location is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">will probably tell you where it is installed; the usual location is</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">something like &quot;C:\Python<span class="TextSegSigDiff">33</span>&quot;.&nbsp; Otherwise you will be reduced to a</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">something like &quot;C:\Python<span class="TextSegSigDiff">27</span>&quot;.&nbsp; Otherwise you will be reduced to a</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">search of your whole disk ... use Tools ‣ Find or hit the Search</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">search of your whole disk ... use Tools ‣ Find or hit the Search</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">button and look for &quot;python.exe&quot;.&nbsp; Supposing you discover that Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">button and look for &quot;python.exe&quot;.&nbsp; Supposing you discover that Python</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">is installed in the &quot;C:\Python<span class="TextSegSigDiff">33</span>&quot; directory (the default at the time</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">is installed in the &quot;C:\Python<span class="TextSegSigDiff">27</span>&quot; directory (the default at the time</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">of writing), you should make sure that entering the command</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">of writing), you should make sure that entering the command</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; c:\Python<span class="TextSegSigDiff">33</span>\python</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; c:\Python<span class="TextSegSigDiff">27</span>\python</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">starts up the interpreter as above (and don't forget you'll need a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">starts up the interpreter as above (and don't forget you'll need a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;&quot;Ctrl-Z&quot;&quot; and an &quot;&quot;Enter&quot;&quot; to get out of it). Once you have verified</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;&quot;Ctrl-Z&quot;&quot; and an &quot;&quot;Enter&quot;&quot; to get out of it). Once you have verified</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the directory, you can add it to the system path to make it easier to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the directory, you can add it to the system path to make it easier to</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">start Python by just running the &quot;python&quot; command. This is currently</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">start Python by just running the &quot;python&quot; command. This is currently</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">an option in the installer as of CPython <span class="TextSegSigDiff">3.3</span>.</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">an option in the installer as of CPython <span class="TextSegSigDiff">2.7</span>.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">More information about environment variables can be found on the Using</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">More information about environment variables can be found on the Using</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python on Windows page.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python on Windows page.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I make Python scripts executable?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I make Python scripts executable?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">========================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">========================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">On Windows, the standard Python installer already associates the .py</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">On Windows, the standard Python installer already associates the .py</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">extension with a file type (Python.File) and gives that file type an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">extension with a file type (Python.File) and gives that file type an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">open command that runs the interpreter (&quot;D:\Program</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">open command that runs the interpreter (&quot;D:\Program</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Files\Python\python.exe &quot;%1&quot; %*&quot;).&nbsp; This is enough to make scripts</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Files\Python\python.exe &quot;%1&quot; %*&quot;).&nbsp; This is enough to make scripts</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">executable from the command prompt as 'foo.py'.&nbsp; If you'd rather be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">executable from the command prompt as 'foo.py'.&nbsp; If you'd rather be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">able to execute the script by simple typing 'foo' with no extension</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">able to execute the script by simple typing 'foo' with no extension</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you need to add .py to the PATHEXT environment variable.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you need to add .py to the PATHEXT environment variable.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Why does Python sometimes take so long to start?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Why does Python sometimes take so long to start?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Usually Python starts very quickly on Windows, but occasionally there</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Usually Python starts very quickly on Windows, but occasionally there</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">are bug reports that Python suddenly begins to take a long time to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">are bug reports that Python suddenly begins to take a long time to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">start up.&nbsp; This is made even more puzzling because Python will work</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">start up.&nbsp; This is made even more puzzling because Python will work</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">fine on other Windows systems which appear to be configured</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">fine on other Windows systems which appear to be configured</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">identically.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">identically.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The problem may be caused by a misconfiguration of virus checking</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The problem may be caused by a misconfiguration of virus checking</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">software on the problem machine.&nbsp; Some virus scanners have been known</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">software on the problem machine.&nbsp; Some virus scanners have been known</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to introduce startup overhead of two orders of magnitude when the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to introduce startup overhead of two orders of magnitude when the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">scanner is configured to monitor all reads from the filesystem.&nbsp; Try</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">scanner is configured to monitor all reads from the filesystem.&nbsp; Try</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">checking the configuration of virus scanning software on your systems</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">checking the configuration of virus scanning software on your systems</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to ensure that they are indeed configured identically. McAfee, when</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to ensure that they are indeed configured identically. McAfee, when</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">configured to scan all file system read activity, is a particular</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">configured to scan all file system read activity, is a particular</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">offender.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">offender.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I make an executable from a Python script?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I make an executable from a Python script?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=================================================</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">See http://<span class="TextSegSigDiff">c</span><span class="TextSegSigDiff">x-freez</span>e.<span class="TextSegSigDiff">sourcef</span>org<span class="TextSegSigDiff">e.net</span>/ for a distutils extension that</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">See http://<span class="TextSegSigDiff">www.py2ex</span>e.org/ for a distutils extension that<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">allows</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">allows</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span>to create console and GUI executables from Python code.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">to create console and GUI executables from Python code.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">py2exe,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">most</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">popular</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">extension</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">building</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">2.x-based</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">executables,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">does</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">not</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">yet</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">support</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">3</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">but</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">a</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">version</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">that</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">does</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">is</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">in</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">development.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Is a &quot;*.pyd&quot; file the same as a DLL?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Is a &quot;*.pyd&quot; file the same as a DLL?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">====================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">====================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">Yes, .pyd files are dll's, but there are a few differences.&nbsp; If you</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Yes, .pyd files are dll's, but there are a few differences.&nbsp; If you</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">have a DLL named &quot;foo.pyd&quot;, then it must have a function</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">have a DLL named &quot;foo.pyd&quot;, then it must have a function<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;initfoo()&quot;.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;PyInit_foo()&quot;.</span><span class="TextSegInsigDiff">&nbsp; </span>You can then write Python &quot;import foo&quot;, and Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">You can then write Python &quot;import foo&quot;, and Python<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">search</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">search</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">for</span><span class="TextSegInsigDiff"> </span>foo.pyd (as well as foo.py, foo.pyc) and if it finds</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">foo.pyd (as well as foo.py, foo.pyc) and if it finds<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">it,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">attempt</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">it,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">will</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">attempt</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">t</span>o call &quot;<span class="TextSegSigDiff">Py</span><span class="TextSegInsigDiff">I</span>nit<span class="TextSegSigDiff">_</span>foo()&quot; to initialize it.&nbsp; You do not</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">t</span>o call &quot;<span class="TextSegInsigDiff">i</span>nitfoo()&quot; to initialize it.&nbsp; You do not<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">link</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">.exe</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">link</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">your</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">.exe</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span>foo.lib, as that would cause Windows to require</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">foo.lib, as that would cause Windows to require<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">DLL</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">present.</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">DLL</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">to</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">be</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">present.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note that the search path for foo.pyd is PYTHONPATH, not the same as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note that the search path for foo.pyd is PYTHONPATH, not the same as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the path that Windows uses to search for foo.dll.&nbsp; Also, foo.pyd need</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the path that Windows uses to search for foo.dll.&nbsp; Also, foo.pyd need</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">not be present to run your program, whereas if you linked your program</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">not be present to run your program, whereas if you linked your program</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">with a dll, the dll is required.&nbsp; Of course, foo.pyd is required if</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">with a dll, the dll is required.&nbsp; Of course, foo.pyd is required if</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you want to say &quot;import foo&quot;.&nbsp; In a DLL, linkage is declared in the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you want to say &quot;import foo&quot;.&nbsp; In a DLL, linkage is declared in the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">source code with &quot;__declspec(dllexport)&quot;. In a .pyd, linkage is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">source code with &quot;__declspec(dllexport)&quot;. In a .pyd, linkage is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">defined in a list of available functions.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">defined in a list of available functions.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How can I embed Python into a Windows application?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How can I embed Python into a Windows application?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Embedding the Python interpreter in a Windows app can be summarized as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Embedding the Python interpreter in a Windows app can be summarized as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">follows:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">follows:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">1. Do _not_ build Python into your .exe file directly.&nbsp; On Windows,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">1. Do _not_ build Python into your .exe file directly.&nbsp; On Windows,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Python must be a DLL to handle importing modules that are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Python must be a DLL to handle importing modules that are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; themselves DLL's.&nbsp; (This is the first key undocumented fact.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; themselves DLL's.&nbsp; (This is the first key undocumented fact.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Instead, link to &quot;python*NN*.dll&quot;; it is typically installed in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Instead, link to &quot;python*NN*.dll&quot;; it is typically installed in</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &quot;C:\Windows\System&quot;.&nbsp; *NN* is the Python version, a number such as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &quot;C:\Windows\System&quot;.&nbsp; *NN* is the Python version, a number such as</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &quot;<span class="TextSegSigDiff">33</span>&quot; for Python <span class="TextSegSigDiff">3.3</span>.</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &quot;<span class="TextSegSigDiff">27</span>&quot; for Python <span class="TextSegSigDiff">2.7</span>.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; You can link to Python in two different ways.&nbsp; Load-time linking</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; You can link to Python in two different ways.&nbsp; Load-time linking</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; means linking against &quot;python*NN*.lib&quot;, while run-time linking</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; means linking against &quot;python*NN*.lib&quot;, while run-time linking</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; means linking against &quot;python*NN*.dll&quot;.&nbsp; (General note:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; means linking against &quot;python*NN*.dll&quot;.&nbsp; (General note:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &quot;python*NN*.lib&quot; is the so-called &quot;import lib&quot; corresponding to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &quot;python*NN*.lib&quot; is the so-called &quot;import lib&quot; corresponding to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &quot;python*NN*.dll&quot;.&nbsp; It merely defines symbols for the linker.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &quot;python*NN*.dll&quot;.&nbsp; It merely defines symbols for the linker.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Run-time linking greatly simplifies link options; everything</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Run-time linking greatly simplifies link options; everything</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; happens at run time.&nbsp; Your code must load &quot;python*NN*.dll&quot; using</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; happens at run time.&nbsp; Your code must load &quot;python*NN*.dll&quot; using</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; the Windows &quot;LoadLibraryEx()&quot; routine.&nbsp; The code must also use</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; the Windows &quot;LoadLibraryEx()&quot; routine.&nbsp; The code must also use</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; access routines and data in &quot;python*NN*.dll&quot; (that is, Python's C</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; access routines and data in &quot;python*NN*.dll&quot; (that is, Python's C</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; API's) using pointers obtained by the Windows &quot;GetProcAddress()&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; API's) using pointers obtained by the Windows &quot;GetProcAddress()&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; routine.&nbsp; Macros can make using these pointers transparent to any C</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; routine.&nbsp; Macros can make using these pointers transparent to any C</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; code that calls routines in Python's C API.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; code that calls routines in Python's C API.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Borland note: convert &quot;python*NN*.lib&quot; to OMF format using</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Borland note: convert &quot;python*NN*.lib&quot; to OMF format using</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Coff2Omf.exe first.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Coff2Omf.exe first.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">2. If you use SWIG, it is easy to create a Python &quot;extension</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">2. If you use SWIG, it is easy to create a Python &quot;extension</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; module&quot; that will make the app's data and methods available to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; module&quot; that will make the app's data and methods available to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Python. SWIG will handle just about all the grungy details for you.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Python. SWIG will handle just about all the grungy details for you.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; The result is C code that you link *into* your .exe file (!)&nbsp; You</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; The result is C code that you link *into* your .exe file (!)&nbsp; You</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; do _not_ have to create a DLL file, and this also simplifies</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; do _not_ have to create a DLL file, and this also simplifies</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; linking.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; linking.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">3. SWIG will create an init function (a C function) whose name</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">3. SWIG will create an init function (a C function) whose name</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; depends on the name of the extension module.&nbsp; For example, if the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; depends on the name of the extension module.&nbsp; For example, if the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; name of the module is leo, the init function will be called</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; name of the module is leo, the init function will be called</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; initleo().&nbsp; If you use SWIG shadow classes, as you should, the init</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; initleo().&nbsp; If you use SWIG shadow classes, as you should, the init</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; function will be called initleoc().&nbsp; This initializes a mostly</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; function will be called initleoc().&nbsp; This initializes a mostly</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; hidden helper class used by the shadow class.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; hidden helper class used by the shadow class.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; The reason you can link the C code in step 2 into your .exe file is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; The reason you can link the C code in step 2 into your .exe file is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; that calling the initialization function is equivalent to importing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; that calling the initialization function is equivalent to importing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; the module into Python! (This is the second key undocumented fact.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; the module into Python! (This is the second key undocumented fact.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">4. In short, you can use the following code to initialize the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">4. In short, you can use the following code to initialize the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Python interpreter with your extension module.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Python interpreter with your extension module.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; #include &quot;python.h&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; #include &quot;python.h&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; Py_Initialize();&nbsp; // Initialize Python.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; Py_Initialize();&nbsp; // Initialize Python.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; initmyAppc();&nbsp; // Initialize (import) the helper class.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; initmyAppc();&nbsp; // Initialize (import) the helper class.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; PyRun_SimpleString(&quot;import myApp&quot;);&nbsp; // Import the shadow class.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; PyRun_SimpleString(&quot;import myApp&quot;);&nbsp; // Import the shadow class.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">5. There are two problems with Python's C API which will become</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">5. There are two problems with Python's C API which will become</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; apparent if you use a compiler other than MSVC, the compiler used</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; apparent if you use a compiler other than MSVC, the compiler used</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; to build pythonNN.dll.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; to build pythonNN.dll.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Problem 1: The so-called &quot;Very High Level&quot; functions that take FILE</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Problem 1: The so-called &quot;Very High Level&quot; functions that take FILE</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; * arguments will not work in a multi-compiler environment because</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; * arguments will not work in a multi-compiler environment because</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; each compiler's notion of a struct FILE will be different.&nbsp; From an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; each compiler's notion of a struct FILE will be different.&nbsp; From an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; implementation standpoint these are very _low_ level functions.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; implementation standpoint these are very _low_ level functions.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Problem 2: SWIG generates the following code when generating</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Problem 2: SWIG generates the following code when generating</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; wrappers to void functions:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; wrappers to void functions:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; Py_INCREF(Py_None);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; Py_INCREF(Py_None);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; _resultobj = Py_None;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; _resultobj = Py_None;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; return _resultobj;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; return _resultobj;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Alas, Py_None is a macro that expands to a reference to a complex</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Alas, Py_None is a macro that expands to a reference to a complex</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; data structure called _Py_NoneStruct inside pythonNN.dll.&nbsp; Again,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; data structure called _Py_NoneStruct inside pythonNN.dll.&nbsp; Again,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; this code will fail in a mult-compiler environment.&nbsp; Replace such</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; this code will fail in a mult-compiler environment.&nbsp; Replace such</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; code by:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; code by:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; return Py_BuildValue(&quot;&quot;);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; return Py_BuildValue(&quot;&quot;);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; It may be possible to use SWIG's &quot;%typemap&quot; command to make the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; It may be possible to use SWIG's &quot;%typemap&quot; command to make the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; change automatically, though I have not been able to get this to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; change automatically, though I have not been able to get this to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; work (I'm a complete SWIG newbie).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; work (I'm a complete SWIG newbie).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">6. Using a Python shell script to put up a Python interpreter</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">6. Using a Python shell script to put up a Python interpreter</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; window from inside your Windows app is not a good idea; the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; window from inside your Windows app is not a good idea; the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; resulting window will be independent of your app's windowing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; resulting window will be independent of your app's windowing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; system.&nbsp; Rather, you (or the wxPythonWindow class) should create a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; system.&nbsp; Rather, you (or the wxPythonWindow class) should create a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &quot;native&quot; interpreter window.&nbsp; It is easy to connect that window to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &quot;native&quot; interpreter window.&nbsp; It is easy to connect that window to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; the Python interpreter.&nbsp; You can redirect Python's i/o to _any_</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; the Python interpreter.&nbsp; You can redirect Python's i/o to _any_</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; object that supports read and write, so all you need is a Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; object that supports read and write, so all you need is a Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; object (defined in your extension module) that contains read() and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; object (defined in your extension module) that contains read() and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; write() methods.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; write() methods.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I keep editors from inserting tabs into my Python source?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I keep editors from inserting tabs into my Python source?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">================================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">================================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The FAQ does not recommend using tabs, and the Python style guide,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The FAQ does not recommend using tabs, and the Python style guide,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">**PEP 8**, recommends 4 spaces for distributed Python code; this is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">**PEP 8**, recommends 4 spaces for distributed Python code; this is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">also the Emacs python-mode default.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">also the Emacs python-mode default.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Under any editor, mixing tabs and spaces is a bad idea.&nbsp; MSVC is no</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Under any editor, mixing tabs and spaces is a bad idea.&nbsp; MSVC is no</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">different in this respect, and is easily configured to use spaces:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">different in this respect, and is easily configured to use spaces:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Take Tools ‣ Options ‣ Tabs, and for file type &quot;Default&quot; set &quot;Tab</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Take Tools ‣ Options ‣ Tabs, and for file type &quot;Default&quot; set &quot;Tab</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">size&quot; and &quot;Indent size&quot; to 4, and select the &quot;Insert spaces&quot; radio</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">size&quot; and &quot;Indent size&quot; to 4, and select the &quot;Insert spaces&quot; radio</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">button.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">button.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">raises</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;IndentationError&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;TabError&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">if</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">mixed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tabs</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">spaces are causing problems in leading<span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">whitespace.</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">You</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">may</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">also</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">run</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">you</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">suspect</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">mixed</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">tabs</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">and</span><span class="TextSegInsigDiff"> </span>spaces are causing problems in leading</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">whitespace,</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">run</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">Python</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">with</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;-t&quot;</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">switch</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">or</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">run</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;tabnanny&quot;</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span><span class="TextSegInsigDiff"> </span><span class="TextSegSigDiff">&quot;tabnanny&quot;</span><span class="TextSegInsigDiff"> </span>module to check a directory tree in batch mode.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">module to check a directory tree in batch mode.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I check for a keypress without blocking?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I check for a keypress without blocking?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===============================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===============================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Use the msvcrt module.&nbsp; This is a standard Windows-specific extension</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Use the msvcrt module.&nbsp; This is a standard Windows-specific extension</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">module. It defines a function &quot;kbhit()&quot; which checks whether a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">module. It defines a function &quot;kbhit()&quot; which checks whether a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">keyboard hit is present, and &quot;getch()&quot; which gets one character</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">keyboard hit is present, and &quot;getch()&quot; which gets one character</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">without echoing it.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">without echoing it.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I emulate os.kill() in Windows?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I emulate os.kill() in Windows?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">======================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">======================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Prior to Python 2.7 and 3.2, to terminate a process, you can use</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Prior to Python 2.7 and 3.2, to terminate a process, you can use</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;ctypes&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;ctypes&quot;:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; import ctypes</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import ctypes</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def kill(pid):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def kill(pid):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;kill function for Win32&quot;&quot;&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;kill function for Win32&quot;&quot;&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; kernel32 = ctypes.windll.kernel32</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; kernel32 = ctypes.windll.kernel32</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; handle = kernel32.OpenProcess(1, 0, pid)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; handle = kernel32.OpenProcess(1, 0, pid)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return (0 != kernel32.TerminateProcess(handle, 0))</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return (0 != kernel32.TerminateProcess(handle, 0))</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In 2.7 and 3.2, &quot;os.kill()&quot; is implemented similar to the above</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In 2.7 and 3.2, &quot;os.kill()&quot; is implemented similar to the above</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function, with the additional feature of being able to send &quot;Ctrl+C&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function, with the additional feature of being able to send &quot;Ctrl+C&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and &quot;Ctrl+Break&quot; to console subprocesses which are designed to handle</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and &quot;Ctrl+Break&quot; to console subprocesses which are designed to handle</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">those signals. See &quot;os.kill()&quot; for further details.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">those signals. See &quot;os.kill()&quot; for further details.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">How do I extract the downloaded documentation on Windows?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">How do I extract the downloaded documentation on Windows?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=========================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=========================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Sometimes, when you download the documentation package to a Windows</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Sometimes, when you download the documentation package to a Windows</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">machine using a web browser, the file extension of the saved file ends</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">machine using a web browser, the file extension of the saved file ends</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">up being .EXE. This is a mistake; the extension should be .TGZ.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">up being .EXE. This is a mistake; the extension should be .TGZ.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Simply rename the downloaded file to have the .TGZ extension, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Simply rename the downloaded file to have the .TGZ extension, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">WinZip will be able to handle it.&nbsp; (If your copy of WinZip doesn't,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">WinZip will be able to handle it.&nbsp; (If your copy of WinZip doesn't,</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">get a newer one from https://www.winzip.com.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">get a newer one from https://www.winzip.com.)</td>
</tr>
</table>
<br/>
</body>
</html>
