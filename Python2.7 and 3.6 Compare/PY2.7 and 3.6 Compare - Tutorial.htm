<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style>
.AlignLeft { text-align: left; }
.AlignCenter { text-align: center; }
.AlignRight { text-align: right; }
body { font-family: sans-serif; font-size: 11pt; }
img.AutoScale { max-width: 100%; max-height: 100%; }
td { vertical-align: top; padding-left: 4px; padding-right: 4px; }

tr.SectionGap td { font-size: 4px; border-left: none; border-top: none; border-bottom: 1px solid Black; border-right: 1px solid Black; }
tr.SectionAll td { border-left: none; border-top: none; border-bottom: 1px solid Black; border-right: 1px solid Black; }
tr.SectionBegin td { border-left: none; border-top: none; border-right: 1px solid Black; }
tr.SectionEnd td { border-left: none; border-top: none; border-bottom: 1px solid Black; border-right: 1px solid Black; }
tr.SectionMiddle td { border-left: none; border-top: none; border-right: 1px solid Black; }
tr.SubsectionAll td { border-left: none; border-top: none; border-bottom: 1px solid Gray; border-right: 1px solid Black; }
tr.SubsectionEnd td { border-left: none; border-top: none; border-bottom: 1px solid Gray; border-right: 1px solid Black; }
table.fc { border-top: 1px solid Black; border-left: 1px solid Black; width: 100%; font-family: monospace; font-size: 10pt; }
td.TextItemInsigMod { color: #000000; background-color: #EEEEFF; }
td.TextItemInsigOrphan { color: #000000; background-color: #FAEEFF; }
td.TextItemNum { color: #696969; background-color: #F0F0F0; }
td.TextItemSame { color: #000000; background-color: #FFFFFF; }
td.TextItemSigMod { color: #000000; background-color: #FFE3E3; }
td.TextItemSigOrphan { color: #000000; background-color: #F1E3FF; }
.TextSegInsigDiff { color: #0000FF; }
.TextSegReplacedDiff { color: #0000FF; font-style: italic; }
.TextSegSigDiff { color: #FF0000; }
td.TextItemInsigAdd { color: #000000; background-color: #EEEEFF; }
td.TextItemInsigDel { color: #000000; background-color: #EEEEFF; text-decoration: line-through; }
td.TextItemSigAdd { color: #000000; background-color: #FFE3E3; }
td.TextItemSigDel { color: #000000; background-color: #FFE3E3; text-decoration: line-through; }
</style>
<title>Text Compare</title>
</head>
<body>
Text Compare<br/>
Produced: 2017/8/8 21:05:02<br/>
&nbsp; &nbsp;
<br/>
Mode:&nbsp; All, Ignoring Unimportant &nbsp;
<br/>
Left base folder: C:\Users\vivia\Downloads\Python 3.6.2 &nbsp;
<br/>
Right base folder: C:\Users\vivia\Downloads\Python 2.7 &nbsp;
<br/>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\tutorial\classes.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Classes</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Classes</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*******</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*******</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Classes</span> <span class="TextSegSigDiff">provide</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">means</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">bundling</span> <span class="TextSegSigDiff">data</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">functionality</span> <span class="TextSegSigDiff">together.</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Creating</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">new</span> <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">creates</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">new</span> <span class="TextSegSigDiff">*type*</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">object,</span> <span class="TextSegSigDiff">allowing</span> <span class="TextSegSigDiff">new</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*instances*</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">type</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">made.</span>&nbsp; <span class="TextSegSigDiff">Each</span> <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">instance</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">have</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">attributes</span> <span class="TextSegSigDiff">attached</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">maintaining</span> <span class="TextSegSigDiff">its</span> <span class="TextSegSigDiff">state.</span>&nbsp; <span class="TextSegSigDiff">Class</span> <span class="TextSegSigDiff">instances</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">also</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">methods</span> <span class="TextSegSigDiff">(defined</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">its</span> <span class="TextSegSigDiff">class)</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">modifying</span> <span class="TextSegSigDiff">its</span> <span class="TextSegSigDiff">state.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Compared with other programming languages, Python's class mechanism</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Compared with other programming languages, Python's class mechanism</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">adds classes with a minimum of new syntax and semantics.&nbsp; It is a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">adds classes with a minimum of new syntax and semantics.&nbsp; It is a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">mixture of the class mechanisms found in C++ and Modula-3.&nbsp; Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">mixture of the class mechanisms found in C++ and Modula-3.&nbsp; Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">classes provide all the standard features of Object Oriented</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">classes provide all the standard features of Object Oriented</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Programming: the class inheritance mechanism allows multiple base</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Programming: the class inheritance mechanism allows multiple base</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">classes, a derived class can override any methods of its base class or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">classes, a derived class can override any methods of its base class or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">classes, and a method can call the method of a base class with the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">classes, and a method can call the method of a base class with the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">same name.&nbsp; Objects can contain arbitrary amounts and kinds of data.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">same name.&nbsp; Objects can contain arbitrary amounts and kinds of data.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">As is true for modules, classes partake of the dynamic nature of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">As is true for modules, classes partake of the dynamic nature of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python: they are created at runtime, and can be modified further after</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python: they are created at runtime, and can be modified further after</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">creation.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">creation.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">In C++ terminology, normally class members (including the data</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In C++ terminology, normally class members (including the data</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">members) are *public* (except see below Private Variables<span class="TextSegSigDiff">),</span> and <span class="TextSegSigDiff">all</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">members) are *public* (except see below Private Variables and <span class="TextSegSigDiff">Class-</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">member functions are *virtual*.&nbsp; As in <span class="TextSegSigDiff">Modula-3,</span> <span class="TextSegSigDiff">there</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">no</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">local</span> <span class="TextSegSigDiff">References),</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">all</span> member functions are *virtual*.&nbsp; As in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">shorthands for referencing the object's members <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">its</span> <span class="TextSegSigDiff">methods:</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Modula-3,</span> <span class="TextSegSigDiff">there</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">no</span> shorthands for referencing the object's members</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">method function is declared with an explici<span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">first</span> <span class="TextSegSigDiff">argumen</span>t</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">its</span> method<span class="TextSegSigDiff">s:</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">method</span> function is declared with an explicit</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">representing the object, which is provided implicitl<span class="TextSegSigDiff">y</span> <span class="TextSegSigDiff">b</span>y <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">call.</span>&nbsp; <span class="TextSegSigDiff">As</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">first</span> <span class="TextSegSigDiff">argument</span> representing the object, which is provided implicitly</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">in Smalltalk, classes themselves are objects.&nbsp; Th<span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">provides</span> <span class="TextSegSigDiff">semantic</span>s</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">call.</span>&nbsp; <span class="TextSegSigDiff">As</span> in Smalltalk, classes themselves are objects.&nbsp; Th<span class="TextSegSigDiff">i</span>s</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">for importing and renaming.&nbsp; Unlike C++ an<span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">Modula-3,</span> <span class="TextSegSigDiff">built-in</span> <span class="TextSegSigDiff">types</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">provides</span> <span class="TextSegSigDiff">semantics</span> for importing and renaming.&nbsp; Unlike C++ an<span class="TextSegSigDiff">d</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">can be used as base classes for extension by <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">user.</span>&nbsp; <span class="TextSegSigDiff">Also,</span> <span class="TextSegSigDiff">like</span> <span class="TextSegSigDiff">in</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Modula-3,</span> <span class="TextSegSigDiff">built-in</span> <span class="TextSegSigDiff">types</span> can be used as base classes for extension by</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">C++, most built-in operators with special <span class="TextSegSigDiff">syntax</span> <span class="TextSegSigDiff">(arithmetic</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">user.</span>&nbsp; <span class="TextSegSigDiff">Also,</span> <span class="TextSegSigDiff">like</span> <span class="TextSegSigDiff">in</span> C++, most built-in operators with special</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">operators, subscripting etc.) can be redefined for <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">instances.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">syntax</span> <span class="TextSegSigDiff">(arithmetic</span> operators, subscripting etc.) can be redefined for</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">instances.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(Lacking universally accepted terminology to talk about classes, I</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(Lacking universally accepted terminology to talk about classes, I</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">will make occasional use of Smalltalk and C++ terms.&nbsp; I would use</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">will make occasional use of Smalltalk and C++ terms.&nbsp; I would use</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Modula-3 terms, since its object-oriented semantics are closer to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Modula-3 terms, since its object-oriented semantics are closer to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">those of Python than C++, but I expect that few readers have heard of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">those of Python than C++, but I expect that few readers have heard of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">it.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">it.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A Word About Names and Objects</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A Word About Names and Objects</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==============================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==============================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Objects have individuality, and multiple names (in multiple scopes)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Objects have individuality, and multiple names (in multiple scopes)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">can be bound to the same object.&nbsp; This is known as aliasing in other</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">can be bound to the same object.&nbsp; This is known as aliasing in other</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">languages.&nbsp; This is usually not appreciated on a first glance at</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">languages.&nbsp; This is usually not appreciated on a first glance at</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python, and can be safely ignored when dealing with immutable basic</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python, and can be safely ignored when dealing with immutable basic</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">types (numbers, strings, tuples).&nbsp; However, aliasing has a possibly</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">types (numbers, strings, tuples).&nbsp; However, aliasing has a possibly</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">surprising effect on the semantics of Python code involving mutable</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">surprising effect on the semantics of Python code involving mutable</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">objects such as lists, dictionaries, and most other types. This is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">objects such as lists, dictionaries, and most other types. This is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">usually used to the benefit of the program, since aliases behave like</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">usually used to the benefit of the program, since aliases behave like</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">pointers in some respects.&nbsp; For example, passing an object is cheap</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">pointers in some respects.&nbsp; For example, passing an object is cheap</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">since only a pointer is passed by the implementation; and if a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">since only a pointer is passed by the implementation; and if a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function modifies an object passed as an argument, the caller will see</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function modifies an object passed as an argument, the caller will see</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the change --- this eliminates the need for two different argument</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the change --- this eliminates the need for two different argument</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">passing mechanisms as in Pascal.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">passing mechanisms as in Pascal.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python Scopes and Namespaces</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python Scopes and Namespaces</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">============================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">============================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Before introducing classes, I first have to tell you something about</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Before introducing classes, I first have to tell you something about</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python's scope rules.&nbsp; Class definitions play some neat tricks with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python's scope rules.&nbsp; Class definitions play some neat tricks with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">namespaces, and you need to know how scopes and namespaces work to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">namespaces, and you need to know how scopes and namespaces work to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">fully understand what's going on. Incidentally, knowledge about this</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">fully understand what's going on. Incidentally, knowledge about this</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">subject is useful for any advanced Python programmer.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">subject is useful for any advanced Python programmer.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Let's begin with some definitions.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Let's begin with some definitions.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A *namespace* is a mapping from names to objects.&nbsp; Most namespaces are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A *namespace* is a mapping from names to objects.&nbsp; Most namespaces are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">currently implemented as Python dictionaries, but that's normally not</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">currently implemented as Python dictionaries, but that's normally not</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">noticeable in any way (except for performance), and it may change in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">noticeable in any way (except for performance), and it may change in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the future.&nbsp; Examples of namespaces are: the set of built-in names</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the future.&nbsp; Examples of namespaces are: the set of built-in names</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(containing functions such as &quot;abs()&quot;, and built-in exception names);</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(containing functions such as &quot;abs()&quot;, and built-in exception names);</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the global names in a module; and the local names in a function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the global names in a module; and the local names in a function</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">invocation.&nbsp; In a sense the set of attributes of an object also form a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">invocation.&nbsp; In a sense the set of attributes of an object also form a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">namespace.&nbsp; The important thing to know about namespaces is that there</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">namespace.&nbsp; The important thing to know about namespaces is that there</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is absolutely no relation between names in different namespaces; for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is absolutely no relation between names in different namespaces; for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">instance, two different modules may both define a function &quot;maximize&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">instance, two different modules may both define a function &quot;maximize&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">without confusion --- users of the modules must prefix it with the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">without confusion --- users of the modules must prefix it with the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">module name.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">module name.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">By the way, I use the word *attribute* for any name following a dot</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">By the way, I use the word *attribute* for any name following a dot</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--- for example, in the expression &quot;z.real&quot;, &quot;real&quot; is an attribute of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--- for example, in the expression &quot;z.real&quot;, &quot;real&quot; is an attribute of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the object &quot;z&quot;.&nbsp; Strictly speaking, references to names in modules are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the object &quot;z&quot;.&nbsp; Strictly speaking, references to names in modules are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">attribute references: in the expression &quot;modname.funcname&quot;, &quot;modname&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">attribute references: in the expression &quot;modname.funcname&quot;, &quot;modname&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is a module object and &quot;funcname&quot; is an attribute of it.&nbsp; In this case</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is a module object and &quot;funcname&quot; is an attribute of it.&nbsp; In this case</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">there happens to be a straightforward mapping between the module's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">there happens to be a straightforward mapping between the module's</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">attributes and the global names defined in the module: they share the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">attributes and the global names defined in the module: they share the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">same namespace!&nbsp; [1]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">same namespace!&nbsp; [1]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Attributes may be read-only or writable.&nbsp; In the latter case,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Attributes may be read-only or writable.&nbsp; In the latter case,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">assignment to attributes is possible.&nbsp; Module attributes are writable:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">assignment to attributes is possible.&nbsp; Module attributes are writable:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you can write &quot;modname.the_answer = 42&quot;.&nbsp; Writable attributes may also</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you can write &quot;modname.the_answer = 42&quot;.&nbsp; Writable attributes may also</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">be deleted with the &quot;del&quot; statement.&nbsp; For example, &quot;del</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">be deleted with the &quot;del&quot; statement.&nbsp; For example, &quot;del</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">modname.the_answer&quot; will remove the attribute &quot;the_answer&quot; from the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">modname.the_answer&quot; will remove the attribute &quot;the_answer&quot; from the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">object named by &quot;modname&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">object named by &quot;modname&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Namespaces are created at different moments and have different</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Namespaces are created at different moments and have different</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">lifetimes.&nbsp; The namespace containing the built-in names is created</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">lifetimes.&nbsp; The namespace containing the built-in names is created</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">when the Python interpreter starts up, and is never deleted.&nbsp; The</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">when the Python interpreter starts up, and is never deleted.&nbsp; The</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">global namespace for a module is created when the module definition is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">global namespace for a module is created when the module definition is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">read in; normally, module namespaces also last until the interpreter</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">read in; normally, module namespaces also last until the interpreter</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">quits.&nbsp; The statements executed by the top-level invocation of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">quits.&nbsp; The statements executed by the top-level invocation of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">interpreter, either read from a script file or interactively, are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interpreter, either read from a script file or interactively, are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">considered part of a module called &quot;__main__&quot;, so they have their own</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">considered part of a module called &quot;__main__&quot;, so they have their own</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">global namespace.&nbsp; (The built-in names actually also live in a module;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">global namespace.&nbsp; (The built-in names actually also live in a module;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">this is called &quot;builtin<span class="TextSegSigDiff">s</span>&quot;.)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">this is called &quot;<span class="TextSegSigDiff">__</span>builtin<span class="TextSegSigDiff">__</span>&quot;.)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The local namespace for a function is created when the function is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The local namespace for a function is created when the function is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">called, and deleted when the function returns or raises an exception</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">called, and deleted when the function returns or raises an exception</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that is not handled within the function.&nbsp; (Actually, forgetting would</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that is not handled within the function.&nbsp; (Actually, forgetting would</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">be a better way to describe what actually happens.)&nbsp; Of course,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">be a better way to describe what actually happens.)&nbsp; Of course,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">recursive invocations each have their own local namespace.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">recursive invocations each have their own local namespace.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A *scope* is a textual region of a Python program where a namespace is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A *scope* is a textual region of a Python program where a namespace is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">directly accessible.&nbsp; &quot;Directly accessible&quot; here means that an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">directly accessible.&nbsp; &quot;Directly accessible&quot; here means that an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">unqualified reference to a name attempts to find the name in the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">unqualified reference to a name attempts to find the name in the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">namespace.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">namespace.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Although scopes are determined statically, they are used dynamically.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Although scopes are determined statically, they are used dynamically.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">At any time during execution, there are at least three nested scopes</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">At any time during execution, there are at least three nested scopes</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">whose namespaces are directly accessible:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">whose namespaces are directly accessible:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* the innermost scope, which is searched first, contains the local</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* the innermost scope, which is searched first, contains the local</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; names</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; names</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* the scopes of any enclosing functions, which are searched starting</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* the scopes of any enclosing functions, which are searched starting</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; with the nearest enclosing scope, contains non-local, but also non-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; with the nearest enclosing scope, contains non-local, but also non-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; global names</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; global names</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* the next-to-last scope contains the current module's global names</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* the next-to-last scope contains the current module's global names</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* the outermost scope (searched last) is the namespace containing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* the outermost scope (searched last) is the namespace containing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; built-in names</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; built-in names</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">If a name is declared global, then all references and assignments go</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If a name is declared global, then all references and assignments go</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">directly to the middle scope containing the module's global names.&nbsp; <span class="TextSegSigDiff">To</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">directly to the middle scope containing the module's global names.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">r<span class="TextSegSigDiff">ebind</span> variables found outside of the innermost scope<span class="TextSegSigDiff">,</span> <span class="TextSegSigDiff">th</span>e <span class="TextSegSigDiff">&quot;nonlocal&quot;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Othe</span>r<span class="TextSegSigDiff">wise,</span> <span class="TextSegSigDiff">all</span> variables found outside of the innermost scope <span class="TextSegSigDiff">ar</span>e</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">statement</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">used;</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">declared</span> <span class="TextSegSigDiff">nonlocal,</span> <span class="TextSegSigDiff">those</span> <span class="TextSegSigDiff">variables</span> <span class="TextSegSigDiff">are</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">read-only (an attempt to write to such a variable will simply create a</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">read-only (an attempt to write to such a variable will simply create a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*new* local variable in the innermost scope, leaving the identically</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*new* local variable in the innermost scope, leaving the identically</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">named outer variable unchanged).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">named outer variable unchanged).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Usually, the local scope references the local names of the (textually)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Usually, the local scope references the local names of the (textually)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">current function.&nbsp; Outside functions, the local scope references the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">current function.&nbsp; Outside functions, the local scope references the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">same namespace as the global scope: the module's namespace. Class</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">same namespace as the global scope: the module's namespace. Class</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">definitions place yet another namespace in the local scope.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">definitions place yet another namespace in the local scope.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It is important to realize that scopes are determined textually: the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It is important to realize that scopes are determined textually: the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">global scope of a function defined in a module is that module's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">global scope of a function defined in a module is that module's</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">namespace, no matter from where or by what alias the function is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">namespace, no matter from where or by what alias the function is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">called.&nbsp; On the other hand, the actual search for names is done</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">called.&nbsp; On the other hand, the actual search for names is done</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">dynamically, at run time --- however, the language definition is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">dynamically, at run time --- however, the language definition is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">evolving towards static name resolution, at &quot;compile&quot; time, so don't</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">evolving towards static name resolution, at &quot;compile&quot; time, so don't</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">rely on dynamic name resolution!&nbsp; (In fact, local variables are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">rely on dynamic name resolution!&nbsp; (In fact, local variables are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">already determined statically.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">already determined statically.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A special quirk of Python is that -- if no &quot;global&quot; statement is in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A special quirk of Python is that -- if no &quot;global&quot; statement is in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">effect -- assignments to names always go into the innermost scope.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">effect -- assignments to names always go into the innermost scope.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Assignments do not copy data --- they just bind names to objects.&nbsp; The</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Assignments do not copy data --- they just bind names to objects.&nbsp; The</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">same is true for deletions: the statement &quot;del x&quot; removes the binding</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">same is true for deletions: the statement &quot;del x&quot; removes the binding</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of &quot;x&quot; from the namespace referenced by the local scope.&nbsp; In fact, all</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of &quot;x&quot; from the namespace referenced by the local scope.&nbsp; In fact, all</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">operations that introduce new names use the local scope: in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">operations that introduce new names use the local scope: in</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">particular, &quot;import&quot; statements and function definitions bind the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">particular, &quot;import&quot; statements and function definitions bind the</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">module or function name in the local scope.</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">module or function name in the local scope.&nbsp; <span class="TextSegSigDiff">(The</span> <span class="TextSegSigDiff">&quot;global&quot;</span> <span class="TextSegSigDiff">statement</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">&quot;global&quot;</span> <span class="TextSegSigDiff">statement</span> can be used to indicate that particular</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">can be used to indicate that particul<span class="TextSegSigDiff">ar</span> <span class="TextSegSigDiff">v</span>ar<span class="TextSegSigDiff">iables</span> <span class="TextSegSigDiff">live</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">global</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">variables</span> <span class="TextSegSigDiff">live</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">global</span> <span class="TextSegSigDiff">scope</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">should</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">rebound</span> <span class="TextSegSigDiff">there;</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;nonlocal&quot;</span> <span class="TextSegSigDiff">statement</span> <span class="TextSegSigDiff">indicates</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">particular</span> <span class="TextSegSigDiff">variables</span> <span class="TextSegSigDiff">live</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">an</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">enclosing</span> <span class="TextSegSigDiff">scope</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">should</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">rebound</span> <span class="TextSegSigDiff">there.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Scopes</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">Namespaces</span> <span class="TextSegSigDiff">Example</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">-----------------------------</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">This</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">example</span> <span class="TextSegSigDiff">demonstrating</span> <span class="TextSegSigDiff">how</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">reference</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">different</span> <span class="TextSegSigDiff">scopes</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">namespaces,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">how</span> <span class="TextSegSigDiff">&quot;global&quot;</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">&quot;nonlocal&quot;</span> <span class="TextSegSigDiff">affect</span> <span class="TextSegSigDiff">variable</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">binding:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">def</span> <span class="TextSegSigDiff">scope_test():</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">def</span> <span class="TextSegSigDiff">do_local():</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">spam</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">&quot;local</span> <span class="TextSegSigDiff">spam&quot;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">def</span> <span class="TextSegSigDiff">do_nonlocal():</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">nonlocal</span> <span class="TextSegSigDiff">spam</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">spam</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">&quot;nonlocal</span> <span class="TextSegSigDiff">spam&quot;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">def</span> <span class="TextSegSigDiff">do_global():</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">global</span> <span class="TextSegSigDiff">spam</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">spam</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">&quot;global</span> <span class="TextSegSigDiff">spam&quot;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">spam</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">&quot;test</span> <span class="TextSegSigDiff">spam&quot;</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">do_local()</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">print(&quot;After</span> <span class="TextSegSigDiff">local</span> <span class="TextSegSigDiff">assignment:&quot;,</span> <span class="TextSegSigDiff">spam)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">do_nonlocal()</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">print(&quot;After</span> <span class="TextSegSigDiff">nonlocal</span> <span class="TextSegSigDiff">assignment:&quot;,</span> <span class="TextSegSigDiff">spam)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">do_global()</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">print(&quot;After</span> <span class="TextSegSigDiff">global</span> <span class="TextSegSigDiff">assignment:&quot;,</span> <span class="TextSegSigDiff">spam)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; scope<span class="TextSegSigDiff">_test(</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">scope<span class="TextSegSigDiff">.</span>)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">print(&quot;In</span> <span class="TextSegSigDiff">global</span> <span class="TextSegSigDiff">scope:&quot;,</span> <span class="TextSegSigDiff">spam)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">output</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">example</span> <span class="TextSegSigDiff">code</span> <span class="TextSegSigDiff">is:</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">After</span> <span class="TextSegSigDiff">local</span> <span class="TextSegSigDiff">assignment:</span> <span class="TextSegSigDiff">test</span> <span class="TextSegSigDiff">spam</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">After</span> <span class="TextSegSigDiff">nonlocal</span> <span class="TextSegSigDiff">assignment:</span> <span class="TextSegSigDiff">nonlocal</span> <span class="TextSegSigDiff">spam</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">After</span> <span class="TextSegSigDiff">global</span> <span class="TextSegSigDiff">assignment:</span> <span class="TextSegSigDiff">nonlocal</span> <span class="TextSegSigDiff">spam</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">In</span> <span class="TextSegSigDiff">global</span> <span class="TextSegSigDiff">scope:</span> <span class="TextSegSigDiff">global</span> <span class="TextSegSigDiff">spam</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Note</span> <span class="TextSegSigDiff">how</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">*local*</span> <span class="TextSegSigDiff">assignment</span> <span class="TextSegSigDiff">(which</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">default)</span> <span class="TextSegSigDiff">didn't</span> <span class="TextSegSigDiff">change</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*scope_test*'s</span> <span class="TextSegSigDiff">binding</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">*spam*.</span>&nbsp; <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">&quot;nonlocal&quot;</span> <span class="TextSegSigDiff">assignment</span> <span class="TextSegSigDiff">changed</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*scope_test*'s</span> <span class="TextSegSigDiff">binding</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">*spam*,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;global&quot;</span> <span class="TextSegSigDiff">assignment</span> <span class="TextSegSigDiff">changed</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">module-level</span> <span class="TextSegSigDiff">binding.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">You</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">also</span> <span class="TextSegSigDiff">see</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">there</span> <span class="TextSegSigDiff">was</span> <span class="TextSegSigDiff">no</span> <span class="TextSegSigDiff">previous</span> <span class="TextSegSigDiff">binding</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">*spam*</span> <span class="TextSegSigDiff">before</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;global&quot;</span> <span class="TextSegSigDiff">assignment.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A First Look at Classes</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A First Look at Classes</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=======================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=======================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Classes introduce a little bit of new syntax, three new object types,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Classes introduce a little bit of new syntax, three new object types,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and some new semantics.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and some new semantics.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Class Definition Syntax</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Class Definition Syntax</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The simplest form of class definition looks like this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The simplest form of class definition looks like this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class ClassName:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class ClassName:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &lt;statement-1&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &lt;statement-1&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; .</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; .</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; .</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; .</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; .</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; .</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &lt;statement-N&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &lt;statement-N&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Class definitions, like function definitions (&quot;def&quot; statements) must</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Class definitions, like function definitions (&quot;def&quot; statements) must</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">be executed before they have any effect.&nbsp; (You could conceivably place</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">be executed before they have any effect.&nbsp; (You could conceivably place</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a class definition in a branch of an &quot;if&quot; statement, or inside a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a class definition in a branch of an &quot;if&quot; statement, or inside a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In practice, the statements inside a class definition will usually be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In practice, the statements inside a class definition will usually be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function definitions, but other statements are allowed, and sometimes</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function definitions, but other statements are allowed, and sometimes</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">useful --- we'll come back to this later.&nbsp; The function definitions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">useful --- we'll come back to this later.&nbsp; The function definitions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">inside a class normally have a peculiar form of argument list,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">inside a class normally have a peculiar form of argument list,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">dictated by the calling conventions for methods --- again, this is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">dictated by the calling conventions for methods --- again, this is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">explained later.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">explained later.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When a class definition is entered, a new namespace is created, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When a class definition is entered, a new namespace is created, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">used as the local scope --- thus, all assignments to local variables</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">used as the local scope --- thus, all assignments to local variables</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">go into this new namespace.&nbsp; In particular, function definitions bind</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">go into this new namespace.&nbsp; In particular, function definitions bind</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the name of the new function here.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the name of the new function here.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When a class definition is left normally (via the end), a *class</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When a class definition is left normally (via the end), a *class</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">object* is created.&nbsp; This is basically a wrapper around the contents</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">object* is created.&nbsp; This is basically a wrapper around the contents</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of the namespace created by the class definition; we'll learn more</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of the namespace created by the class definition; we'll learn more</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">about class objects in the next section.&nbsp; The original local scope</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">about class objects in the next section.&nbsp; The original local scope</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(the one in effect just before the class definition was entered) is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(the one in effect just before the class definition was entered) is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">reinstated, and the class object is bound here to the class name given</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">reinstated, and the class object is bound here to the class name given</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in the class definition header (&quot;ClassName&quot; in the example).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in the class definition header (&quot;ClassName&quot; in the example).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Class Objects</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Class Objects</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Class objects support two kinds of operations: attribute references</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Class objects support two kinds of operations: attribute references</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and instantiation.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and instantiation.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*Attribute references* use the standard syntax used for all attribute</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*Attribute references* use the standard syntax used for all attribute</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">references in Python: &quot;obj.name&quot;.&nbsp; Valid attribute names are all the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">references in Python: &quot;obj.name&quot;.&nbsp; Valid attribute names are all the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">names that were in the class's namespace when the class object was</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">names that were in the class's namespace when the class object was</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">created.&nbsp; So, if the class definition looked like this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">created.&nbsp; So, if the class definition looked like this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class MyClass:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class MyClass:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;A simple example class&quot;&quot;&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;A simple example class&quot;&quot;&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; i = 12345</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; i = 12345</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def f(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def f(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 'hello world'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 'hello world'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">then &quot;MyClass.i&quot; and &quot;MyClass.f&quot; are valid attribute references,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">then &quot;MyClass.i&quot; and &quot;MyClass.f&quot; are valid attribute references,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">returning an integer and a function object, respectively. Class</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">returning an integer and a function object, respectively. Class</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">attributes can also be assigned to, so you can change the value of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">attributes can also be assigned to, so you can change the value of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;MyClass.i&quot; by assignment. &quot;__doc__&quot; is also a valid attribute,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;MyClass.i&quot; by assignment. &quot;__doc__&quot; is also a valid attribute,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">returning the docstring belonging to the class: &quot;&quot;A simple example</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">returning the docstring belonging to the class: &quot;&quot;A simple example</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">class&quot;&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">class&quot;&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Class *instantiation* uses function notation.&nbsp; Just pretend that the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Class *instantiation* uses function notation.&nbsp; Just pretend that the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">class object is a parameterless function that returns a new instance</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">class object is a parameterless function that returns a new instance</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of the class. For example (assuming the above class):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of the class. For example (assuming the above class):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; x = MyClass()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; x = MyClass()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">creates a new *instance* of the class and assigns this object to the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">creates a new *instance* of the class and assigns this object to the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">local variable &quot;x&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">local variable &quot;x&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The instantiation operation (&quot;calling&quot; a class object) creates an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The instantiation operation (&quot;calling&quot; a class object) creates an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">empty object. Many classes like to create objects with instances</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">empty object. Many classes like to create objects with instances</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">customized to a specific initial state. Therefore a class may define a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">customized to a specific initial state. Therefore a class may define a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">special method named &quot;__init__()&quot;, like this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">special method named &quot;__init__()&quot;, like this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def __init__(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def __init__(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; self.data = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; self.data = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When a class defines an &quot;__init__()&quot; method, class instantiation</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When a class defines an &quot;__init__()&quot; method, class instantiation</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">automatically invokes &quot;__init__()&quot; for the newly-created class</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">automatically invokes &quot;__init__()&quot; for the newly-created class</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">instance.&nbsp; So in this example, a new, initialized instance can be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">instance.&nbsp; So in this example, a new, initialized instance can be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">obtained by:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">obtained by:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; x = MyClass()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; x = MyClass()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Of course, the &quot;__init__()&quot; method may have arguments for greater</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Of course, the &quot;__init__()&quot; method may have arguments for greater</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">flexibility.&nbsp; In that case, arguments given to the class instantiation</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">flexibility.&nbsp; In that case, arguments given to the class instantiation</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">operator are passed on to &quot;__init__()&quot;.&nbsp; For example,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">operator are passed on to &quot;__init__()&quot;.&nbsp; For example,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; class Complex:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; class Complex:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; def __init__(self, realpart, imagpart):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; def __init__(self, realpart, imagpart):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; self.r = realpart</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; self.r = realpart</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; self.i = imagpart</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; self.i = imagpart</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x = Complex(3.0, -4.5)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x = Complex(3.0, -4.5)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x.r, x.i</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x.r, x.i</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; (3.0, -4.5)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; (3.0, -4.5)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Instance Objects</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Instance Objects</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Now what can we do with instance objects?&nbsp; The only operations</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Now what can we do with instance objects?&nbsp; The only operations</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">understood by instance objects are attribute references.&nbsp; There are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">understood by instance objects are attribute references.&nbsp; There are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">two kinds of valid attribute names, data attributes and methods.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">two kinds of valid attribute names, data attributes and methods.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*data attributes* correspond to &quot;instance variables&quot; in Smalltalk, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*data attributes* correspond to &quot;instance variables&quot; in Smalltalk, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to &quot;data members&quot; in C++.&nbsp; Data attributes need not be declared; like</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to &quot;data members&quot; in C++.&nbsp; Data attributes need not be declared; like</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">local variables, they spring into existence when they are first</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">local variables, they spring into existence when they are first</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">assigned to.&nbsp; For example, if &quot;x&quot; is the instance of &quot;MyClass&quot; created</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">assigned to.&nbsp; For example, if &quot;x&quot; is the instance of &quot;MyClass&quot; created</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">above, the following piece of code will print the value &quot;16&quot;, without</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">above, the following piece of code will print the value &quot;16&quot;, without</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">leaving a trace:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">leaving a trace:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; x.counter = 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; x.counter = 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; while x.counter &lt; 10:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; while x.counter &lt; 10:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; x.counter = x.counter * 2</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; x.counter = x.counter * 2</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>x.counter<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; print x.counter</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; del x.counter</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; del x.counter</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The other kind of instance attribute reference is a *method*. A method</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The other kind of instance attribute reference is a *method*. A method</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is a function that &quot;belongs to&quot; an object.&nbsp; (In Python, the term</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is a function that &quot;belongs to&quot; an object.&nbsp; (In Python, the term</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">method is not unique to class instances: other object types can have</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">method is not unique to class instances: other object types can have</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">methods as well.&nbsp; For example, list objects have methods called</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">methods as well.&nbsp; For example, list objects have methods called</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">append, insert, remove, sort, and so on. However, in the following</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">append, insert, remove, sort, and so on. However, in the following</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">discussion, we'll use the term method exclusively to mean methods of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">discussion, we'll use the term method exclusively to mean methods of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">class instance objects, unless explicitly stated otherwise.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">class instance objects, unless explicitly stated otherwise.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Valid method names of an instance object depend on its class.&nbsp; By</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Valid method names of an instance object depend on its class.&nbsp; By</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">definition, all attributes of a class that are function&nbsp; objects</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">definition, all attributes of a class that are function&nbsp; objects</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">define corresponding methods of its instances.&nbsp; So in our example,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">define corresponding methods of its instances.&nbsp; So in our example,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;x.f&quot; is a valid method reference, since &quot;MyClass.f&quot; is a function,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;x.f&quot; is a valid method reference, since &quot;MyClass.f&quot; is a function,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">but &quot;x.i&quot; is not, since &quot;MyClass.i&quot; is not.&nbsp; But &quot;x.f&quot; is not the same</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">but &quot;x.i&quot; is not, since &quot;MyClass.i&quot; is not.&nbsp; But &quot;x.f&quot; is not the same</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">thing as &quot;MyClass.f&quot; --- it is a *method object*, not a function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">thing as &quot;MyClass.f&quot; --- it is a *method object*, not a function</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">object.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">object.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Method Objects</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Method Objects</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Usually, a method is called right after it is bound:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Usually, a method is called right after it is bound:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; x.f()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; x.f()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In the &quot;MyClass&quot; example, this will return the string &quot;'hello world'&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In the &quot;MyClass&quot; example, this will return the string &quot;'hello world'&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">However, it is not necessary to call a method right away: &quot;x.f&quot; is a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">However, it is not necessary to call a method right away: &quot;x.f&quot; is a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">method object, and can be stored away and called at a later time.&nbsp; For</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">method object, and can be stored away and called at a later time.&nbsp; For</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; xf = x.f</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; xf = x.f</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; while True:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; while True:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>xf(<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print xf()</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">will continue to print &quot;hello world&quot; until the end of time.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">will continue to print &quot;hello world&quot; until the end of time.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What exactly happens when a method is called?&nbsp; You may have noticed</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What exactly happens when a method is called?&nbsp; You may have noticed</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that &quot;x.f()&quot; was called without an argument above, even though the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that &quot;x.f()&quot; was called without an argument above, even though the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function definition for &quot;f()&quot; specified an argument.&nbsp; What happened to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function definition for &quot;f()&quot; specified an argument.&nbsp; What happened to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the argument? Surely Python raises an exception when a function that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the argument? Surely Python raises an exception when a function that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">requires an argument is called without any --- even if the argument</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">requires an argument is called without any --- even if the argument</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">isn't actually used...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">isn't actually used...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">Actually, you may have guessed the answer: the special thing about</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Actually, you may have guessed the answer: the special thing about</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">methods is that the <span class="TextSegSigDiff">instance</span> object is passed as the first argument of</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">methods is that the object is passed as the first argument of <span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> function.&nbsp; In our example, the call &quot;x.f()&quot; is exactly equivalent</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">function.&nbsp; In our example, the call &quot;x.f()&quot; is exactly equivalent <span class="TextSegSigDiff">to</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">to</span> &quot;MyClass.f(x)&quot;.&nbsp; In general, calling a method with a list of *n*</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&quot;MyClass.f(x)&quot;.&nbsp; In general, calling a method with a list of *n*</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">arguments is equivalent to calling the corresponding function with an</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">arguments is equivalent to calling the corresponding function with an</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">argument list that is created by inserting the method's <span class="TextSegSigDiff">ins</span><span class="TextSegSigDiff">tanc</span>e</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">argument list that is created by inserting the method's <span class="TextSegSigDiff">object</span> <span class="TextSegSigDiff">befor</span>e</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">object</span> <span class="TextSegSigDiff">before</span> the first argument.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">the first argument.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you still don't understand how methods work, a look at the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you still don't understand how methods work, a look at the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">implementation can perhaps clarify matters.&nbsp; When an instance</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">implementation can perhaps clarify matters.&nbsp; When an instance</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">attribute is referenced that isn't a data attribute, its class is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">attribute is referenced that isn't a data attribute, its class is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">searched.&nbsp; If the name denotes a valid class attribute that is a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">searched.&nbsp; If the name denotes a valid class attribute that is a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function object, a method object is created by packing (pointers to)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function object, a method object is created by packing (pointers to)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the instance object and the function object just found together in an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the instance object and the function object just found together in an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">abstract object: this is the method object.&nbsp; When the method object is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">abstract object: this is the method object.&nbsp; When the method object is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">called with an argument list, a new argument list is constructed from</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">called with an argument list, a new argument list is constructed from</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the instance object and the argument list, and the function object is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the instance object and the argument list, and the function object is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">called with this new argument list.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">called with this new argument list.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Class and Instance Variables</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Class and Instance Variables</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Generally speaking, instance variables are for data unique to each</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Generally speaking, instance variables are for data unique to each</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">instance and class variables are for attributes and methods shared by</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">instance and class variables are for attributes and methods shared by</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">all instances of the class:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">all instances of the class:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class Dog:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class Dog:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; kind = 'canine'&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # class variable shared by all instances</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; kind = 'canine'&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # class variable shared by all instances</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, name):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, name):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.name = name&nbsp; &nbsp; # instance variable unique to each instance</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.name = name&nbsp; &nbsp; # instance variable unique to each instance</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d = Dog('Fido')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d = Dog('Fido')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; e = Dog('Buddy')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; e = Dog('Buddy')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d.kind&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # shared by all dogs</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d.kind&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # shared by all dogs</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'canine'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'canine'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; e.kind&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # shared by all dogs</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; e.kind&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # shared by all dogs</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'canine'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'canine'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d.name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # unique to d</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d.name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # unique to d</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'Fido'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'Fido'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; e.name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # unique to e</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; e.name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # unique to e</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'Buddy'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'Buddy'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">As discussed in A Word About Names and Objects, shared data can have</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">As discussed in A Word About Names and Objects, shared data can have</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">possibly surprising effects with involving *mutable* objects such as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">possibly surprising effects with involving *mutable* objects such as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">lists and dictionaries. For example, the *tricks* list in the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">lists and dictionaries. For example, the *tricks* list in the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">following code should not be used as a class variable because just a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">following code should not be used as a class variable because just a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">single list would be shared by all *Dog* instances:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">single list would be shared by all *Dog* instances:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class Dog:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class Dog:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; tricks = []&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # mistaken use of a class variable</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; tricks = []&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # mistaken use of a class variable</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, name):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, name):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.name = name</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.name = name</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def add_trick(self, trick):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def add_trick(self, trick):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.tricks.append(trick)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.tricks.append(trick)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d = Dog('Fido')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d = Dog('Fido')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; e = Dog('Buddy')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; e = Dog('Buddy')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d.add_trick('roll over')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d.add_trick('roll over')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; e.add_trick('play dead')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; e.add_trick('play dead')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d.tricks&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # unexpectedly shared by all dogs</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d.tricks&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # unexpectedly shared by all dogs</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ['roll over', 'play dead']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ['roll over', 'play dead']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Correct design of the class should use an instance variable instead:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Correct design of the class should use an instance variable instead:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class Dog:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class Dog:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, name):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, name):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.name = name</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.name = name</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.tricks = []&nbsp; &nbsp; # creates a new empty list for each dog</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.tricks = []&nbsp; &nbsp; # creates a new empty list for each dog</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def add_trick(self, trick):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def add_trick(self, trick):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.tricks.append(trick)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.tricks.append(trick)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d = Dog('Fido')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d = Dog('Fido')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; e = Dog('Buddy')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; e = Dog('Buddy')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d.add_trick('roll over')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d.add_trick('roll over')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; e.add_trick('play dead')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; e.add_trick('play dead')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d.tricks</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d.tricks</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ['roll over']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ['roll over']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; e.tricks</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; e.tricks</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ['play dead']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ['play dead']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Random Remarks</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Random Remarks</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==============</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==============</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Data attributes override method attributes with the same name; to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Data attributes override method attributes with the same name; to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">avoid accidental name conflicts, which may cause hard-to-find bugs in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">avoid accidental name conflicts, which may cause hard-to-find bugs in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">large programs, it is wise to use some kind of convention that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">large programs, it is wise to use some kind of convention that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">minimizes the chance of conflicts.&nbsp; Possible conventions include</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">minimizes the chance of conflicts.&nbsp; Possible conventions include</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">capitalizing method names, prefixing data attribute names with a small</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">capitalizing method names, prefixing data attribute names with a small</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">unique string (perhaps just an underscore), or using verbs for methods</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">unique string (perhaps just an underscore), or using verbs for methods</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and nouns for data attributes.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and nouns for data attributes.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Data attributes may be referenced by methods as well as by ordinary</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Data attributes may be referenced by methods as well as by ordinary</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">users (&quot;clients&quot;) of an object.&nbsp; In other words, classes are not</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">users (&quot;clients&quot;) of an object.&nbsp; In other words, classes are not</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">usable to implement pure abstract data types.&nbsp; In fact, nothing in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">usable to implement pure abstract data types.&nbsp; In fact, nothing in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python makes it possible to enforce data hiding --- it is all based</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python makes it possible to enforce data hiding --- it is all based</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">upon convention.&nbsp; (On the other hand, the Python implementation,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">upon convention.&nbsp; (On the other hand, the Python implementation,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">written in C, can completely hide implementation details and control</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">written in C, can completely hide implementation details and control</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">access to an object if necessary; this can be used by extensions to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">access to an object if necessary; this can be used by extensions to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python written in C.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python written in C.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Clients should use data attributes with care --- clients may mess up</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Clients should use data attributes with care --- clients may mess up</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">invariants maintained by the methods by stamping on their data</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">invariants maintained by the methods by stamping on their data</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">attributes.&nbsp; Note that clients may add data attributes of their own to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">attributes.&nbsp; Note that clients may add data attributes of their own to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">an instance object without affecting the validity of the methods, as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">an instance object without affecting the validity of the methods, as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">long as name conflicts are avoided --- again, a naming convention can</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">long as name conflicts are avoided --- again, a naming convention can</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">save a lot of headaches here.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">save a lot of headaches here.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There is no shorthand for referencing data attributes (or other</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There is no shorthand for referencing data attributes (or other</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">methods!) from within methods.&nbsp; I find that this actually increases</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">methods!) from within methods.&nbsp; I find that this actually increases</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the readability of methods: there is no chance of confusing local</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the readability of methods: there is no chance of confusing local</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">variables and instance variables when glancing through a method.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">variables and instance variables when glancing through a method.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Often, the first argument of a method is called &quot;self&quot;.&nbsp; This is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Often, the first argument of a method is called &quot;self&quot;.&nbsp; This is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">nothing more than a convention: the name &quot;self&quot; has absolutely no</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">nothing more than a convention: the name &quot;self&quot; has absolutely no</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">special meaning to Python.&nbsp; Note, however, that by not following the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">special meaning to Python.&nbsp; Note, however, that by not following the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">convention your code may be less readable to other Python programmers,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">convention your code may be less readable to other Python programmers,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and it is also conceivable that a *class browser* program might be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and it is also conceivable that a *class browser* program might be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">written that relies upon such a convention.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">written that relies upon such a convention.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Any function object that is a class attribute defines a method for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Any function object that is a class attribute defines a method for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">instances of that class.&nbsp; It is not necessary that the function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">instances of that class.&nbsp; It is not necessary that the function</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">definition is textually enclosed in the class definition: assigning a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">definition is textually enclosed in the class definition: assigning a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function object to a local variable in the class is also ok.&nbsp; For</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function object to a local variable in the class is also ok.&nbsp; For</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; # Function defined outside the class</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # Function defined outside the class</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def f1(self, x, y):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def f1(self, x, y):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return min(x, x+y)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return min(x, x+y)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class C:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class C:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; f = f1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; f = f1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def g(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def g(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 'hello world'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 'hello world'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; h = g</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; h = g</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Now &quot;f&quot;, &quot;g&quot; and &quot;h&quot; are all attributes of class &quot;C&quot; that refer to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Now &quot;f&quot;, &quot;g&quot; and &quot;h&quot; are all attributes of class &quot;C&quot; that refer to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function objects, and consequently they are all methods of instances</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function objects, and consequently they are all methods of instances</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of &quot;C&quot; --- &quot;h&quot; being exactly equivalent to &quot;g&quot;.&nbsp; Note that this</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of &quot;C&quot; --- &quot;h&quot; being exactly equivalent to &quot;g&quot;.&nbsp; Note that this</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">practice usually only serves to confuse the reader of a program.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">practice usually only serves to confuse the reader of a program.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Methods may call other methods by using method attributes of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Methods may call other methods by using method attributes of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;self&quot; argument:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;self&quot; argument:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class Bag:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class Bag:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.data = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.data = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def add(self, x):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def add(self, x):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.data.append(x)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.data.append(x)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def addtwice(self, x):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def addtwice(self, x):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.add(x)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.add(x)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.add(x)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.add(x)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Methods may reference global names in the same way as ordinary</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Methods may reference global names in the same way as ordinary</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">functions.&nbsp; The global scope associated with a method is the module</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">functions.&nbsp; The global scope associated with a method is the module</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">containing its definition.&nbsp; (A class is never used as a global scope.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">containing its definition.&nbsp; (A class is never used as a global scope.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">While one rarely encounters a good reason for using global data in a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">While one rarely encounters a good reason for using global data in a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">method, there are many legitimate uses of the global scope: for one</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">method, there are many legitimate uses of the global scope: for one</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">thing, functions and modules imported into the global scope can be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">thing, functions and modules imported into the global scope can be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">used by methods, as well as functions and classes defined in it.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">used by methods, as well as functions and classes defined in it.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Usually, the class containing the method is itself defined in this</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Usually, the class containing the method is itself defined in this</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">global scope, and in the next section we'll find some good reasons why</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">global scope, and in the next section we'll find some good reasons why</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a method would want to reference its own class.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a method would want to reference its own class.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Each value is an object, and therefore has a *class* (also called its</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Each value is an object, and therefore has a *class* (also called its</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*type*). It is stored as &quot;object.__class__&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*type*). It is stored as &quot;object.__class__&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Inheritance</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Inheritance</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===========</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===========</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Of course, a language feature would not be worthy of the name &quot;class&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Of course, a language feature would not be worthy of the name &quot;class&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">without supporting inheritance.&nbsp; The syntax for a derived class</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">without supporting inheritance.&nbsp; The syntax for a derived class</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">definition looks like this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">definition looks like this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class DerivedClassName(BaseClassName):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class DerivedClassName(BaseClassName):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &lt;statement-1&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &lt;statement-1&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; .</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; .</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; .</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; .</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; .</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; .</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &lt;statement-N&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &lt;statement-N&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The name &quot;BaseClassName&quot; must be defined in a scope containing the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The name &quot;BaseClassName&quot; must be defined in a scope containing the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">derived class definition.&nbsp; In place of a base class name, other</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">derived class definition.&nbsp; In place of a base class name, other</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">arbitrary expressions are also allowed.&nbsp; This can be useful, for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">arbitrary expressions are also allowed.&nbsp; This can be useful, for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">example, when the base class is defined in another module:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">example, when the base class is defined in another module:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class DerivedClassName(modname.BaseClassName):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class DerivedClassName(modname.BaseClassName):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Execution of a derived class definition proceeds the same as for a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Execution of a derived class definition proceeds the same as for a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">base class. When the class object is constructed, the base class is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">base class. When the class object is constructed, the base class is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">remembered.&nbsp; This is used for resolving attribute references: if a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">remembered.&nbsp; This is used for resolving attribute references: if a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">requested attribute is not found in the class, the search proceeds to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">requested attribute is not found in the class, the search proceeds to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">look in the base class.&nbsp; This rule is applied recursively if the base</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">look in the base class.&nbsp; This rule is applied recursively if the base</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">class itself is derived from some other class.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">class itself is derived from some other class.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There's nothing special about instantiation of derived classes:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There's nothing special about instantiation of derived classes:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;DerivedClassName()&quot; creates a new instance of the class.&nbsp; Method</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;DerivedClassName()&quot; creates a new instance of the class.&nbsp; Method</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">references are resolved as follows: the corresponding class attribute</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">references are resolved as follows: the corresponding class attribute</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is searched, descending down the chain of base classes if necessary,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is searched, descending down the chain of base classes if necessary,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and the method reference is valid if this yields a function object.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and the method reference is valid if this yields a function object.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Derived classes may override methods of their base classes.&nbsp; Because</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Derived classes may override methods of their base classes.&nbsp; Because</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">methods have no special privileges when calling other methods of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">methods have no special privileges when calling other methods of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">same object, a method of a base class that calls another method</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">same object, a method of a base class that calls another method</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">defined in the same base class may end up calling a method of a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">defined in the same base class may end up calling a method of a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">derived class that overrides it.&nbsp; (For C++ programmers: all methods in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">derived class that overrides it.&nbsp; (For C++ programmers: all methods in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python are effectively &quot;virtual&quot;.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python are effectively &quot;virtual&quot;.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">An overriding method in a derived class may in fact want to extend</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">An overriding method in a derived class may in fact want to extend</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">rather than simply replace the base class method of the same name.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">rather than simply replace the base class method of the same name.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There is a simple way to call the base class method directly: just</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There is a simple way to call the base class method directly: just</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">call &quot;BaseClassName.methodname(self, arguments)&quot;.&nbsp; This is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">call &quot;BaseClassName.methodname(self, arguments)&quot;.&nbsp; This is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">occasionally useful to clients as well.&nbsp; (Note that this only works if</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">occasionally useful to clients as well.&nbsp; (Note that this only works if</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the base class is accessible as &quot;BaseClassName&quot; in the global scope.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the base class is accessible as &quot;BaseClassName&quot; in the global scope.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python has two built-in functions that work with inheritance:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python has two built-in functions that work with inheritance:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Use &quot;isinstance()&quot; to check an instance's type: &quot;isinstance(obj,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Use &quot;isinstance()&quot; to check an instance's type: &quot;isinstance(obj,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; int)&quot; will be &quot;True&quot; only if &quot;obj.__class__&quot; is &quot;int&quot; or some class</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; int)&quot; will be &quot;True&quot; only if &quot;obj.__class__&quot; is &quot;int&quot; or some class</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; derived from &quot;int&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; derived from &quot;int&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Use &quot;issubclass()&quot; to check class inheritance: &quot;issubclass(bool,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Use &quot;issubclass()&quot; to check class inheritance: &quot;issubclass(bool,</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp; int)&quot; is &quot;True&quot; since &quot;bool&quot; is a subclass of &quot;int&quot;.&nbsp; However,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; int)&quot; is &quot;True&quot; since &quot;bool&quot; is a subclass of &quot;int&quot;.&nbsp; However,</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp; &quot;issubclass(<span class="TextSegSigDiff">fl</span><span class="TextSegSigDiff">oat</span>, <span class="TextSegSigDiff">int</span>)&quot; is &quot;False&quot; since &quot;<span class="TextSegSigDiff">fl</span><span class="TextSegSigDiff">oat</span>&quot; is not <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">subclass</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp; &quot;issubclass(<span class="TextSegSigDiff">unicode</span>, <span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">tr</span>)&quot; is &quot;False&quot; since &quot;<span class="TextSegSigDiff">unicode</span>&quot; is not <span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp; of &quot;in<span class="TextSegSigDiff">t&quot;</span>.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">subclass</span> of <span class="TextSegSigDiff">&quot;str</span>&quot; <span class="TextSegSigDiff">(they</span> <span class="TextSegSigDiff">only</span> <span class="TextSegSigDiff">share</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">common</span> <span class="TextSegSigDiff">ancestor,</span> <span class="TextSegSigDiff">&quot;basestr</span>in<span class="TextSegSigDiff">g&quot;)</span>.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Multiple Inheritance</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Multiple Inheritance</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">Python supports a form of multiple inheritance as well.&nbsp; A <span class="TextSegSigDiff">class</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Python supports a <span class="TextSegSigDiff">limited</span> form of multiple inheritance as well.&nbsp; A</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">definition with multiple base classes looks like this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">class</span> definition with multiple base classes looks like this:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class DerivedClassName(Base1, Base2, Base3):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class DerivedClassName(Base1, Base2, Base3):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &lt;statement-1&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &lt;statement-1&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; .</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; .</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; .</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; .</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; .</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; .</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &lt;statement-N&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &lt;statement-N&gt;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">For <span class="TextSegSigDiff">m</span>ost <span class="TextSegSigDiff">purpo</span>ses, <span class="TextSegSigDiff">in</span> the <span class="TextSegSigDiff">simp</span>les<span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">cases,</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">can</span> th<span class="TextSegSigDiff">ink</span> <span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">f</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">searc</span>h</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">For o<span class="TextSegSigDiff">ld-</span>st<span class="TextSegSigDiff">yle</span> <span class="TextSegSigDiff">clas</span>ses, the <span class="TextSegSigDiff">only</span> <span class="TextSegSigDiff">ru</span>le <span class="TextSegSigDiff">i</span>s <span class="TextSegSigDiff">d</span><span class="TextSegSigDiff">ep</span>th<span class="TextSegSigDiff">-first,</span> <span class="TextSegSigDiff">left-to-</span><span class="TextSegSigDiff">rig</span>h<span class="TextSegSigDiff">t.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">f<span class="TextSegSigDiff">or</span> attributes <span class="TextSegSigDiff">inherited</span> f<span class="TextSegSigDiff">rom</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">pa</span><span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">ent</span> class <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">depth-first,</span> <span class="TextSegSigDiff">left-to-</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Thus,</span> <span class="TextSegSigDiff">i</span>f <span class="TextSegSigDiff">an</span> attribute <span class="TextSegSigDiff">i</span>s <span class="TextSegSigDiff">no</span><span class="TextSegSigDiff">t</span> f<span class="TextSegSigDiff">ound</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">&quot;Derived</span>Class<span class="TextSegSigDiff">Name&quot;,</span> <span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">s</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">r<span class="TextSegSigDiff">ight,</span> n<span class="TextSegSigDiff">ot</span> se<span class="TextSegSigDiff">arc</span><span class="TextSegSigDiff">hing</span> <span class="TextSegSigDiff">tw</span><span class="TextSegSigDiff">ice</span> in the s<span class="TextSegSigDiff">am</span>e class <span class="TextSegSigDiff">where</span> <span class="TextSegSigDiff">ther</span>e <span class="TextSegSigDiff">i</span>s <span class="TextSegSigDiff">an</span> o<span class="TextSegSigDiff">verlap</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">sea</span>r<span class="TextSegSigDiff">c</span><span class="TextSegSigDiff">hed</span> <span class="TextSegSigDiff">i</span>n <span class="TextSegSigDiff">&quot;Ba</span>se<span class="TextSegSigDiff">1&quot;,</span> <span class="TextSegSigDiff">then</span> <span class="TextSegSigDiff">(recursively)</span> in the <span class="TextSegSigDiff">ba</span>se classes o<span class="TextSegSigDiff">f</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">hierarch</span><span class="TextSegSigDiff">y.</span> <span class="TextSegSigDiff">Thus,</span> if <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">attribute</span> is not found in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;Bas</span><span class="TextSegSigDiff">e1&quot;,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">only</span> if <span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">t</span> is not foun<span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">there,</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">searche</span>d in <span class="TextSegSigDiff">&quot;Base2&quot;,</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">on.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;D</span><span class="TextSegSigDiff">erivedClassName&quot;,</span> <span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">s</span> search<span class="TextSegSigDiff">ed</span> <span class="TextSegSigDiff">for</span> in &quot;Base<span class="TextSegSigDiff">1&quot;,</span> <span class="TextSegSigDiff">th</span><span class="TextSegSigDiff">en</span> <span class="TextSegSigDiff">(recursively)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">(To</span> <span class="TextSegSigDiff">some</span> <span class="TextSegSigDiff">p</span><span class="TextSegSigDiff">eopl</span><span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">breadth</span> <span class="TextSegSigDiff">first</span> <span class="TextSegSigDiff">---</span> searchin<span class="TextSegSigDiff">g</span> &quot;Base<span class="TextSegSigDiff">2&quot;</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">&quot;Base3&quot;</span> <span class="TextSegSigDiff">b</span><span class="TextSegSigDiff">efor</span><span class="TextSegSigDiff">e</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">base</span> <span class="TextSegSigDiff">classes</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">&quot;Base1&quot;</span> <span class="TextSegSigDiff">---</span> <span class="TextSegSigDiff">looks</span> <span class="TextSegSigDiff">more</span> <span class="TextSegSigDiff">natural.</span>&nbsp; <span class="TextSegSigDiff">However,</span> <span class="TextSegSigDiff">this</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">would</span> <span class="TextSegSigDiff">require</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">know</span> <span class="TextSegSigDiff">whether</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">particular</span> <span class="TextSegSigDiff">attribute</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">&quot;Base1&quot;</span> <span class="TextSegSigDiff">is</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">base</span> <span class="TextSegSigDiff">classes</span> <span class="TextSegSigDiff">of</span> &quot;Base1&quot;<span class="TextSegSigDiff">,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">i</span>f it <span class="TextSegSigDiff">w</span>as <span class="TextSegSigDiff">not</span> fo<span class="TextSegSigDiff">und</span> <span class="TextSegSigDiff">the</span>re<span class="TextSegSigDiff">,</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">was</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">ac</span><span class="TextSegSigDiff">tually</span> <span class="TextSegSigDiff">d</span><span class="TextSegSigDiff">efin</span><span class="TextSegSigDiff">ed</span> <span class="TextSegSigDiff">in</span> &quot;Base1&quot; <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">one</span> <span class="TextSegSigDiff">o</span>f it<span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">b</span>as<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">classes</span> <span class="TextSegSigDiff">be</span>fore <span class="TextSegSigDiff">you</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">figure</span> <span class="TextSegSigDiff">out</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">consequences</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">name</span> <span class="TextSegSigDiff">conflict</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">attribute</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">&quot;Base2&quot;.</span>&nbsp; <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">depth-first</span> <span class="TextSegSigDiff">rule</span> <span class="TextSegSigDiff">makes</span> <span class="TextSegSigDiff">no</span> <span class="TextSegSigDiff">differences</span> <span class="TextSegSigDiff">between</span> <span class="TextSegSigDiff">direct</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">earch</span>ed <span class="TextSegSigDiff">fo</span><span class="TextSegSigDiff">r</span> <span class="TextSegSigDiff">in</span> &quot;Base<span class="TextSegSigDiff">2&quot;,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">on</span>.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">inhe</span><span class="TextSegSigDiff">rit</span>ed <span class="TextSegSigDiff">attributes</span> <span class="TextSegSigDiff">of</span> &quot;Base<span class="TextSegSigDiff">1&quot;</span>.<span class="TextSegSigDiff">)</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">In</span> f<span class="TextSegSigDiff">act,</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">is</span> s<span class="TextSegSigDiff">ligh</span>tl<span class="TextSegSigDiff">y</span> <span class="TextSegSigDiff">mor</span>e c<span class="TextSegSigDiff">omp</span>l<span class="TextSegSigDiff">ex</span> <span class="TextSegSigDiff">than</span> <span class="TextSegSigDiff">that;</span> the method resolution</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">F<span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">*new-</span>st<span class="TextSegSigDiff">y</span>le cl<span class="TextSegSigDiff">ass*es,</span> the method resoluti<span class="TextSegSigDiff">on</span> o<span class="TextSegSigDiff">rder</span> <span class="TextSegSigDiff">cha</span>n<span class="TextSegSigDiff">ges</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">order</span> <span class="TextSegSigDiff">changes</span> <span class="TextSegSigDiff">d</span>ynamically to support cooperative calls to &quot;super()&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">d</span>ynamically to support cooperative calls to &quot;super()&quot;.&nbsp; <span class="TextSegSigDiff">This</span> <span class="TextSegSigDiff">approach</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Th</span>is <span class="TextSegSigDiff">approach</span> <span class="TextSegSigDiff">is</span> known in some other multiple-inheritance languages as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">is known in some other multiple-inheritance languages as <span class="TextSegSigDiff">call-next-</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">call-next-</span>method and is more powerful than the super call found in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">method and is more powerful than the super call found <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">s</span>in<span class="TextSegSigDiff">gle-</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">single-</span>inheritance languages.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">inheritance languages.</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">Dynamic ordering is necessary because all <span class="TextSegSigDiff">cases</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">multiple</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">With</span> <span class="TextSegSigDiff">new-style</span> <span class="TextSegSigDiff">classes,</span> dynamic ordering is necessary because all</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">inheritance exhibit one or more diamond <span class="TextSegSigDiff">relationships</span> <span class="TextSegSigDiff">(where</span> <span class="TextSegSigDiff">at</span> <span class="TextSegSigDiff">least</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">cases</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">multiple</span> inheritance exhibit one or more diamond</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">one of the parent classes can be <span class="TextSegSigDiff">accessed</span> <span class="TextSegSigDiff">through</span> <span class="TextSegSigDiff">multiple</span> <span class="TextSegSigDiff">paths</span> <span class="TextSegSigDiff">from</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">relationships</span> <span class="TextSegSigDiff">(where</span> <span class="TextSegSigDiff">at</span> <span class="TextSegSigDiff">least</span> one of the parent classes can be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">the bottommost class).&nbsp; For <span class="TextSegSigDiff">example,</span> <span class="TextSegSigDiff">all</span> <span class="TextSegSigDiff">classes</span> <span class="TextSegSigDiff">inherit</span> <span class="TextSegSigDiff">from</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">accessed</span> th<span class="TextSegSigDiff">rough</span> <span class="TextSegSigDiff">multipl</span>e <span class="TextSegSigDiff">paths</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">the</span> bottommost class).&nbsp; For</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">example,</span> <span class="TextSegSigDiff">all</span> <span class="TextSegSigDiff">new-style</span> <span class="TextSegSigDiff">classes</span> <span class="TextSegSigDiff">inherit</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">&quot;object&quot;,</span> <span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">any</span> <span class="TextSegSigDiff">case</span> <span class="TextSegSigDiff">of</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;object&quot;,</span> <span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">any</span> <span class="TextSegSigDiff">case</span> <span class="TextSegSigDiff">of</span> multiple inheritance provides more than one</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">multiple inheritance provides more than one <span class="TextSegSigDiff">path</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">reach</span> <span class="TextSegSigDiff">&quot;object&quot;.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">path</span> to <span class="TextSegSigDiff">reach</span> <span class="TextSegSigDiff">&quot;object&quot;.</span>&nbsp; <span class="TextSegSigDiff">To</span> keep the base classes from being accessed</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">To keep the base classes from being accessed <span class="TextSegSigDiff">more</span> <span class="TextSegSigDiff">than</span> <span class="TextSegSigDiff">once,</span> <span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">more</span> <span class="TextSegSigDiff">than</span> <span class="TextSegSigDiff">once,</span> <span class="TextSegSigDiff">the</span> dynamic algorithm linearizes the search order in a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">dynamic algorithm linearizes the search order in a <span class="TextSegSigDiff">way</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">preserves</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">way</span> th<span class="TextSegSigDiff">at</span> <span class="TextSegSigDiff">preserves</span> <span class="TextSegSigDiff">the</span> left-to-right ordering specified in each class,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">th<span class="TextSegSigDiff">e</span> left-to-right ordering specified in each class, <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">calls</span> <span class="TextSegSigDiff">each</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">calls</span> <span class="TextSegSigDiff">each</span> parent only once, and that is monotonic (meaning that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">parent only once, and that is monotonic (meaning that <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">be</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">be</span> subclassed without affecting the precedence order of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">subclassed without affecting the precedence order of <span class="TextSegSigDiff">its</span> <span class="TextSegSigDiff">parents).</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">its</span> <span class="TextSegSigDiff">parents).</span> <span class="TextSegSigDiff">Ta</span>ken together, these properties make it possible to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">T</span><span class="TextSegSigDiff">a</span>ken together, these properties make it possible to <span class="TextSegSigDiff">design</span> <span class="TextSegSigDiff">reliable</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">design</span> <span class="TextSegSigDiff">reliable</span> <span class="TextSegSigDiff">a</span>nd extensible classes with multiple inheritance.&nbsp; For</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">a</span>nd extensible classes with multiple inheritance.&nbsp; For <span class="TextSegSigDiff">more</span> <span class="TextSegSigDiff">detail,</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">more</span> <span class="TextSegSigDiff">detail,</span> see https://www.python.org/download/releases/2.3/mro/.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">see https://www.python.org/download/releases/2.3/mro/.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">Private Variables</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Private Variables <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">Class-local</span> <span class="TextSegSigDiff">References</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">=================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">=================<span class="TextSegSigDiff">===========================</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;Private&quot; instance variables that cannot be accessed except from</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;Private&quot; instance variables that cannot be accessed except from</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">inside an object don't exist in Python.&nbsp; However, there is a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">inside an object don't exist in Python.&nbsp; However, there is a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">convention that is followed by most Python code: a name prefixed with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">convention that is followed by most Python code: a name prefixed with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">an underscore (e.g. &quot;_spam&quot;) should be treated as a non-public part of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">an underscore (e.g. &quot;_spam&quot;) should be treated as a non-public part of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the API (whether it is a function, a method or a data member).&nbsp; It</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the API (whether it is a function, a method or a data member).&nbsp; It</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">should be considered an implementation detail and subject to change</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">should be considered an implementation detail and subject to change</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">without notice.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">without notice.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Since there is a valid use-case for class-private members (namely to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Since there is a valid use-case for class-private members (namely to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">avoid name clashes of names with names defined by subclasses), there</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">avoid name clashes of names with names defined by subclasses), there</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is limited support for such a mechanism, called *name mangling*.&nbsp; Any</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is limited support for such a mechanism, called *name mangling*.&nbsp; Any</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">identifier of the form &quot;__spam&quot; (at least two leading underscores, at</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">identifier of the form &quot;__spam&quot; (at least two leading underscores, at</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">most one trailing underscore) is textually replaced with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">most one trailing underscore) is textually replaced with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;_classname__spam&quot;, where &quot;classname&quot; is the current class name with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;_classname__spam&quot;, where &quot;classname&quot; is the current class name with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">leading underscore(s) stripped.&nbsp; This mangling is done without regard</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">leading underscore(s) stripped.&nbsp; This mangling is done without regard</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to the syntactic position of the identifier, as long as it occurs</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to the syntactic position of the identifier, as long as it occurs</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">within the definition of a class.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">within the definition of a class.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Name mangling is helpful for letting subclasses override methods</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Name mangling is helpful for letting subclasses override methods</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">without breaking intraclass method calls.&nbsp; For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">without breaking intraclass method calls.&nbsp; For example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class Mapping:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class Mapping:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, iterable):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, iterable):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.items_list = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.items_list = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.__update(iterable)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.__update(iterable)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def update(self, iterable):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def update(self, iterable):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for item in iterable:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for item in iterable:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.items_list.append(item)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.items_list.append(item)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; __update = update&nbsp;&nbsp; # private copy of original update() method</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; __update = update&nbsp;&nbsp; # private copy of original update() method</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class MappingSubclass(Mapping):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class MappingSubclass(Mapping):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def update(self, keys, values):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def update(self, keys, values):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # provides new signature for update()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # provides new signature for update()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # but does not break __init__()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # but does not break __init__()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for item in zip(keys, values):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for item in zip(keys, values):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.items_list.append(item)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.items_list.append(item)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note that the mangling rules are designed mostly to avoid accidents;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note that the mangling rules are designed mostly to avoid accidents;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">it still is possible to access or modify a variable that is considered</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">it still is possible to access or modify a variable that is considered</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">private.&nbsp; This can even be useful in special circumstances, such as in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">private.&nbsp; This can even be useful in special circumstances, such as in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the debugger.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the debugger.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">Notice that code passed to &quot;exec()&quot; or &quot;e<span class="TextSegSigDiff">va</span><span class="TextSegSigDiff">l</span>()&quot; does no<span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">consider</span> t<span class="TextSegSigDiff">he</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Notice that code passed to &quot;exec<span class="TextSegSigDiff">&quot;,</span> <span class="TextSegSigDiff">&quot;eval</span>()&quot; or &quot;e<span class="TextSegSigDiff">xecfile</span>()&quot; does not</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">classname of the invoking class to be the current class; <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">is</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">c<span class="TextSegSigDiff">onsider</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">c</span>lassname of the invoking&nbsp; class to be the current class;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">similar to the effect of the &quot;global&quot; statement, the effect <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">which</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">thi</span>s i<span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">si</span>milar to the effect of the&nbsp; &quot;global&quot; statement, the effect</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">is likewise restricted to code that is byte-compiled <span class="TextSegSigDiff">together.</span>&nbsp; <span class="TextSegSigDiff">The</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">wh</span>i<span class="TextSegSigDiff">ch</span> <span class="TextSegSigDiff">i</span>s likewise restricted to&nbsp; code that is byte-compiled</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">same restriction applies to &quot;getattr()&quot;, &quot;se<span class="TextSegSigDiff">tattr()&quot;</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">&quot;del</span>attr()&quot;<span class="TextSegSigDiff">,</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">together.</span>&nbsp; <span class="TextSegSigDiff">The</span> same restriction applies to &quot;getattr()&quot;, &quot;se<span class="TextSegSigDiff">t</span>attr()&quot;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">as well as when referencing &quot;__dict__&quot; directly.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">a<span class="TextSegSigDiff">nd</span> <span class="TextSegSigDiff">&quot;delattr()&quot;,</span> <span class="TextSegSigDiff">a</span>s well as when referencing &quot;__dict__&quot; directly.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Odds and Ends</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Odds and Ends</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=============</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=============</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Sometimes it is useful to have a data type similar to the Pascal</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Sometimes it is useful to have a data type similar to the Pascal</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;record&quot; or C &quot;struct&quot;, bundling together a few named data items.&nbsp; An</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;record&quot; or C &quot;struct&quot;, bundling together a few named data items.&nbsp; An</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">empty class definition will do nicely:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">empty class definition will do nicely:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class Employee:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class Employee:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; pass</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; pass</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; john = Employee()&nbsp; # Create an empty employee record</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; john = Employee()&nbsp; # Create an empty employee record</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; # Fill the fields of the record</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # Fill the fields of the record</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; john.name = 'John Doe'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; john.name = 'John Doe'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; john.dept = 'computer lab'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; john.dept = 'computer lab'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; john.salary = 1000</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; john.salary = 1000</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A piece of Python code that expects a particular abstract data type</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A piece of Python code that expects a particular abstract data type</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">can often be passed a class that emulates the methods of that data</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">can often be passed a class that emulates the methods of that data</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">type instead.&nbsp; For instance, if you have a function that formats some</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">type instead.&nbsp; For instance, if you have a function that formats some</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">data from a file object, you can define a class with methods &quot;read()&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">data from a file object, you can define a class with methods &quot;read()&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and &quot;readline()&quot; that get the data from a string buffer instead, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and &quot;readline()&quot; that get the data from a string buffer instead, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">pass it as an argument.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">pass it as an argument.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">Instance method objects have attributes, too: &quot;m.<span class="TextSegSigDiff">_</span>_self<span class="TextSegSigDiff">__</span>&quot; is the</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Instance method objects have attributes, too: &quot;m.<span class="TextSegSigDiff">im</span>_self&quot; is the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">instance object with the method &quot;m()&quot;, and &quot;m._<span class="TextSegSigDiff">_</span>func<span class="TextSegSigDiff">__</span>&quot; is the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">instance object with the method &quot;m()&quot;, and &quot;m.<span class="TextSegSigDiff">im</span>_func&quot; is the <span class="TextSegSigDiff">function</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">function</span> object corresponding to the method.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">object corresponding to the method.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Exceptions</span> <span class="TextSegSigDiff">Are</span> <span class="TextSegSigDiff">Classes</span> <span class="TextSegSigDiff">Too</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">==========================</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">User-defined</span> <span class="TextSegSigDiff">exceptions</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">identified</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">classes</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">well.</span>&nbsp; <span class="TextSegSigDiff">Using</span> <span class="TextSegSigDiff">this</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">mechanism</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">possible</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">create</span> <span class="TextSegSigDiff">extensible</span> <span class="TextSegSigDiff">hierarchies</span> <span class="TextSegSigDiff">of</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">exceptions.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">There</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">two</span> <span class="TextSegSigDiff">new</span> <span class="TextSegSigDiff">valid</span> <span class="TextSegSigDiff">(semantic)</span> <span class="TextSegSigDiff">forms</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;raise&quot;</span> <span class="TextSegSigDiff">statement:</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">raise</span> <span class="TextSegSigDiff">Class,</span> <span class="TextSegSigDiff">instance</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">raise</span> <span class="TextSegSigDiff">instance</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">In</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">first</span> <span class="TextSegSigDiff">form,</span> <span class="TextSegSigDiff">&quot;instance&quot;</span> <span class="TextSegSigDiff">must</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">instance</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">&quot;Class&quot;</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">derived</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">it.</span>&nbsp; <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">second</span> <span class="TextSegSigDiff">form</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">shorthand</span> <span class="TextSegSigDiff">for:</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">raise</span> <span class="TextSegSigDiff">instance.__class__,</span> <span class="TextSegSigDiff">instance</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">A</span> <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">&quot;except&quot;</span> <span class="TextSegSigDiff">clause</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">compatible</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">exception</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">is</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">same</span> <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">base</span> <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">thereof</span> <span class="TextSegSigDiff">(but</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">other</span> <span class="TextSegSigDiff">way</span> <span class="TextSegSigDiff">around</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">---</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">except</span> <span class="TextSegSigDiff">clause</span> <span class="TextSegSigDiff">listing</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">derived</span> <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">compatible</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">base</span> <span class="TextSegSigDiff">class).</span>&nbsp; <span class="TextSegSigDiff">For</span> <span class="TextSegSigDiff">example,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">following</span> <span class="TextSegSigDiff">code</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">print</span> <span class="TextSegSigDiff">B,</span> <span class="TextSegSigDiff">C,</span> <span class="TextSegSigDiff">D</span> <span class="TextSegSigDiff">in</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">order:</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">B:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">pass</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">C(B):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">pass</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">D(C):</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">pass</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">c</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">[B,</span> <span class="TextSegSigDiff">C,</span> <span class="TextSegSigDiff">D]:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">try:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">raise</span> <span class="TextSegSigDiff">c()</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">except</span> <span class="TextSegSigDiff">D:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">print</span> <span class="TextSegSigDiff">&quot;D&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">except</span> <span class="TextSegSigDiff">C:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">print</span> <span class="TextSegSigDiff">&quot;C&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">except</span> <span class="TextSegSigDiff">B:</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">print</span> <span class="TextSegSigDiff">&quot;B&quot;</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Note</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">except</span> <span class="TextSegSigDiff">clauses</span> <span class="TextSegSigDiff">were</span> <span class="TextSegSigDiff">reversed</span> <span class="TextSegSigDiff">(with</span> <span class="TextSegSigDiff">&quot;except</span> <span class="TextSegSigDiff">B&quot;</span> <span class="TextSegSigDiff">first),</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">would</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">printed</span> <span class="TextSegSigDiff">B,</span> <span class="TextSegSigDiff">B,</span> <span class="TextSegSigDiff">B</span> <span class="TextSegSigDiff">---</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">first</span> <span class="TextSegSigDiff">matching</span> <span class="TextSegSigDiff">except</span> <span class="TextSegSigDiff">clause</span> <span class="TextSegSigDiff">is</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">triggered.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">When</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">error</span> <span class="TextSegSigDiff">message</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">printed</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">unhandled</span> <span class="TextSegSigDiff">exception,</span> <span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">exception's</span> <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">name</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">printed,</span> <span class="TextSegSigDiff">then</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">colon</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">space,</span> <span class="TextSegSigDiff">and</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">finally</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">instance</span> <span class="TextSegSigDiff">converted</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">string</span> <span class="TextSegSigDiff">using</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">built-in</span> <span class="TextSegSigDiff">function</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;str()&quot;.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Iterators</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Iterators</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=========</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=========</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">By now you have probably noticed that most container objects can be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">By now you have probably noticed that most container objects can be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">looped over using a &quot;for&quot; statement:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">looped over using a &quot;for&quot; statement:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; for element in [1, 2, 3]:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; for element in [1, 2, 3]:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>element<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print element</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; for element in (1, 2, 3):</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; for element in (1, 2, 3):</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>element<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print element</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; for key in {'one':1, 'two':2}:</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; for key in {'one':1, 'two':2}:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>key<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print key</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; for char in &quot;123&quot;:</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; for char in &quot;123&quot;:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>char<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print char</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; for line in open(&quot;myfile.txt&quot;):</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; for line in open(&quot;myfile.txt&quot;):</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>line, <span class="TextSegSigDiff">end='')</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print line,</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This style of access is clear, concise, and convenient.&nbsp; The use of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This style of access is clear, concise, and convenient.&nbsp; The use of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">iterators pervades and unifies Python.&nbsp; Behind the scenes, the &quot;for&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">iterators pervades and unifies Python.&nbsp; Behind the scenes, the &quot;for&quot;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">statement calls &quot;iter()&quot; on the container object.&nbsp; The function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">statement calls &quot;iter()&quot; on the container object.&nbsp; The function</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">returns an iterator object that defines the method &quot;<span class="TextSegSigDiff">__</span>next<span class="TextSegSigDiff">__</span>()&quot; which</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">returns an iterator object that defines the method &quot;next()&quot; which</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">accesses elements in the container one at a time.&nbsp; When there are no</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">accesses elements in the container one at a time.&nbsp; When there are no</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">more elements, &quot;<span class="TextSegSigDiff">__</span>next<span class="TextSegSigDiff">__</span>()&quot; raises a &quot;StopIteration&quot; exception which</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">more elements, &quot;next()&quot; raises a &quot;StopIteration&quot; exception which <span class="TextSegSigDiff">tells</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">t<span class="TextSegSigDiff">ells</span> <span class="TextSegSigDiff">t</span>he &quot;for&quot; loop to terminate.&nbsp; <span class="TextSegSigDiff">You</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">c</span>all <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;__next__()&quot;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">the &quot;for&quot; loop to terminate. <span class="TextSegSigDiff">This</span> <span class="TextSegSigDiff">example</span> <span class="TextSegSigDiff">shows</span> <span class="TextSegSigDiff">how</span> <span class="TextSegSigDiff">it</span> all <span class="TextSegSigDiff">works:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">method</span> <span class="TextSegSigDiff">using</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;next()&quot;</span> <span class="TextSegSigDiff">built-in</span> <span class="TextSegSigDiff">function;</span> <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">example</span> <span class="TextSegSigDiff">shows</span> <span class="TextSegSigDiff">how</span> <span class="TextSegSigDiff">it</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">all</span> <span class="TextSegSigDiff">works:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; s = 'abc'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; s = 'abc'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; it = iter(s)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; it = iter(s)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; it</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; it</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &lt;iterator object at 0x00A1DB50&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &lt;iterator object at 0x00A1DB50&gt;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; next(<span class="TextSegSigDiff">it</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">it.</span>next()</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; 'a'</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; 'a'</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; next(<span class="TextSegSigDiff">it</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">it.</span>next()</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; 'b'</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; 'b'</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; next(<span class="TextSegSigDiff">it</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">it.</span>next()</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; 'c'</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; 'c'</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; next(<span class="TextSegSigDiff">it</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">it.</span>next()</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; next(<span class="TextSegSigDiff">it</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">it.</span>next()</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; StopIteration</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; StopIteration</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Having seen the mechanics behind the iterator protocol, it is easy to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Having seen the mechanics behind the iterator protocol, it is easy to</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">add iterator behavior to your classes.&nbsp; Define an &quot;__iter__()&quot; method</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">add iterator behavior to your classes.&nbsp; Define an &quot;__iter__()&quot; method</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">which returns an object with a &quot;<span class="TextSegSigDiff">__</span>next<span class="TextSegSigDiff">__</span>()&quot; method.&nbsp; If the class</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">which returns an object with a &quot;next()&quot; method.&nbsp; If the cla<span class="TextSegSigDiff">s</span>s <span class="TextSegSigDiff">define</span>s</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">defines</span> &quot;<span class="TextSegSigDiff">__</span>next<span class="TextSegSigDiff">__</span>()&quot;, then &quot;__iter__()&quot; can just return &quot;self&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&quot;next()&quot;, then &quot;__iter__()&quot; can just return &quot;self&quot;:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class Reverse:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class Reverse:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;Iterator for looping over a sequence backwards.&quot;&quot;&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;Iterator for looping over a sequence backwards.&quot;&quot;&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, data):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, data):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.data = data</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.data = data</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.index = len(data)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.index = len(data)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __iter__(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __iter__(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return self</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return self</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; def <span class="TextSegSigDiff">__</span>next<span class="TextSegSigDiff">__</span>(self):</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; def next(self):</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if self.index == 0:</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if self.index == 0:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; raise StopIteration</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; raise StopIteration</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.index = self.index - 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.index = self.index - 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return self.data[self.index]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return self.data[self.index]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; rev = Reverse('spam')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; rev = Reverse('spam')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; iter(rev)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; iter(rev)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &lt;__main__.Reverse object at 0x00A1DB50&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &lt;__main__.Reverse object at 0x00A1DB50&gt;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for char in rev:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for char in rev:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>char<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print char</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; m</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; m</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; p</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; p</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; s</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; s</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Generators</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Generators</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==========</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==========</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*Generator*s are a simple and powerful tool for creating iterators.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*Generator*s are a simple and powerful tool for creating iterators.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">They are written like regular functions but use the &quot;yield&quot; statement</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">They are written like regular functions but use the &quot;yield&quot; statement</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">whenever they want to return data.&nbsp; Each time &quot;next()&quot; is called on</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">whenever they want to return data.&nbsp; Each time &quot;next()&quot; is called on</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">it, the generator resumes where it left off (it remembers all the data</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">it, the generator resumes where it left off (it remembers all the data</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">values and which statement was last executed).&nbsp; An example shows that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">values and which statement was last executed).&nbsp; An example shows that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">generators can be trivially easy to create:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">generators can be trivially easy to create:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def reverse(data):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def reverse(data):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; for index in range(len(data)-1, -1, -1):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; for index in range(len(data)-1, -1, -1):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; yield data[index]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; yield data[index]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for char in reverse('golf'):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for char in reverse('golf'):</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>char<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print char</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; f</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; f</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; l</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; l</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; o</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; o</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; g</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; g</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Anything that can be done with generators can also be done with class-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Anything that can be done with generators can also be done with class-</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">based iterators as described in the previous section.&nbsp; What makes</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">based iterators as described in the previous section.&nbsp; What makes</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">generators so compact is that the &quot;__iter__()&quot; and &quot;<span class="TextSegSigDiff">__</span>next<span class="TextSegSigDiff">__</span>()&quot;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">generators so compact is that the &quot;__iter__()&quot; and &quot;next()&quot; <span class="TextSegSigDiff">methods</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">methods</span> are created automatically.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">are created automatically.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Another key feature is that the local variables and execution state</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Another key feature is that the local variables and execution state</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">are automatically saved between calls.&nbsp; This made the function easier</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">are automatically saved between calls.&nbsp; This made the function easier</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to write and much more clear than an approach using instance variables</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to write and much more clear than an approach using instance variables</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">like &quot;self.index&quot; and &quot;self.data&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">like &quot;self.index&quot; and &quot;self.data&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In addition to automatic method creation and saving program state,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In addition to automatic method creation and saving program state,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">when generators terminate, they automatically raise &quot;StopIteration&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">when generators terminate, they automatically raise &quot;StopIteration&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In combination, these features make it easy to create iterators with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In combination, these features make it easy to create iterators with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">no more effort than writing a regular function.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">no more effort than writing a regular function.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Generator Expressions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Generator Expressions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=====================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=====================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Some simple generators can be coded succinctly as expressions using a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Some simple generators can be coded succinctly as expressions using a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">syntax similar to list comprehensions but with parentheses instead of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">syntax similar to list comprehensions but with parentheses instead of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">brackets.&nbsp; These expressions are designed for situations where the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">brackets.&nbsp; These expressions are designed for situations where the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">generator is used right away by an enclosing function.&nbsp; Generator</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">generator is used right away by an enclosing function.&nbsp; Generator</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">expressions are more compact but less versatile than full generator</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">expressions are more compact but less versatile than full generator</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">definitions and tend to be more memory friendly than equivalent list</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">definitions and tend to be more memory friendly than equivalent list</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">comprehensions.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">comprehensions.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Examples:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Examples:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sum(i*i for i in range(10))&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # sum of squares</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sum(i*i for i in range(10))&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # sum of squares</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 285</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 285</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; xvec = [10, 20, 30]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; xvec = [10, 20, 30]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; yvec = [7, 5, 3]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; yvec = [7, 5, 3]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sum(x*y for x,y in zip(xvec, yvec))&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # dot product</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sum(x*y for x,y in zip(xvec, yvec))&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # dot product</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 260</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 260</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from math import pi, sin</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from math import pi, sin</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; sine_table = <span class="TextSegSigDiff">{</span><span class="TextSegSigDiff">x:</span> sin(x*pi/180) for x in range(0, 91)<span class="TextSegSigDiff">}</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; sine_table = <span class="TextSegSigDiff">dict((x,</span> sin(x*pi/180)<span class="TextSegSigDiff">)</span> for x in range(0, 91<span class="TextSegSigDiff">)</span>)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; unique_words = set(word&nbsp; for line in page&nbsp; for word in line.split())</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; unique_words = set(word&nbsp; for line in page&nbsp; for word in line.split())</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; valedictorian = max((student.gpa, student.name) for student in graduates)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; valedictorian = max((student.gpa, student.name) for student in graduates)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; data = 'golf'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; data = 'golf'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; list(data[i] for i in range(len(data)-1, -1, -1))</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; list(data[i] for i in range(len(data)-1,-1,-1))</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ['f', 'l', 'o', 'g']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ['f', 'l', 'o', 'g']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-[ Footnotes ]-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-[ Footnotes ]-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">[1] Except for one thing.&nbsp; Module objects have a secret read-only</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">[1] Except for one thing.&nbsp; Module objects have a secret read-only</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; attribute called &quot;__dict__&quot; which returns the dictionary used to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; attribute called &quot;__dict__&quot; which returns the dictionary used to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; implement the module's namespace; the name &quot;__dict__&quot; is an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; implement the module's namespace; the name &quot;__dict__&quot; is an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; attribute but not a global name. Obviously, using this violates</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; attribute but not a global name. Obviously, using this violates</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; the abstraction of namespace implementation, and should be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; the abstraction of namespace implementation, and should be</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; restricted to things like post-mortem debuggers.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; restricted to things like post-mortem debuggers.</td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\tutorial\controlflow.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">More Control Flow Tools</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">More Control Flow Tools</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">***********************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">***********************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Besides the &quot;while&quot; statement just introduced, Python knows the usual</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Besides the &quot;while&quot; statement just introduced, Python knows the usual</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">control flow statements known from other languages, with some twists.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">control flow statements known from other languages, with some twists.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;if&quot; Statements</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;if&quot; Statements</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===============</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===============</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Perhaps the most well-known statement type is the &quot;if&quot; statement.&nbsp; For</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Perhaps the most well-known statement type is the &quot;if&quot; statement.&nbsp; For</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">example:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; x = int(input(&quot;Please enter an integer: &quot;))</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; x = int(<span class="TextSegSigDiff">raw_</span>input(&quot;Please enter an integer: &quot;))</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; Please enter an integer: 42</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; Please enter an integer: 42</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; if x &lt; 0:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; if x &lt; 0:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; x = 0</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; x = 0</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>'Negative changed to zero'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print 'Negative changed to zero'</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; ... elif x == 0:</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ... elif x == 0:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>'Zero'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print 'Zero'</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; ... elif x == 1:</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ... elif x == 1:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>'Single'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print 'Single'</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; ... else:</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ... else:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>'More'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print 'More'</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; More</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; More</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There can be zero or more &quot;elif&quot; parts, and the &quot;else&quot; part is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There can be zero or more &quot;elif&quot; parts, and the &quot;else&quot; part is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">optional.&nbsp; The keyword '&quot;elif&quot;' is short for 'else if', and is useful</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">optional.&nbsp; The keyword '&quot;elif&quot;' is short for 'else if', and is useful</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to avoid excessive indentation.&nbsp; An&nbsp; &quot;if&quot; ... &quot;elif&quot; ... &quot;elif&quot; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to avoid excessive indentation.&nbsp; An&nbsp; &quot;if&quot; ... &quot;elif&quot; ... &quot;elif&quot; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">sequence is a substitute for the &quot;switch&quot; or &quot;case&quot; statements found</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">sequence is a substitute for the &quot;switch&quot; or &quot;case&quot; statements found</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in other languages.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in other languages.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;for&quot; Statements</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;for&quot; Statements</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;for&quot; statement in Python differs a bit from what you may be used</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;for&quot; statement in Python differs a bit from what you may be used</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to in C or Pascal.&nbsp; Rather than always iterating over an arithmetic</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to in C or Pascal.&nbsp; Rather than always iterating over an arithmetic</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">progression of numbers (like in Pascal), or giving the user the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">progression of numbers (like in Pascal), or giving the user the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">ability to define both the iteration step and halting condition (as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">ability to define both the iteration step and halting condition (as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">C), Python's &quot;for&quot; statement iterates over the items of any sequence</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">C), Python's &quot;for&quot; statement iterates over the items of any sequence</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(a list or a string), in the order that they appear in the sequence.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(a list or a string), in the order that they appear in the sequence.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For example (no pun intended):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For example (no pun intended):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # Measure some strings:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # Measure some strings:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ... words = ['cat', 'window', 'defenestrate']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... words = ['cat', 'window', 'defenestrate']</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for w in words:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for w in words:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>w, len(w<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print w, len(w)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; cat 3</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; cat 3</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; window 6</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; window 6</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; defenestrate 12</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; defenestrate 12</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you need to modify the sequence you are iterating over while inside</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you need to modify the sequence you are iterating over while inside</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the loop (for example to duplicate selected items), it is recommended</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the loop (for example to duplicate selected items), it is recommended</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that you first make a copy.&nbsp; Iterating over a sequence does not</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that you first make a copy.&nbsp; Iterating over a sequence does not</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">implicitly make a copy.&nbsp; The slice notation makes this especially</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">implicitly make a copy.&nbsp; The slice notation makes this especially</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">convenient:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">convenient:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for w in words[:]:&nbsp; # Loop over a slice copy of the entire list.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for w in words[:]:&nbsp; # Loop over a slice copy of the entire list.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; if len(w) &gt; 6:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; if len(w) &gt; 6:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; words.insert(0, w)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; words.insert(0, w)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; words</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; words</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ['defenestrate', 'cat', 'window', 'defenestrate']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ['defenestrate', 'cat', 'window', 'defenestrate']</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">With</span> <span class="TextSegSigDiff">&quot;for</span> <span class="TextSegSigDiff">w</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">words:&quot;,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">example</span> <span class="TextSegSigDiff">would</span> <span class="TextSegSigDiff">attempt</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">create</span> <span class="TextSegSigDiff">an</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">infinite</span> <span class="TextSegSigDiff">list,</span> <span class="TextSegSigDiff">inserting</span> <span class="TextSegSigDiff">&quot;defenestrate&quot;</span> <span class="TextSegSigDiff">over</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">over</span> <span class="TextSegSigDiff">again.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;range()&quot; Function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;range()&quot; Function</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">======================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">======================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">If you do need to iterate over a sequence of numbers, the built-in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you do need to iterate over a sequence of numbers, the built-in</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">function &quot;range()&quot; comes in handy.&nbsp; It generates <span class="TextSegSigDiff">ari</span><span class="TextSegSigDiff">thme</span><span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">ic</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">function &quot;range()&quot; comes in handy.&nbsp; It generates <span class="TextSegSigDiff">l</span><span class="TextSegSigDiff">ists</span> <span class="TextSegSigDiff">containing</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">progressions:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">arithmetic</span> progressions:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">fo</span>r <span class="TextSegSigDiff">i</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">r</span>ange(<span class="TextSegSigDiff">5</span><span class="TextSegSigDiff">):</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; range(<span class="TextSegSigDiff">10)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">print(i)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">[0,</span> <span class="TextSegSigDiff">1,</span> <span class="TextSegSigDiff">2,</span> <span class="TextSegSigDiff">3,</span> <span class="TextSegSigDiff">4,</span> <span class="TextSegSigDiff">5,</span> <span class="TextSegSigDiff">6,</span> <span class="TextSegSigDiff">7,</span> <span class="TextSegSigDiff">8,</span> <span class="TextSegSigDiff">9]</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">0</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">1</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">2</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">3</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">4</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">The given end point is never part of the generated <span class="TextSegSigDiff">seque</span><span class="TextSegSigDiff">nce;</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">The given end point is never part of the generated <span class="TextSegSigDiff">list;</span> <span class="TextSegSigDiff">&quot;range(10)&quot;</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;range(10)&quot;</span> generates 10 values, the legal indices for items of a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">generates <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">list</span> <span class="TextSegSigDiff">of</span> 10 values, the legal indices for items of a</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">sequence of length 10.&nbsp; It is possible to let the range start at</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">sequence of length 10.&nbsp; It is possible to let the range start at</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">another number, or to specify a different increment (even negative;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">another number, or to specify a different increment (even negative;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">sometimes this is called the 'step'):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">sometimes this is called the 'step'):</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; range(5, 10)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> range(5, 10)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">5</span> <span class="TextSegSigDiff">through</span> <span class="TextSegSigDiff">9</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">[5,</span> <span class="TextSegSigDiff">6,</span> <span class="TextSegSigDiff">7,</span> <span class="TextSegSigDiff">8,</span> <span class="TextSegSigDiff">9]</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; range(0, 10, 3)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> range(0, 10, 3)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp;&nbsp; 0, 3, 6, 9</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">[</span>0, 3, 6, 9<span class="TextSegSigDiff">]</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; range(-10, -100, -30)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> range(-10, -100, -30)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; -10, -40, -70</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">[</span>-10, -40, -70<span class="TextSegSigDiff">]</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To iterate over the indices of a sequence, you can combine &quot;range()&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To iterate over the indices of a sequence, you can combine &quot;range()&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and &quot;len()&quot; as follows:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and &quot;len()&quot; as follows:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = ['Mary', 'had', 'a', 'little', 'lamb']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = ['Mary', 'had', 'a', 'little', 'lamb']</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for i in range(len(a)):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for i in range(len(a)):</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>i, a[i]<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print i, a[i]</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0 Mary</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0 Mary</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 1 had</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 1 had</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 2 a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 2 a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 3 little</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 3 little</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 4 lamb</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 4 lamb</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In most such cases, however, it is convenient to use the &quot;enumerate()&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In most such cases, however, it is convenient to use the &quot;enumerate()&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function, see Looping Techniques.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function, see Looping Techniques.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegSigDiff">A</span> <span class="TextSegSigDiff">strange</span> <span class="TextSegSigDiff">thing</span> <span class="TextSegSigDiff">happens</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">just</span> <span class="TextSegSigDiff">print</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">range:</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">print(range(10))</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">range(0,</span> <span class="TextSegSigDiff">10)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">In</span> <span class="TextSegSigDiff">many</span> <span class="TextSegSigDiff">ways</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">object</span> <span class="TextSegSigDiff">returned</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">&quot;range()&quot;</span> <span class="TextSegSigDiff">behaves</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">a</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">list,</span> <span class="TextSegSigDiff">but</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">fact</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">isn't.</span> <span class="TextSegSigDiff">It</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">object</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">returns</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">successive</span> <span class="TextSegSigDiff">items</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">desired</span> <span class="TextSegSigDiff">sequence</span> <span class="TextSegSigDiff">when</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">iterate</span> <span class="TextSegSigDiff">over</span> <span class="TextSegSigDiff">it,</span> <span class="TextSegSigDiff">but</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">doesn't</span> <span class="TextSegSigDiff">really</span> <span class="TextSegSigDiff">make</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">list,</span> <span class="TextSegSigDiff">thus</span> <span class="TextSegSigDiff">saving</span> <span class="TextSegSigDiff">space.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">We</span> <span class="TextSegSigDiff">say</span> <span class="TextSegSigDiff">such</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">object</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">*iterable*,</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">is,</span> <span class="TextSegSigDiff">suitable</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">target</span> <span class="TextSegSigDiff">for</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">functions</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">constructs</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">expect</span> <span class="TextSegSigDiff">something</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">they</span> <span class="TextSegSigDiff">can</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">obtain</span> <span class="TextSegSigDiff">successive</span> <span class="TextSegSigDiff">items</span> <span class="TextSegSigDiff">until</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">supply</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">exhausted.</span> <span class="TextSegSigDiff">We</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">seen</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;for&quot;</span> <span class="TextSegSigDiff">statement</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">such</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">*iterator*.</span> <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">function</span> <span class="TextSegSigDiff">&quot;list()&quot;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">another;</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">creates</span> <span class="TextSegSigDiff">lists</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">iterables:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">list(range(5))</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">[0,</span> <span class="TextSegSigDiff">1,</span> <span class="TextSegSigDiff">2,</span> <span class="TextSegSigDiff">3,</span> <span class="TextSegSigDiff">4]</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Later</span> <span class="TextSegSigDiff">we</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">see</span> <span class="TextSegSigDiff">more</span> <span class="TextSegSigDiff">functions</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">return</span> <span class="TextSegSigDiff">iterables</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">take</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">iterables</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">argument.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;break&quot; and &quot;continue&quot; Statements, and &quot;else&quot; Clauses on Loops</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;break&quot; and &quot;continue&quot; Statements, and &quot;else&quot; Clauses on Loops</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==============================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==============================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;break&quot; statement, like in C, breaks out of the innermost</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;break&quot; statement, like in C, breaks out of the innermost</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">enclosing &quot;for&quot; or &quot;while&quot; loop.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">enclosing &quot;for&quot; or &quot;while&quot; loop.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Loop statements may have an &quot;else&quot; clause; it is executed when the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Loop statements may have an &quot;else&quot; clause; it is executed when the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">loop terminates through exhaustion of the list (with &quot;for&quot;) or when</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">loop terminates through exhaustion of the list (with &quot;for&quot;) or when</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the condition becomes false (with &quot;while&quot;), but not when the loop is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the condition becomes false (with &quot;while&quot;), but not when the loop is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">terminated by a &quot;break&quot; statement.&nbsp; This is exemplified by the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">terminated by a &quot;break&quot; statement.&nbsp; This is exemplified by the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">following loop, which searches for prime numbers:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">following loop, which searches for prime numbers:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for n in range(2, 10):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for n in range(2, 10):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; for x in range(2, n):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; for x in range(2, n):</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if n % x == 0:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if n % x == 0:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>n, 'equals', x, '*', n/<span class="TextSegSigDiff">/x)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; print n, 'equals', x, '*', n/<span class="TextSegSigDiff">x</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; break</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; break</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; else:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; else:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # loop fell through without finding a factor</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # loop fell through without finding a factor</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>n, 'is a prime number'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; print n, 'is a prime number'</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 2 is a prime number</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 2 is a prime number</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 3 is a prime number</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 3 is a prime number</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 4 equals 2 * 2</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 4 equals 2 * 2</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 5 is a prime number</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 5 is a prime number</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 6 equals 2 * 3</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 6 equals 2 * 3</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 7 is a prime number</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 7 is a prime number</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 8 equals 2 * 4</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 8 equals 2 * 4</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 9 equals 3 * 3</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 9 equals 3 * 3</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(Yes, this is the correct code.&nbsp; Look closely: the &quot;else&quot; clause</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(Yes, this is the correct code.&nbsp; Look closely: the &quot;else&quot; clause</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">belongs to the &quot;for&quot; loop, **not** the &quot;if&quot; statement.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">belongs to the &quot;for&quot; loop, **not** the &quot;if&quot; statement.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When used with a loop, the &quot;else&quot; clause has more in common with the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When used with a loop, the &quot;else&quot; clause has more in common with the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;else&quot; clause of a &quot;try&quot; statement than it does that of &quot;if&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;else&quot; clause of a &quot;try&quot; statement than it does that of &quot;if&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">statements: a &quot;try&quot; statement's &quot;else&quot; clause runs when no exception</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">statements: a &quot;try&quot; statement's &quot;else&quot; clause runs when no exception</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">occurs, and a loop's &quot;else&quot; clause runs when no &quot;break&quot; occurs. For</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">occurs, and a loop's &quot;else&quot; clause runs when no &quot;break&quot; occurs. For</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">more on the &quot;try&quot; statement and exceptions, see Handling Exceptions.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">more on the &quot;try&quot; statement and exceptions, see Handling Exceptions.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;continue&quot; statement, also borrowed from C, continues with the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;continue&quot; statement, also borrowed from C, continues with the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">next iteration of the loop:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">next iteration of the loop:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for num in range(2, 10):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for num in range(2, 10):</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; if num % 2 == 0:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; if num % 2 == 0:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>&quot;Found an even number&quot;, num<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; print &quot;Found an even number&quot;, num</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; continue</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; continue</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>&quot;Found a number&quot;, num<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print &quot;Found a number&quot;, num</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; Found an even number 2</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; Found an even number 2</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Found a number 3</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Found a number 3</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Found an even number 4</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Found an even number 4</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Found a number 5</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Found a number 5</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Found an even number 6</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Found an even number 6</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Found a number 7</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Found a number 7</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Found an even number 8</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Found an even number 8</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Found a number 9</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Found a number 9</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;pass&quot; Statements</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;pass&quot; Statements</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;pass&quot; statement does nothing. It can be used when a statement is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;pass&quot; statement does nothing. It can be used when a statement is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">required syntactically but the program requires no action. For</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">required syntactically but the program requires no action. For</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; while True:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; while True:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; pass&nbsp; # Busy-wait for keyboard interrupt (Ctrl+C)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; pass&nbsp; # Busy-wait for keyboard interrupt (Ctrl+C)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This is commonly used for creating minimal classes:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This is commonly used for creating minimal classes:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; class MyEmptyClass:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; class MyEmptyClass:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; pass</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; pass</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Another place &quot;pass&quot; can be used is as a place-holder for a function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Another place &quot;pass&quot; can be used is as a place-holder for a function</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">or conditional body when you are working on new code, allowing you to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">or conditional body when you are working on new code, allowing you to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">keep thinking at a more abstract level.&nbsp; The &quot;pass&quot; is silently</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">keep thinking at a more abstract level.&nbsp; The &quot;pass&quot; is silently</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">ignored:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">ignored:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; def initlog(*args):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; def initlog(*args):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; pass&nbsp;&nbsp; # Remember to implement this!</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; pass&nbsp;&nbsp; # Remember to implement this!</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Defining Functions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Defining Functions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">We can create a function that writes the Fibonacci series to an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">We can create a function that writes the Fibonacci series to an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">arbitrary boundary:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">arbitrary boundary:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; def fib(n):&nbsp; &nbsp; # write Fibonacci series up to n</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; def fib(n):&nbsp; &nbsp; # write Fibonacci series up to n</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; &quot;&quot;&quot;Print a Fibonacci series up to n.&quot;&quot;&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; &quot;&quot;&quot;Print a Fibonacci series up to n.&quot;&quot;&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; a, b = 0, 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; a, b = 0, 1</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; while a &lt; n:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; while a &lt; n:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>a, <span class="TextSegSigDiff">end='</span> <span class="TextSegSigDiff">')</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; print a,</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; a, b = b, a+b</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; a, b = b, a+b</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">print()</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # Now call the function we just defined:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # Now call the function we just defined:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ... fib(2000)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... fib(2000)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The keyword &quot;def&quot; introduces a function *definition*.&nbsp; It must be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The keyword &quot;def&quot; introduces a function *definition*.&nbsp; It must be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">followed by the function name and the parenthesized list of formal</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">followed by the function name and the parenthesized list of formal</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">parameters. The statements that form the body of the function start at</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">parameters. The statements that form the body of the function start at</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the next line, and must be indented.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the next line, and must be indented.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The first statement of the function body can optionally be a string</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The first statement of the function body can optionally be a string</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">literal; this string literal is the function's documentation string,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">literal; this string literal is the function's documentation string,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">or *docstring*. (More about docstrings can be found in the section</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">or *docstring*. (More about docstrings can be found in the section</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Documentation Strings.) There are tools which use docstrings to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Documentation Strings.) There are tools which use docstrings to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">automatically produce online or printed documentation, or to let the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">automatically produce online or printed documentation, or to let the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">user interactively browse through code; it's good practice to include</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">user interactively browse through code; it's good practice to include</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">docstrings in code that you write, so make a habit of it.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">docstrings in code that you write, so make a habit of it.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The *execution* of a function introduces a new symbol table used for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The *execution* of a function introduces a new symbol table used for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the local variables of the function.&nbsp; More precisely, all variable</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the local variables of the function.&nbsp; More precisely, all variable</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">assignments in a function store the value in the local symbol table;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">assignments in a function store the value in the local symbol table;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">whereas variable references first look in the local symbol table, then</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">whereas variable references first look in the local symbol table, then</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in the local symbol tables of enclosing functions, then in the global</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in the local symbol tables of enclosing functions, then in the global</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">symbol table, and finally in the table of built-in names. Thus, global</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">symbol table, and finally in the table of built-in names. Thus, global</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">variables cannot be directly assigned a value within a function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">variables cannot be directly assigned a value within a function</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(unless named in a &quot;global&quot; statement), although they may be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(unless named in a &quot;global&quot; statement), although they may be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">referenced.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">referenced.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The actual parameters (arguments) to a function call are introduced in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The actual parameters (arguments) to a function call are introduced in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the local symbol table of the called function when it is called; thus,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the local symbol table of the called function when it is called; thus,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">arguments are passed using *call by value* (where the *value* is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">arguments are passed using *call by value* (where the *value* is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">always an object *reference*, not the value of the object). [1] When a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">always an object *reference*, not the value of the object). [1] When a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function calls another function, a new local symbol table is created</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function calls another function, a new local symbol table is created</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for that call.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for that call.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A function definition introduces the function name in the current</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A function definition introduces the function name in the current</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">symbol table. The value of the function name has a type that is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">symbol table. The value of the function name has a type that is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">recognized by the interpreter as a user-defined function.&nbsp; This value</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">recognized by the interpreter as a user-defined function.&nbsp; This value</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">can be assigned to another name which can then also be used as a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">can be assigned to another name which can then also be used as a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function.&nbsp; This serves as a general renaming mechanism:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function.&nbsp; This serves as a general renaming mechanism:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fib</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fib</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &lt;function fib at 10042ed0&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &lt;function fib at 10042ed0&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f = fib</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f = fib</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f(100)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f(100)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0 1 1 2 3 5 8 13 21 34 55 89</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0 1 1 2 3 5 8 13 21 34 55 89</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Coming from other languages, you might object that &quot;fib&quot; is not a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Coming from other languages, you might object that &quot;fib&quot; is not a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function but a procedure since it doesn't return a value.&nbsp; In fact,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function but a procedure since it doesn't return a value.&nbsp; In fact,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">even functions without a &quot;return&quot; statement do return a value, albeit</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">even functions without a &quot;return&quot; statement do return a value, albeit</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a rather boring one.&nbsp; This value is called &quot;None&quot; (it's a built-in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a rather boring one.&nbsp; This value is called &quot;None&quot; (it's a built-in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">name).&nbsp; Writing the value &quot;None&quot; is normally suppressed by the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">name).&nbsp; Writing the value &quot;None&quot; is normally suppressed by the</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">interpreter if it would be the only value written. You can see it if</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interpreter if it would be the only value written. You can see it if</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">you really want to using &quot;print<span class="TextSegSigDiff">()</span>&quot;:</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">you really want to using &quot;print&quot;:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fib(0)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fib(0)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>fib(0<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print fib(0)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; None</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; None</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It is simple to write a function that returns a list of the numbers of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It is simple to write a function that returns a list of the numbers of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the Fibonacci series, instead of printing it:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the Fibonacci series, instead of printing it:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; def fib2(n):&nbsp; # return Fibonacci series up to n</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; def fib2(n):&nbsp; # return Fibonacci series up to n</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; &quot;&quot;&quot;Return a list containing the Fibonacci series up to n.&quot;&quot;&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; &quot;&quot;&quot;Return a list containing the Fibonacci series up to n.&quot;&quot;&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; result = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; result = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; a, b = 0, 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; a, b = 0, 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; while a &lt; n:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; while a &lt; n:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; result.append(a)&nbsp; &nbsp; # see below</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; result.append(a)&nbsp; &nbsp; # see below</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; a, b = b, a+b</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; a, b = b, a+b</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; return result</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; return result</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f100 = fib2(100)&nbsp; &nbsp; # call it</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f100 = fib2(100)&nbsp; &nbsp; # call it</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # write the result</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # write the result</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This example, as usual, demonstrates some new Python features:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This example, as usual, demonstrates some new Python features:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* The &quot;return&quot; statement returns with a value from a function.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* The &quot;return&quot; statement returns with a value from a function.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; &quot;return&quot; without an expression argument returns &quot;None&quot;. Falling off</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; &quot;return&quot; without an expression argument returns &quot;None&quot;. Falling off</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; the end of a function also returns &quot;None&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; the end of a function also returns &quot;None&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* The statement &quot;result.append(a)&quot; calls a *method* of the list</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* The statement &quot;result.append(a)&quot; calls a *method* of the list</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; object &quot;result&quot;.&nbsp; A method is a function that 'belongs' to an object</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; object &quot;result&quot;.&nbsp; A method is a function that 'belongs' to an object</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; and is named &quot;obj.methodname&quot;, where &quot;obj&quot; is some object (this may</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; and is named &quot;obj.methodname&quot;, where &quot;obj&quot; is some object (this may</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; be an expression), and &quot;methodname&quot; is the name of a method that is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; be an expression), and &quot;methodname&quot; is the name of a method that is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; defined by the object's type. Different types define different</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; defined by the object's type. Different types define different</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; methods.&nbsp; Methods of different types may have the same name without</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; methods.&nbsp; Methods of different types may have the same name without</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; causing ambiguity.&nbsp; (It is possible to define your own object types</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; causing ambiguity.&nbsp; (It is possible to define your own object types</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; and methods, using *classes*, see Classes) The method &quot;append()&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; and methods, using *classes*, see Classes) The method &quot;append()&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; shown in the example is defined for list objects; it adds a new</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; shown in the example is defined for list objects; it adds a new</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; element at the end of the list.&nbsp; In this example it is equivalent to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; element at the end of the list.&nbsp; In this example it is equivalent to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; &quot;result = result + [a]&quot;, but more efficient.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; &quot;result = result + [a]&quot;, but more efficient.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">More on Defining Functions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">More on Defining Functions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==========================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==========================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It is also possible to define functions with a variable number of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It is also possible to define functions with a variable number of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">arguments. There are three forms, which can be combined.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">arguments. There are three forms, which can be combined.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Default Argument Values</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Default Argument Values</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The most useful form is to specify a default value for one or more</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The most useful form is to specify a default value for one or more</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">arguments. This creates a function that can be called with fewer</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">arguments. This creates a function that can be called with fewer</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">arguments than it is defined to allow.&nbsp; For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">arguments than it is defined to allow.&nbsp; For example:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; def ask_ok(prompt, retries=4, <span class="TextSegSigDiff">rem</span>in<span class="TextSegSigDiff">d</span><span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">r='</span>Please <span class="TextSegSigDiff">try</span> <span class="TextSegSigDiff">again</span>!'):</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; def ask_ok(prompt, retries=4, <span class="TextSegSigDiff">compla</span>in<span class="TextSegSigDiff">t='Yes</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">no,</span> please!'):</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; while True:</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; while True:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ok = input(prompt)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ok = <span class="TextSegSigDiff">raw_</span>input(prompt)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ok in ('y', 'ye', 'yes'):</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ok in ('y', 'ye', 'yes'):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return True</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return True</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ok in ('n', 'no', 'nop', 'nope'):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if ok in ('n', 'no', 'nop', 'nope'):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return False</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return False</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; retries = retries - 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; retries = retries - 1</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if retries &lt; 0:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if retries &lt; 0:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; raise <span class="TextSegSigDiff">Value</span>Error('<span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">nvalid</span> use<span class="TextSegSigDiff">r</span> r<span class="TextSegSigDiff">esponse</span>')</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; raise <span class="TextSegSigDiff">IO</span>Error('<span class="TextSegSigDiff">refusen</span><span class="TextSegSigDiff">ik</span> user')</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(rem</span>in<span class="TextSegSigDiff">der)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print <span class="TextSegSigDiff">compla</span>in<span class="TextSegSigDiff">t</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This function can be called in several ways:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This function can be called in several ways:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* giving only the mandatory argument: &quot;ask_ok('Do you really want to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* giving only the mandatory argument: &quot;ask_ok('Do you really want to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; quit?')&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; quit?')&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* giving one of the optional arguments: &quot;ask_ok('OK to overwrite the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* giving one of the optional arguments: &quot;ask_ok('OK to overwrite the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; file?', 2)&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; file?', 2)&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* or even giving all arguments: &quot;ask_ok('OK to overwrite the file?',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* or even giving all arguments: &quot;ask_ok('OK to overwrite the file?',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; 2, 'Come on, only yes or no!')&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; 2, 'Come on, only yes or no!')&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This example also introduces the &quot;in&quot; keyword. This tests whether or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This example also introduces the &quot;in&quot; keyword. This tests whether or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">not a sequence contains a certain value.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">not a sequence contains a certain value.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The default values are evaluated at the point of function definition</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The default values are evaluated at the point of function definition</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in the *defining* scope, so that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in the *defining* scope, so that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; i = 5</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; i = 5</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; def f(arg=i):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def f(arg=i):</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>arg<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print arg</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; i = 6</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; i = 6</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; f()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; f()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">will print &quot;5&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">will print &quot;5&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">**Important warning:**&nbsp; The default value is evaluated only once. This</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">**Important warning:**&nbsp; The default value is evaluated only once. This</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">makes a difference when the default is a mutable object such as a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">makes a difference when the default is a mutable object such as a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">list, dictionary, or instances of most classes.&nbsp; For example, the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">list, dictionary, or instances of most classes.&nbsp; For example, the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">following function accumulates the arguments passed to it on</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">following function accumulates the arguments passed to it on</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">subsequent calls:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">subsequent calls:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def f(a, L=[]):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def f(a, L=[]):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; L.append(a)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; L.append(a)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return L</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return L</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>f(1<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; print f(1)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>f(2<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; print f(2)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>f(3<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; print f(3)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This will print</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This will print</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [1]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [1]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [1, 2]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [1, 2]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [1, 2, 3]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [1, 2, 3]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you don't want the default to be shared between subsequent calls,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you don't want the default to be shared between subsequent calls,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you can write the function like this instead:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you can write the function like this instead:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def f(a, L=None):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def f(a, L=None):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; if L is None:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; if L is None:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; L = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; L = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; L.append(a)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; L.append(a)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return L</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return L</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Keyword Arguments</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Keyword Arguments</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Functions can also be called using *keyword arguments* of the form</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Functions can also be called using *keyword arguments* of the form</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;kwarg=value&quot;.&nbsp; For instance, the following function:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;kwarg=value&quot;.&nbsp; For instance, the following function:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>&quot;-- This parrot wouldn't&quot;, action, <span class="TextSegSigDiff">end='</span> <span class="TextSegSigDiff">')</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print &quot;-- This parrot wouldn't&quot;, action,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>&quot;if you put&quot;, voltage, &quot;volts through it.&quot;<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print &quot;if you put&quot;, voltage, &quot;volts through it.&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>&quot;-- Lovely plumage, the&quot;, type<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print &quot;-- Lovely plumage, the&quot;, type</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>&quot;-- It's&quot;, state, &quot;!&quot;<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print &quot;-- It's&quot;, state, &quot;!&quot;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">accepts one required argument (&quot;voltage&quot;) and three optional arguments</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">accepts one required argument (&quot;voltage&quot;) and three optional arguments</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(&quot;state&quot;, &quot;action&quot;, and &quot;type&quot;).&nbsp; This function can be called in any</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(&quot;state&quot;, &quot;action&quot;, and &quot;type&quot;).&nbsp; This function can be called in any</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of the following ways:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of the following ways:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; parrot(1000)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # 1 positional argument</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; parrot(1000)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # 1 positional argument</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; parrot(voltage=1000)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # 1 keyword argument</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; parrot(voltage=1000)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # 1 keyword argument</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; parrot(voltage=1000000, action='VOOOOOM')&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # 2 keyword arguments</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; parrot(voltage=1000000, action='VOOOOOM')&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # 2 keyword arguments</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; parrot(action='VOOOOOM', voltage=1000000)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # 2 keyword arguments</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; parrot(action='VOOOOOM', voltage=1000000)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # 2 keyword arguments</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; parrot('a million', 'bereft of life', 'jump')&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # 3 positional arguments</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; parrot('a million', 'bereft of life', 'jump')&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # 3 positional arguments</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; parrot('a thousand', state='pushing up the daisies')&nbsp; # 1 positional, 1 keyword</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; parrot('a thousand', state='pushing up the daisies')&nbsp; # 1 positional, 1 keyword</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">but all the following calls would be invalid:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">but all the following calls would be invalid:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; parrot()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # required argument missing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; parrot()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # required argument missing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; parrot(voltage=5.0, 'dead')&nbsp; # non-keyword argument after a keyword argument</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; parrot(voltage=5.0, 'dead')&nbsp; # non-keyword argument after a keyword argument</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; parrot(110, voltage=220)&nbsp; &nbsp;&nbsp; # duplicate value for the same argument</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; parrot(110, voltage=220)&nbsp; &nbsp;&nbsp; # duplicate value for the same argument</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; parrot(actor='John Cleese')&nbsp; # unknown keyword argument</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; parrot(actor='John Cleese')&nbsp; # unknown keyword argument</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In a function call, keyword arguments must follow positional</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In a function call, keyword arguments must follow positional</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">arguments. All the keyword arguments passed must match one of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">arguments. All the keyword arguments passed must match one of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">arguments accepted by the function (e.g. &quot;actor&quot; is not a valid</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">arguments accepted by the function (e.g. &quot;actor&quot; is not a valid</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">argument for the &quot;parrot&quot; function), and their order is not important.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">argument for the &quot;parrot&quot; function), and their order is not important.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This also includes non-optional arguments (e.g. &quot;parrot(voltage=1000)&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This also includes non-optional arguments (e.g. &quot;parrot(voltage=1000)&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is valid too). No argument may receive a value more than once. Here's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is valid too). No argument may receive a value more than once. Here's</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">an example that fails due to this restriction:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">an example that fails due to this restriction:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; def function(a):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; def function(a):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; pass</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; pass</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; function(0, a=0)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; function(0, a=0)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; TypeError: function() got multiple values for keyword argument 'a'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; TypeError: function() got multiple values for keyword argument 'a'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When a final formal parameter of the form &quot;**name&quot; is present, it</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When a final formal parameter of the form &quot;**name&quot; is present, it</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">receives a dictionary (see Mapping Types --- dict) containing all</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">receives a dictionary (see Mapping Types --- dict) containing all</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">keyword arguments except for those corresponding to a formal</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">keyword arguments except for those corresponding to a formal</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">parameter.&nbsp; This may be combined with a formal parameter of the form</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">parameter.&nbsp; This may be combined with a formal parameter of the form</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;*name&quot; (described in the next subsection) which receives a tuple</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;*name&quot; (described in the next subsection) which receives a tuple</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">containing the positional arguments beyond the formal parameter list.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">containing the positional arguments beyond the formal parameter list.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(&quot;*name&quot; must occur before &quot;**name&quot;.) For example, if we define a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(&quot;*name&quot; must occur before &quot;**name&quot;.) For example, if we define a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function like this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function like this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; def cheeseshop(kind, *arguments, **keywords):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def cheeseshop(kind, *arguments, **keywords):</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>&quot;-- Do you have any&quot;, kind, &quot;?&quot;<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print &quot;-- Do you have any&quot;, kind, &quot;?&quot;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>&quot;-- I'm sorry, we're all out of&quot;, kind<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print &quot;-- I'm sorry, we're all out of&quot;, kind</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; for arg in arguments:</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; for arg in arguments:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>arg<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print arg</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>&quot;-&quot; * 40<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print &quot;-&quot; * 40</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">keys</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">sorted(keywords.keys())</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; for kw in key<span class="TextSegSigDiff">word</span>s:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; for kw in keys:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>kw, &quot;:&quot;, keywords[kw]<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print kw, &quot;:&quot;, keywords[kw]</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It could be called like this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It could be called like this:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; cheeseshop(&quot;Limburger&quot;, &quot;It's very runny, sir.&quot;,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; cheeseshop(&quot;Limburger&quot;, &quot;It's very runny, sir.&quot;,</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &quot;It's really very, VERY runny, sir.&quot;,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &quot;It's really very, VERY runny, sir.&quot;,</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; shopkeeper=<span class="TextSegSigDiff">&quot;</span>Michael Palin<span class="TextSegSigDiff">&quot;</span>,</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; shopkeeper=<span class="TextSegSigDiff">'</span>Michael Palin<span class="TextSegSigDiff">'</span>,</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; client=&quot;John Cleese&quot;,</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; client=&quot;John Cleese&quot;,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; sketch=&quot;Cheese Shop Sketch&quot;)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; sketch=&quot;Cheese Shop Sketch&quot;)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and of course it would print:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and of course it would print:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; -- Do you have any Limburger ?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; -- Do you have any Limburger ?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; -- I'm sorry, we're all out of Limburger</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; -- I'm sorry, we're all out of Limburger</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; It's very runny, sir.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; It's very runny, sir.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; It's really very, VERY runny, sir.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; It's really very, VERY runny, sir.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ----------------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ----------------------------------------</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">shopkeeper</span> <span class="TextSegSigDiff">:</span> <span class="TextSegSigDiff">Michael</span> <span class="TextSegSigDiff">Palin</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; client : John Cleese</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; client : John Cleese</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">shopkeeper</span> <span class="TextSegSigDiff">:</span> <span class="TextSegSigDiff">Michael</span> <span class="TextSegSigDiff">Palin</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; sketch : Cheese Shop Sketch</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; sketch : Cheese Shop Sketch</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">Note that the <span class="TextSegSigDiff">order</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">the</span> keyword arguments <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">p</span><span class="TextSegSigDiff">r</span>inte<span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">is</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Note that the <span class="TextSegSigDiff">l</span><span class="TextSegSigDiff">ist</span> <span class="TextSegSigDiff">of</span> keyword argument <span class="TextSegSigDiff">names</span> <span class="TextSegSigDiff">i</span>s <span class="TextSegSigDiff">created</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">sort</span>in<span class="TextSegSigDiff">g</span> t<span class="TextSegSigDiff">h</span>e</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">result</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">keywords</span> <span class="TextSegSigDiff">dictionary's</span> <span class="TextSegSigDiff">&quot;keys()&quot;</span> <span class="TextSegSigDiff">method</span> <span class="TextSegSigDiff">before</span> <span class="TextSegSigDiff">printing</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">guara</span>nte<span class="TextSegSigDiff">ed</span> t<span class="TextSegSigDiff">o</span> <span class="TextSegSigDiff">match</span> the order in which the<span class="TextSegSigDiff">y</span> <span class="TextSegSigDiff">wer</span>e <span class="TextSegSigDiff">provided</span> <span class="TextSegSigDiff">i</span>n t<span class="TextSegSigDiff">he</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">its</span> <span class="TextSegSigDiff">co</span>nte<span class="TextSegSigDiff">nts;</span> <span class="TextSegSigDiff">if</span> t<span class="TextSegSigDiff">his</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">done,</span> the order in which the <span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">rgum</span>ent<span class="TextSegSigDiff">s</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">f</span>un<span class="TextSegSigDiff">ct</span><span class="TextSegSigDiff">ion</span> <span class="TextSegSigDiff">call</span>.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">printed</span> <span class="TextSegSigDiff">is</span> un<span class="TextSegSigDiff">defi</span><span class="TextSegSigDiff">ned</span>.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Arbitrary Argument Lists</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Arbitrary Argument Lists</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Finally, the least frequently used option is to specify that a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Finally, the least frequently used option is to specify that a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function can be called with an arbitrary number of arguments.&nbsp; These</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function can be called with an arbitrary number of arguments.&nbsp; These</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">arguments will be wrapped up in a tuple (see Tuples and Sequences).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">arguments will be wrapped up in a tuple (see Tuples and Sequences).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Before the variable number of arguments, zero or more normal arguments</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Before the variable number of arguments, zero or more normal arguments</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">may occur.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">may occur.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def write_multiple_items(file, separator, *args):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def write_multiple_items(file, separator, *args):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; file.write(separator.join(args))</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; file.write(separator.join(args))</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Normally,</span> <span class="TextSegSigDiff">these</span> <span class="TextSegSigDiff">&quot;variadic&quot;</span> <span class="TextSegSigDiff">arguments</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">last</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">list</span> <span class="TextSegSigDiff">of</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">formal</span> <span class="TextSegSigDiff">parameters,</span> <span class="TextSegSigDiff">because</span> <span class="TextSegSigDiff">they</span> <span class="TextSegSigDiff">scoop</span> <span class="TextSegSigDiff">up</span> <span class="TextSegSigDiff">all</span> <span class="TextSegSigDiff">remaining</span> <span class="TextSegSigDiff">input</span> <span class="TextSegSigDiff">arguments</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">passed</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">function.</span> <span class="TextSegSigDiff">Any</span> <span class="TextSegSigDiff">formal</span> <span class="TextSegSigDiff">parameters</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">occur</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">after</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;*args&quot;</span> <span class="TextSegSigDiff">parameter</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">'keyword-only'</span> <span class="TextSegSigDiff">arguments,</span> <span class="TextSegSigDiff">meaning</span> <span class="TextSegSigDiff">that</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">they</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">only</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">used</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">keywords</span> <span class="TextSegSigDiff">rather</span> <span class="TextSegSigDiff">than</span> <span class="TextSegSigDiff">positional</span> <span class="TextSegSigDiff">arguments.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">def</span> <span class="TextSegSigDiff">concat(*args,</span> <span class="TextSegSigDiff">sep=&quot;/&quot;):</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">return</span> <span class="TextSegSigDiff">sep.join(args)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">concat(&quot;earth&quot;,</span> <span class="TextSegSigDiff">&quot;mars&quot;,</span> <span class="TextSegSigDiff">&quot;venus&quot;)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">'earth/mars/venus'</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">concat(&quot;earth&quot;,</span> <span class="TextSegSigDiff">&quot;mars&quot;,</span> <span class="TextSegSigDiff">&quot;venus&quot;,</span> <span class="TextSegSigDiff">sep=&quot;.&quot;)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">'earth.mars.venus'</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Unpacking Argument Lists</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Unpacking Argument Lists</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The reverse situation occurs when the arguments are already in a list</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The reverse situation occurs when the arguments are already in a list</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">or tuple but need to be unpacked for a function call requiring</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">or tuple but need to be unpacked for a function call requiring</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">separate positional arguments.&nbsp; For instance, the built-in &quot;range()&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">separate positional arguments.&nbsp; For instance, the built-in &quot;range()&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function expects separate *start* and *stop* arguments.&nbsp; If they are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function expects separate *start* and *stop* arguments.&nbsp; If they are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">not available separately, write the function call with the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">not available separately, write the function call with the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;*&quot;-operator to unpack the arguments out of a list or tuple:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;*&quot;-operator to unpack the arguments out of a list or tuple:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">list(</span>range(3, 6)<span class="TextSegSigDiff">)</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # normal call with separate arguments</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; range(3, 6)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # normal call with separate arguments</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; [3, 4, 5]</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; [3, 4, 5]</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; args = [3, 6]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; args = [3, 6]</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">list(</span>range(*args<span class="TextSegSigDiff">)</span>)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # call with arguments unpacked from a list</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; range(*args)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # call with arguments unpacked from a list</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; [3, 4, 5]</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; [3, 4, 5]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In the same fashion, dictionaries can deliver keyword arguments with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In the same fashion, dictionaries can deliver keyword arguments with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the &quot;**&quot;-operator:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the &quot;**&quot;-operator:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; def parrot(voltage, state='a stiff', action='voom'):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; def parrot(voltage, state='a stiff', action='voom'):</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>&quot;-- This parrot wouldn't&quot;, action, <span class="TextSegSigDiff">end='</span> <span class="TextSegSigDiff">')</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print &quot;-- This parrot wouldn't&quot;, action,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>&quot;if you put&quot;, voltage, &quot;volts through it.&quot;, <span class="TextSegSigDiff">end='</span> <span class="TextSegSigDiff">')</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print &quot;if you put&quot;, voltage, &quot;volts through it.&quot;,</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>&quot;E's&quot;, state, &quot;!&quot;<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print &quot;E's&quot;, state, &quot;!&quot;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d = {&quot;voltage&quot;: &quot;four million&quot;, &quot;state&quot;: &quot;bleedin' demised&quot;, &quot;action&quot;: &quot;VOOM&quot;}</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d = {&quot;voltage&quot;: &quot;four million&quot;, &quot;state&quot;: &quot;bleedin' demised&quot;, &quot;action&quot;: &quot;VOOM&quot;}</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; parrot(**d)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; parrot(**d)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; -- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; -- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Lambda Expressions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Lambda Expressions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Small anonymous functions can be created with the &quot;lambda&quot; keyword.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Small anonymous functions can be created with the &quot;lambda&quot; keyword.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This function returns the sum of its two arguments: &quot;lambda a, b:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This function returns the sum of its two arguments: &quot;lambda a, b:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a+b&quot;. Lambda functions can be used wherever function objects are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a+b&quot;. Lambda functions can be used wherever function objects are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">required.&nbsp; They are syntactically restricted to a single expression.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">required.&nbsp; They are syntactically restricted to a single expression.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Semantically, they are just syntactic sugar for a normal function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Semantically, they are just syntactic sugar for a normal function</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">definition.&nbsp; Like nested function definitions, lambda functions can</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">definition.&nbsp; Like nested function definitions, lambda functions can</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">reference variables from the containing scope:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">reference variables from the containing scope:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; def make_incrementor(n):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; def make_incrementor(n):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; return lambda x: x + n</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; return lambda x: x + n</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f = make_incrementor(42)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f = make_incrementor(42)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f(0)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f(0)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 42</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 42</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f(1)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f(1)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 43</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 43</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The above example uses a lambda expression to return a function.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The above example uses a lambda expression to return a function.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Another use is to pass a small function as an argument:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Another use is to pass a small function as an argument:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; pairs.sort(key=lambda pair: pair[1])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; pairs.sort(key=lambda pair: pair[1])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; pairs</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; pairs</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Documentation Strings</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Documentation Strings</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">Here are <span class="TextSegSigDiff">so</span>me conventions about the content and formatting of</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">T</span>here are <span class="TextSegSigDiff">e</span>me<span class="TextSegSigDiff">rging</span> conventions about the content and formatting of</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">documentation strings.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">documentation strings.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The first line should always be a short, concise summary of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The first line should always be a short, concise summary of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">object's purpose.&nbsp; For brevity, it should not explicitly state the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">object's purpose.&nbsp; For brevity, it should not explicitly state the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">object's name or type, since these are available by other means</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">object's name or type, since these are available by other means</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(except if the name happens to be a verb describing a function's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(except if the name happens to be a verb describing a function's</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">operation).&nbsp; This line should begin with a capital letter and end with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">operation).&nbsp; This line should begin with a capital letter and end with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a period.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a period.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If there are more lines in the documentation string, the second line</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If there are more lines in the documentation string, the second line</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">should be blank, visually separating the summary from the rest of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">should be blank, visually separating the summary from the rest of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">description.&nbsp; The following lines should be one or more paragraphs</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">description.&nbsp; The following lines should be one or more paragraphs</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">describing the object's calling conventions, its side effects, etc.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">describing the object's calling conventions, its side effects, etc.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The Python parser does not strip indentation from multi-line string</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The Python parser does not strip indentation from multi-line string</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">literals in Python, so tools that process documentation have to strip</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">literals in Python, so tools that process documentation have to strip</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">indentation if desired.&nbsp; This is done using the following convention.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">indentation if desired.&nbsp; This is done using the following convention.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The first non-blank line *after* the first line of the string</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The first non-blank line *after* the first line of the string</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">determines the amount of indentation for the entire documentation</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">determines the amount of indentation for the entire documentation</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">string.&nbsp; (We can't use the first line since it is generally adjacent</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">string.&nbsp; (We can't use the first line since it is generally adjacent</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to the string's opening quotes so its indentation is not apparent in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to the string's opening quotes so its indentation is not apparent in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the string literal.)&nbsp; Whitespace &quot;equivalent&quot; to this indentation is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the string literal.)&nbsp; Whitespace &quot;equivalent&quot; to this indentation is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">then stripped from the start of all lines of the string.&nbsp; Lines that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">then stripped from the start of all lines of the string.&nbsp; Lines that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">are indented less should not occur, but if they occur all their</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">are indented less should not occur, but if they occur all their</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">leading whitespace should be stripped.&nbsp; Equivalence of whitespace</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">leading whitespace should be stripped.&nbsp; Equivalence of whitespace</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">should be tested after expansion of tabs (to 8 spaces, normally).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">should be tested after expansion of tabs (to 8 spaces, normally).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Here is an example of a multi-line docstring:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Here is an example of a multi-line docstring:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; def my_function():</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; def my_function():</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; &quot;&quot;&quot;Do nothing, but document it.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; &quot;&quot;&quot;Do nothing, but document it.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; No, really, it doesn't do anything.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; No, really, it doesn't do anything.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; &quot;&quot;&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; &quot;&quot;&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; pass</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; pass</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>my_function.__doc__<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print my_function.__doc__</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; Do nothing, but document it.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; Do nothing, but document it.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; No, really, it doesn't do anything.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; No, really, it doesn't do anything.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Function</span> <span class="TextSegSigDiff">Annotations</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">--------------------</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Function</span> <span class="TextSegSigDiff">annotations</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">completely</span> <span class="TextSegSigDiff">optional</span> <span class="TextSegSigDiff">metadata</span> <span class="TextSegSigDiff">information</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">about</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">types</span> <span class="TextSegSigDiff">used</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">user-defined</span> <span class="TextSegSigDiff">functions</span> <span class="TextSegSigDiff">(see</span> <span class="TextSegSigDiff">**PEP</span> <span class="TextSegSigDiff">484**</span> <span class="TextSegSigDiff">for</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">more</span> <span class="TextSegSigDiff">information).</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Annotations</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">stored</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;__annotations__&quot;</span> <span class="TextSegSigDiff">attribute</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">function</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">dictionary</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">no</span> <span class="TextSegSigDiff">effect</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">any</span> <span class="TextSegSigDiff">other</span> <span class="TextSegSigDiff">part</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">function.</span>&nbsp; <span class="TextSegSigDiff">Parameter</span> <span class="TextSegSigDiff">annotations</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">defined</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">colon</span> <span class="TextSegSigDiff">after</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">parameter</span> <span class="TextSegSigDiff">name,</span> <span class="TextSegSigDiff">followed</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">expression</span> <span class="TextSegSigDiff">evaluating</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">of</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">annotation.</span>&nbsp; <span class="TextSegSigDiff">Return</span> <span class="TextSegSigDiff">annotations</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">defined</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">literal</span> <span class="TextSegSigDiff">&quot;-&gt;&quot;,</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">followed</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">expression,</span> <span class="TextSegSigDiff">between</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">parameter</span> <span class="TextSegSigDiff">list</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">colon</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">denoting</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">end</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;def&quot;</span> <span class="TextSegSigDiff">statement.</span>&nbsp; <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">following</span> <span class="TextSegSigDiff">example</span> <span class="TextSegSigDiff">has</span> <span class="TextSegSigDiff">a</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">positional</span> <span class="TextSegSigDiff">argument,</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">keyword</span> <span class="TextSegSigDiff">argument,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">return</span> <span class="TextSegSigDiff">value</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">annotated:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">def</span> <span class="TextSegSigDiff">f(ham:</span> <span class="TextSegSigDiff">str,</span> <span class="TextSegSigDiff">eggs:</span> <span class="TextSegSigDiff">str</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">'eggs')</span> <span class="TextSegSigDiff">-&gt;</span> <span class="TextSegSigDiff">str:</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">print(&quot;Annotations:&quot;,</span> <span class="TextSegSigDiff">f.__annotations__)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">print(&quot;Arguments:&quot;,</span> <span class="TextSegSigDiff">ham,</span> <span class="TextSegSigDiff">eggs)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">return</span> <span class="TextSegSigDiff">ham</span> <span class="TextSegSigDiff">+</span> <span class="TextSegSigDiff">'</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">'</span> <span class="TextSegSigDiff">+</span> <span class="TextSegSigDiff">eggs</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">f('spam')</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Annotations:</span> <span class="TextSegSigDiff">{'ham':</span> <span class="TextSegSigDiff">&lt;class</span> <span class="TextSegSigDiff">'str'&gt;,</span> <span class="TextSegSigDiff">'return':</span> <span class="TextSegSigDiff">&lt;class</span> <span class="TextSegSigDiff">'str'&gt;,</span> <span class="TextSegSigDiff">'eggs':</span> <span class="TextSegSigDiff">&lt;class</span> <span class="TextSegSigDiff">'str'&gt;}</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Arguments:</span> <span class="TextSegSigDiff">spam</span> <span class="TextSegSigDiff">eggs</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">'spam</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">eggs'</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Intermezzo: Coding Style</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Intermezzo: Coding Style</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">========================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">========================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Now that you are about to write longer, more complex pieces of Python,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Now that you are about to write longer, more complex pieces of Python,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">it is a good time to talk about *coding style*.&nbsp; Most languages can be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">it is a good time to talk about *coding style*.&nbsp; Most languages can be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">written (or more concise, *formatted*) in different styles; some are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">written (or more concise, *formatted*) in different styles; some are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">more readable than others. Making it easy for others to read your code</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">more readable than others. Making it easy for others to read your code</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is always a good idea, and adopting a nice coding style helps</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is always a good idea, and adopting a nice coding style helps</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">tremendously for that.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">tremendously for that.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For Python, **PEP 8** has emerged as the style guide that most</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For Python, **PEP 8** has emerged as the style guide that most</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">projects adhere to; it promotes a very readable and eye-pleasing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">projects adhere to; it promotes a very readable and eye-pleasing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">coding style.&nbsp; Every Python developer should read it at some point;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">coding style.&nbsp; Every Python developer should read it at some point;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">here are the most important points extracted for you:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">here are the most important points extracted for you:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Use 4-space indentation, and no tabs.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Use 4-space indentation, and no tabs.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; 4 spaces are a good compromise between small indentation (allows</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; 4 spaces are a good compromise between small indentation (allows</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; greater nesting depth) and large indentation (easier to read).&nbsp; Tabs</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; greater nesting depth) and large indentation (easier to read).&nbsp; Tabs</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; introduce confusion, and are best left out.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; introduce confusion, and are best left out.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Wrap lines so that they don't exceed 79 characters.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Wrap lines so that they don't exceed 79 characters.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; This helps users with small displays and makes it possible to have</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; This helps users with small displays and makes it possible to have</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; several code files side-by-side on larger displays.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; several code files side-by-side on larger displays.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Use blank lines to separate functions and classes, and larger</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Use blank lines to separate functions and classes, and larger</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; blocks of code inside functions.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; blocks of code inside functions.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* When possible, put comments on a line of their own.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* When possible, put comments on a line of their own.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Use docstrings.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Use docstrings.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Use spaces around operators and after commas, but not directly</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Use spaces around operators and after commas, but not directly</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; inside bracketing constructs: &quot;a = f(1, 2) + g(3, 4)&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; inside bracketing constructs: &quot;a = f(1, 2) + g(3, 4)&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Name your classes and functions consistently; the convention is to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Name your classes and functions consistently; the convention is to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; use &quot;CamelCase&quot; for classes and &quot;lower_case_with_underscores&quot; for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; use &quot;CamelCase&quot; for classes and &quot;lower_case_with_underscores&quot; for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; functions and methods.&nbsp; Always use &quot;self&quot; as the name for the first</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; functions and methods.&nbsp; Always use &quot;self&quot; as the name for the first</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; method argument (see A First Look at Classes for more on classes and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; method argument (see A First Look at Classes for more on classes and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; methods).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; methods).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">* Don't use fancy encodings if your code is meant to be used in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Don't use fancy encodings if your code is meant to be used in</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp; international environments.&nbsp; P<span class="TextSegSigDiff">ython's</span> <span class="TextSegSigDiff">default,</span> <span class="TextSegSigDiff">UTF-8,</span> or <span class="TextSegSigDiff">eve</span>n <span class="TextSegSigDiff">plai</span>n</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp; international environments.&nbsp; P<span class="TextSegSigDiff">lai</span><span class="TextSegSigDiff">n</span> <span class="TextSegSigDiff">ASCII</span> <span class="TextSegSigDiff">w</span>or<span class="TextSegSigDiff">ks</span> <span class="TextSegSigDiff">best</span> <span class="TextSegSigDiff">i</span>n <span class="TextSegSigDiff">a</span>n<span class="TextSegSigDiff">y</span> <span class="TextSegSigDiff">case.</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">ASCII</span> <span class="TextSegSigDiff">work</span> <span class="TextSegSigDiff">best</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">any</span> <span class="TextSegSigDiff">case.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">Likewise,</span> <span class="TextSegSigDiff">don't</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">non-ASCII</span> <span class="TextSegSigDiff">characters</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">identifiers</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">there</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">only</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">slightest</span> <span class="TextSegSigDiff">chance</span> <span class="TextSegSigDiff">people</span> <span class="TextSegSigDiff">speaking</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">different</span> <span class="TextSegSigDiff">language</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">read</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">maintain</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">code.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-[ Footnotes ]-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-[ Footnotes ]-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">[1] Actually, *call by object reference* would be a better</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">[1] Actually, *call by object reference* would be a better</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; description, since if a mutable object is passed, the caller will</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; description, since if a mutable object is passed, the caller will</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; see any changes the callee makes to it (items inserted into a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; see any changes the callee makes to it (items inserted into a</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; list).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; list).</td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\tutorial\datastructures.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Data Structures</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Data Structures</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">***************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">***************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This chapter describes some things you've learned about already in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This chapter describes some things you've learned about already in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">more detail, and adds some new things as well.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">more detail, and adds some new things as well.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">More on Lists</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">More on Lists</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=============</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=============</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The list data type has some more methods.&nbsp; Here are all of the methods</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The list data type has some more methods.&nbsp; Here are all of the methods</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of list objects:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of list objects:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">list.append(x)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">list.append(x)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; Add an item to the end of the list<span class="TextSegSigDiff">.</span>&nbsp; Equivalent to &quot;a[len(a):] =</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; Add an item to the end of the list<span class="TextSegSigDiff">;</span> equivalent to &quot;a[len(a):] =</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; [x]&quot;.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; [x]&quot;.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">list.extend(<span class="TextSegSigDiff">iterable</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">list.extend(<span class="TextSegSigDiff">L</span>)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; Extend the list by appending all the items <span class="TextSegSigDiff">from</span> the <span class="TextSegSigDiff">iterable.</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; Extend the list by appending all the items <span class="TextSegSigDiff">in</span> the <span class="TextSegSigDiff">given</span> <span class="TextSegSigDiff">list;</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; Equivalent to &quot;a[len(a):] = <span class="TextSegSigDiff">iterable</span>&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; equivalent to &quot;a[len(a):] = <span class="TextSegSigDiff">L</span>&quot;.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">list.insert(i, x)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">list.insert(i, x)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Insert an item at a given position.&nbsp; The first argument is the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Insert an item at a given position.&nbsp; The first argument is the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; index of the element before which to insert, so &quot;a.insert(0, x)&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; index of the element before which to insert, so &quot;a.insert(0, x)&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; inserts at the front of the list, and &quot;a.insert(len(a), x)&quot; is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; inserts at the front of the list, and &quot;a.insert(len(a), x)&quot; is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; equivalent to &quot;a.append(x)&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; equivalent to &quot;a.append(x)&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">list.remove(x)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">list.remove(x)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Remove the first item from the list whose value is *x*.&nbsp; It is an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Remove the first item from the list whose value is *x*. It is an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; error if there is no such item.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; error if there is no such item.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">list.pop([i])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">list.pop([i])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Remove the item at the given position in the list, and return it.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Remove the item at the given position in the list, and return it.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; If no index is specified, &quot;a.pop()&quot; removes and returns the last</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; If no index is specified, &quot;a.pop()&quot; removes and returns the last</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; item in the list.&nbsp; (The square brackets around the *i* in the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; item in the list.&nbsp; (The square brackets around the *i* in the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; method signature denote that the parameter is optional, not that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; method signature denote that the parameter is optional, not that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; you should type square brackets at that position.&nbsp; You will see</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; you should type square brackets at that position.&nbsp; You will see</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; this notation frequently in the Python Library Reference.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; this notation frequently in the Python Library Reference.)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">list.<span class="TextSegSigDiff">cl</span><span class="TextSegSigDiff">ear(</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">list.<span class="TextSegSigDiff">index</span><span class="TextSegSigDiff">(x</span>)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Remove</span> <span class="TextSegSigDiff">all</span> <span class="TextSegSigDiff">items</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">list.</span>&nbsp; <span class="TextSegSigDiff">Equivalent</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">&quot;del</span> <span class="TextSegSigDiff">a[:]&quot;.</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegSigDiff">list.index(x[,</span> <span class="TextSegSigDiff">start[,</span> <span class="TextSegSigDiff">end]])</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; Return <span class="TextSegSigDiff">zero-based</span> index in the list of the first item whose value</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; Return <span class="TextSegSigDiff">th</span><span class="TextSegSigDiff">e</span> index in the list of the first item whose value <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">*x*.</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; i<span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">*x*.</span> <span class="TextSegSigDiff">Ra</span>is<span class="TextSegSigDiff">es</span> a <span class="TextSegSigDiff">&quot;ValueE</span>rror<span class="TextSegSigDiff">&quot;</span> if there is no such item.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; I<span class="TextSegSigDiff">t</span> is a<span class="TextSegSigDiff">n</span> <span class="TextSegSigDiff">e</span>rror if there is no such item.</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">optional</span> <span class="TextSegSigDiff">arguments</span> <span class="TextSegSigDiff">*start*</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">*end*</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">interpreted</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">slice</span> <span class="TextSegSigDiff">notation</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">used</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">limit</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">search</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">particular</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">subsequence</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">list.</span>&nbsp; <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">returned</span> <span class="TextSegSigDiff">index</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">computed</span> <span class="TextSegSigDiff">relative</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">beginning</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">full</span> <span class="TextSegSigDiff">sequence</span> <span class="TextSegSigDiff">rather</span> <span class="TextSegSigDiff">than</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">*start*</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">argument.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">list.count(x)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">list.count(x)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Return the number of times *x* appears in the list.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Return the number of times *x* appears in the list.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">list.sort(key=None, reverse=False)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">list.sort(<span class="TextSegSigDiff">cmp=None,</span> key=None, reverse=False)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Sort the items of the list in place (the arguments can be used for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Sort the items of the list in place (the arguments can be used for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; sort customization, see &quot;sorted()&quot; for their explanation).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; sort customization, see &quot;sorted()&quot; for their explanation).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">list.reverse()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">list.reverse()</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; Reverse the elements of the list in place.</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; Reverse the elements of the list<span class="TextSegSigDiff">,</span> in place.</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegSigDiff">list.copy()</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Return</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">shallow</span> <span class="TextSegSigDiff">copy</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">list.</span>&nbsp; <span class="TextSegSigDiff">Equivalent</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">&quot;a[:]&quot;.</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">An example that uses most of the list methods:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">An example that uses most of the list methods:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">fruits</span> = [<span class="TextSegSigDiff">'orange'</span>, <span class="TextSegSigDiff">'apple'</span>, <span class="TextSegSigDiff">'pear'</span>, <span class="TextSegSigDiff">'banana'</span>, <span class="TextSegSigDiff">'kiwi',</span> <span class="TextSegSigDiff">'apple',</span> <span class="TextSegSigDiff">'banana'</span>]</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">a</span> = [<span class="TextSegSigDiff">66.25</span>, <span class="TextSegSigDiff">333</span>, <span class="TextSegSigDiff">333</span>, <span class="TextSegSigDiff">1</span>, <span class="TextSegSigDiff">1234.5</span>]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">fr</span><span class="TextSegSigDiff">ui</span><span class="TextSegSigDiff">ts</span>.count('<span class="TextSegSigDiff">apple</span>')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">print</span> <span class="TextSegSigDiff">a.count(333),</span> <span class="TextSegSigDiff">a.count(66.25),</span> <span class="TextSegSigDiff">a</span>.count('<span class="TextSegSigDiff">x</span>')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; 2</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; 2 <span class="TextSegSigDiff">1</span> <span class="TextSegSigDiff">0</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">fruits.coun</span>t(<span class="TextSegSigDiff">'tangerine'</span>)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">a.</span><span class="TextSegSigDiff">inser</span>t(<span class="TextSegSigDiff">2,</span> <span class="TextSegSigDiff">-1</span>)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">a.append(333)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">0</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">[66.25,</span> <span class="TextSegSigDiff">333,</span> <span class="TextSegSigDiff">-1,</span> <span class="TextSegSigDiff">333,</span> <span class="TextSegSigDiff">1,</span> <span class="TextSegSigDiff">1234.5,</span> <span class="TextSegSigDiff">333]</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">fruits</span>.index(<span class="TextSegSigDiff">'banana'</span>)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">a</span>.index(<span class="TextSegSigDiff">333</span>)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">3</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">1</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">f</span><span class="TextSegSigDiff">ruits.index('banana',</span> <span class="TextSegSigDiff">4</span>)&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">Find</span> <span class="TextSegSigDiff">next</span> <span class="TextSegSigDiff">banana</span> <span class="TextSegSigDiff">starting</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">position</span> <span class="TextSegSigDiff">4</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">a.remov</span><span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">(333</span>)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">6</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">[66.25,</span> <span class="TextSegSigDiff">-1,</span> <span class="TextSegSigDiff">333,</span> <span class="TextSegSigDiff">1,</span> <span class="TextSegSigDiff">1234.5,</span> <span class="TextSegSigDiff">333]</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">fruits</span>.reverse()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">a</span>.reverse()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">fruits</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; [<span class="TextSegSigDiff">'banana'</span>, <span class="TextSegSigDiff">'apple'</span>, <span class="TextSegSigDiff">'kiwi'</span>, <span class="TextSegSigDiff">'banana'</span>, <span class="TextSegSigDiff">'pear'</span>, <span class="TextSegSigDiff">'apple',</span> <span class="TextSegSigDiff">'orange'</span>]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; [<span class="TextSegSigDiff">333</span>, <span class="TextSegSigDiff">1234.5</span>, <span class="TextSegSigDiff">1</span>, <span class="TextSegSigDiff">333</span>, <span class="TextSegSigDiff">-1</span>, <span class="TextSegSigDiff">66.25</span>]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">fruits.append('grape')</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">fruits</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">['banana',</span> <span class="TextSegSigDiff">'apple',</span> <span class="TextSegSigDiff">'kiwi',</span> <span class="TextSegSigDiff">'banana',</span> <span class="TextSegSigDiff">'pear',</span> <span class="TextSegSigDiff">'apple',</span> <span class="TextSegSigDiff">'orange',</span> <span class="TextSegSigDiff">'grape']</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">fruits</span>.sort()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">a</span>.sort()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">fruits</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; [<span class="TextSegSigDiff">'apple'</span>, <span class="TextSegSigDiff">'apple'</span>, <span class="TextSegSigDiff">'banana'</span>, <span class="TextSegSigDiff">'banana'</span>, <span class="TextSegSigDiff">'grape'</span>, <span class="TextSegSigDiff">'kiwi',</span> <span class="TextSegSigDiff">'orange',</span> <span class="TextSegSigDiff">'pear'</span>]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; [<span class="TextSegSigDiff">-1</span>, <span class="TextSegSigDiff">1</span>, <span class="TextSegSigDiff">66.25</span>, <span class="TextSegSigDiff">333</span>, <span class="TextSegSigDiff">333</span>, <span class="TextSegSigDiff">1234.5</span>]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">fruits</span>.pop()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">a</span>.pop()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">1234.5</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">'pe</span><span class="TextSegSigDiff">ar'</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">[-1,</span> <span class="TextSegSigDiff">1,</span> <span class="TextSegSigDiff">66.25,</span> <span class="TextSegSigDiff">333,</span> <span class="TextSegSigDiff">333]</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You might have noticed that methods like &quot;insert&quot;, &quot;remove&quot; or &quot;sort&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You might have noticed that methods like &quot;insert&quot;, &quot;remove&quot; or &quot;sort&quot;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">that only modify the list have no return value printed -- they return</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that only modify the list have no return value printed -- they return</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">the default &quot;None&quot;. <span class="TextSegSigDiff">[1]</span>&nbsp; This is a design principle for all mutable</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">the default &quot;None&quot;.&nbsp; This is a design principle for all mutable <span class="TextSegSigDiff">data</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">data</span> structures in Python.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">structures in Python.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Using Lists as Stacks</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Using Lists as Stacks</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The list methods make it very easy to use a list as a stack, where the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The list methods make it very easy to use a list as a stack, where the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">last element added is the first element retrieved (&quot;last-in, first-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">last element added is the first element retrieved (&quot;last-in, first-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">out&quot;).&nbsp; To add an item to the top of the stack, use &quot;append()&quot;.&nbsp; To</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">out&quot;).&nbsp; To add an item to the top of the stack, use &quot;append()&quot;.&nbsp; To</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">retrieve an item from the top of the stack, use &quot;pop()&quot; without an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">retrieve an item from the top of the stack, use &quot;pop()&quot; without an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">explicit index.&nbsp; For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">explicit index.&nbsp; For example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; stack = [3, 4, 5]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; stack = [3, 4, 5]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; stack.append(6)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; stack.append(6)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; stack.append(7)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; stack.append(7)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; stack</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; stack</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [3, 4, 5, 6, 7]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [3, 4, 5, 6, 7]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; stack.pop()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; stack.pop()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 7</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 7</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; stack</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; stack</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [3, 4, 5, 6]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [3, 4, 5, 6]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; stack.pop()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; stack.pop()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 6</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 6</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; stack.pop()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; stack.pop()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 5</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 5</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; stack</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; stack</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [3, 4]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [3, 4]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Using Lists as Queues</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Using Lists as Queues</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It is also possible to use a list as a queue, where the first element</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It is also possible to use a list as a queue, where the first element</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">added is the first element retrieved (&quot;first-in, first-out&quot;); however,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">added is the first element retrieved (&quot;first-in, first-out&quot;); however,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">lists are not efficient for this purpose.&nbsp; While appends and pops from</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">lists are not efficient for this purpose.&nbsp; While appends and pops from</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the end of list are fast, doing inserts or pops from the beginning of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the end of list are fast, doing inserts or pops from the beginning of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a list is slow (because all of the other elements have to be shifted</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a list is slow (because all of the other elements have to be shifted</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">by one).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">by one).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To implement a queue, use &quot;collections.deque&quot; which was designed to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To implement a queue, use &quot;collections.deque&quot; which was designed to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">have fast appends and pops from both ends.&nbsp; For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">have fast appends and pops from both ends.&nbsp; For example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from collections import deque</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from collections import deque</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; queue = deque([&quot;Eric&quot;, &quot;John&quot;, &quot;Michael&quot;])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; queue = deque([&quot;Eric&quot;, &quot;John&quot;, &quot;Michael&quot;])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; queue.append(&quot;Terry&quot;)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # Terry arrives</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; queue.append(&quot;Terry&quot;)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # Terry arrives</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; queue.append(&quot;Graham&quot;)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # Graham arrives</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; queue.append(&quot;Graham&quot;)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # Graham arrives</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; queue.popleft()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # The first to arrive now leaves</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; queue.popleft()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # The first to arrive now leaves</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'Eric'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'Eric'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; queue.popleft()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # The second to arrive now leaves</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; queue.popleft()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # The second to arrive now leaves</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'John'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'John'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; queue&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # Remaining queue in order of arrival</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; queue&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # Remaining queue in order of arrival</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; deque(['Michael', 'Terry', 'Graham'])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; deque(['Michael', 'Terry', 'Graham'])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Functional</span> <span class="TextSegSigDiff">Programming</span> <span class="TextSegSigDiff">Tools</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">----------------------------</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">There</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">three</span> <span class="TextSegSigDiff">built-in</span> <span class="TextSegSigDiff">functions</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">very</span> <span class="TextSegSigDiff">useful</span> <span class="TextSegSigDiff">when</span> <span class="TextSegSigDiff">used</span> <span class="TextSegSigDiff">with</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">lists:</span> <span class="TextSegSigDiff">&quot;filter()&quot;,</span> <span class="TextSegSigDiff">&quot;map()&quot;,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">&quot;reduce()&quot;.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;filter(function,</span> <span class="TextSegSigDiff">sequence)&quot;</span> <span class="TextSegSigDiff">returns</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">sequence</span> <span class="TextSegSigDiff">consisting</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">those</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">items</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">sequence</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">&quot;function(item)&quot;</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">true.</span> <span class="TextSegSigDiff">If</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">*sequence*</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">&quot;str&quot;,</span> <span class="TextSegSigDiff">&quot;unicode&quot;</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">&quot;tuple&quot;,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">result</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">same</span> <span class="TextSegSigDiff">type;</span> <span class="TextSegSigDiff">otherwise,</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">always</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">&quot;list&quot;.</span>&nbsp; <span class="TextSegSigDiff">For</span> <span class="TextSegSigDiff">example,</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">compute</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">sequence</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">numbers</span> <span class="TextSegSigDiff">divisible</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">3</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">5:</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">def</span> <span class="TextSegSigDiff">f(x):</span> <span class="TextSegSigDiff">return</span> <span class="TextSegSigDiff">x</span> <span class="TextSegSigDiff">%</span> <span class="TextSegSigDiff">3</span> <span class="TextSegSigDiff">==</span> <span class="TextSegSigDiff">0</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">x</span> <span class="TextSegSigDiff">%</span> <span class="TextSegSigDiff">5</span> <span class="TextSegSigDiff">==</span> <span class="TextSegSigDiff">0</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">filter(f,</span> <span class="TextSegSigDiff">range(2,</span> <span class="TextSegSigDiff">25))</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">[3,</span> <span class="TextSegSigDiff">5,</span> <span class="TextSegSigDiff">6,</span> <span class="TextSegSigDiff">9,</span> <span class="TextSegSigDiff">10,</span> <span class="TextSegSigDiff">12,</span> <span class="TextSegSigDiff">15,</span> <span class="TextSegSigDiff">18,</span> <span class="TextSegSigDiff">20,</span> <span class="TextSegSigDiff">21,</span> <span class="TextSegSigDiff">24]</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;map(function,</span> <span class="TextSegSigDiff">sequence)&quot;</span> <span class="TextSegSigDiff">calls</span> <span class="TextSegSigDiff">&quot;function(item)&quot;</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">each</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">sequence's</span> <span class="TextSegSigDiff">items</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">returns</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">list</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">return</span> <span class="TextSegSigDiff">values.</span>&nbsp; <span class="TextSegSigDiff">For</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">example,</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">compute</span> <span class="TextSegSigDiff">some</span> <span class="TextSegSigDiff">cubes:</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">def</span> <span class="TextSegSigDiff">cube(x):</span> <span class="TextSegSigDiff">return</span> <span class="TextSegSigDiff">x*x*x</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">map(cube,</span> <span class="TextSegSigDiff">range(1,</span> <span class="TextSegSigDiff">11))</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">[1,</span> <span class="TextSegSigDiff">8,</span> <span class="TextSegSigDiff">27,</span> <span class="TextSegSigDiff">64,</span> <span class="TextSegSigDiff">125,</span> <span class="TextSegSigDiff">216,</span> <span class="TextSegSigDiff">343,</span> <span class="TextSegSigDiff">512,</span> <span class="TextSegSigDiff">729,</span> <span class="TextSegSigDiff">1000]</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">More</span> <span class="TextSegSigDiff">than</span> <span class="TextSegSigDiff">one</span> <span class="TextSegSigDiff">sequence</span> <span class="TextSegSigDiff">may</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">passed;</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">function</span> <span class="TextSegSigDiff">must</span> <span class="TextSegSigDiff">then</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">as</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">many</span> <span class="TextSegSigDiff">arguments</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">there</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">sequences</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">called</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">corresponding</span> <span class="TextSegSigDiff">item</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">each</span> <span class="TextSegSigDiff">sequence</span> <span class="TextSegSigDiff">(or</span> <span class="TextSegSigDiff">&quot;None&quot;</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">some</span> <span class="TextSegSigDiff">sequence</span> <span class="TextSegSigDiff">is</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">shorter</span> <span class="TextSegSigDiff">than</span> <span class="TextSegSigDiff">another).</span>&nbsp; <span class="TextSegSigDiff">For</span> <span class="TextSegSigDiff">example:</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">seq</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">range(8)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">def</span> <span class="TextSegSigDiff">add(x,</span> <span class="TextSegSigDiff">y):</span> <span class="TextSegSigDiff">return</span> <span class="TextSegSigDiff">x+y</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">map(add,</span> <span class="TextSegSigDiff">seq,</span> <span class="TextSegSigDiff">seq)</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">[0,</span> <span class="TextSegSigDiff">2,</span> <span class="TextSegSigDiff">4,</span> <span class="TextSegSigDiff">6,</span> <span class="TextSegSigDiff">8,</span> <span class="TextSegSigDiff">10,</span> <span class="TextSegSigDiff">12,</span> <span class="TextSegSigDiff">14]</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;reduce(function,</span> <span class="TextSegSigDiff">sequence)&quot;</span> <span class="TextSegSigDiff">returns</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">single</span> <span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">constructed</span> <span class="TextSegSigDiff">by</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">calling</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">binary</span> <span class="TextSegSigDiff">function</span> <span class="TextSegSigDiff">*function*</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">first</span> <span class="TextSegSigDiff">two</span> <span class="TextSegSigDiff">items</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">sequence,</span> <span class="TextSegSigDiff">then</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">result</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">next</span> <span class="TextSegSigDiff">item,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">on.</span>&nbsp; <span class="TextSegSigDiff">For</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">example,</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">compute</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">sum</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">numbers</span> <span class="TextSegSigDiff">1</span> <span class="TextSegSigDiff">through</span> <span class="TextSegSigDiff">10:</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">def</span> <span class="TextSegSigDiff">add(x,y):</span> <span class="TextSegSigDiff">return</span> <span class="TextSegSigDiff">x+y</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">reduce(add,</span> <span class="TextSegSigDiff">range(1,</span> <span class="TextSegSigDiff">11))</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">55</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">there's</span> <span class="TextSegSigDiff">only</span> <span class="TextSegSigDiff">one</span> <span class="TextSegSigDiff">item</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">sequence,</span> <span class="TextSegSigDiff">its</span> <span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">returned;</span> <span class="TextSegSigDiff">if</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">sequence</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">empty,</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">exception</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">raised.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">A</span> <span class="TextSegSigDiff">third</span> <span class="TextSegSigDiff">argument</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">passed</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">indicate</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">starting</span> <span class="TextSegSigDiff">value.</span>&nbsp; <span class="TextSegSigDiff">In</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">case</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">starting</span> <span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">returned</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">empty</span> <span class="TextSegSigDiff">sequence,</span> <span class="TextSegSigDiff">and</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">function</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">first</span> <span class="TextSegSigDiff">applied</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">starting</span> <span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">first</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">sequence</span> <span class="TextSegSigDiff">item,</span> <span class="TextSegSigDiff">then</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">result</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">next</span> <span class="TextSegSigDiff">item,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">on.</span>&nbsp; <span class="TextSegSigDiff">For</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">example,</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">def</span> <span class="TextSegSigDiff">sum(seq):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">def</span> <span class="TextSegSigDiff">add(x,y):</span> <span class="TextSegSigDiff">return</span> <span class="TextSegSigDiff">x+y</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">return</span> <span class="TextSegSigDiff">reduce(add,</span> <span class="TextSegSigDiff">seq,</span> <span class="TextSegSigDiff">0)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">sum(range(1,</span> <span class="TextSegSigDiff">11))</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">55</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">sum([])</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">0</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Don't</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">example's</span> <span class="TextSegSigDiff">definition</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">&quot;sum()&quot;:</span> <span class="TextSegSigDiff">since</span> <span class="TextSegSigDiff">summing</span> <span class="TextSegSigDiff">numbers</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">such</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">common</span> <span class="TextSegSigDiff">need,</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">built-in</span> <span class="TextSegSigDiff">function</span> <span class="TextSegSigDiff">&quot;sum(sequence)&quot;</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">already</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">provided,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">works</span> <span class="TextSegSigDiff">exactly</span> <span class="TextSegSigDiff">like</span> <span class="TextSegSigDiff">this.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">List Comprehensions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">List Comprehensions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">List comprehensions provide a concise way to create lists. Common</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">List comprehensions provide a concise way to create lists. Common</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">applications are to make new lists where each element is the result of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">applications are to make new lists where each element is the result of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">some operations applied to each member of another sequence or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">some operations applied to each member of another sequence or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">iterable, or to create a subsequence of those elements that satisfy a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">iterable, or to create a subsequence of those elements that satisfy a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">certain condition.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">certain condition.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For example, assume we want to create a list of squares, like:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For example, assume we want to create a list of squares, like:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for x in range(10):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for x in range(10):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; squares.append(x**2)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; squares.append(x**2)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Note</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">creates</span> <span class="TextSegSigDiff">(or</span> <span class="TextSegSigDiff">overwrites)</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">variable</span> <span class="TextSegSigDiff">named</span> <span class="TextSegSigDiff">&quot;x&quot;</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">still</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">exists</span> <span class="TextSegSigDiff">after</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">loop</span> <span class="TextSegSigDiff">completes.</span>&nbsp; <span class="TextSegSigDiff">We</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">calculate</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">list</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">squares</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">w<span class="TextSegSigDiff">ith</span><span class="TextSegSigDiff">ou</span>t an<span class="TextSegSigDiff">y</span> s<span class="TextSegSigDiff">id</span>e <span class="TextSegSigDiff">effects</span> <span class="TextSegSigDiff">using</span>:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">W<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">ob</span>ta<span class="TextSegSigDiff">i</span>n <span class="TextSegSigDiff">the</span> s<span class="TextSegSigDiff">am</span>e <span class="TextSegSigDiff">resul</span><span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">w</span><span class="TextSegSigDiff">ith</span>:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">squares</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">list(map(lambda</span> <span class="TextSegSigDiff">x:</span> <span class="TextSegSigDiff">x**2,</span> <span class="TextSegSigDiff">range(10)))</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegSigDiff">or,</span> <span class="TextSegSigDiff">equivalently:</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; squares = [x**2 for x in range(10)]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; squares = [x**2 for x in range(10)]</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">This</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">also</span> <span class="TextSegSigDiff">equivalent</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">&quot;squares</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">map(lambda</span> <span class="TextSegSigDiff">x:</span> <span class="TextSegSigDiff">x**2,</span> <span class="TextSegSigDiff">range(10))&quot;,</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">which</span> is more concise and readable.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">but</span> i<span class="TextSegSigDiff">t'</span>s more concise and readable.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A list comprehension consists of brackets containing an expression</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A list comprehension consists of brackets containing an expression</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">followed by a &quot;for&quot; clause, then zero or more &quot;for&quot; or &quot;if&quot; clauses.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">followed by a &quot;for&quot; clause, then zero or more &quot;for&quot; or &quot;if&quot; clauses.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The result will be a new list resulting from evaluating the expression</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The result will be a new list resulting from evaluating the expression</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in the context of the &quot;for&quot; and &quot;if&quot; clauses which follow it. For</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in the context of the &quot;for&quot; and &quot;if&quot; clauses which follow it. For</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">example, this listcomp combines the elements of two lists if they are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">example, this listcomp combines the elements of two lists if they are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">not equal:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">not equal:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and it's equivalent to:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and it's equivalent to:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; combs = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&gt;&gt;&gt; combs = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for x in [1,2,3]:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&gt;&gt;&gt; for x in [1,2,3]:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; for y in [3,1,4]:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">...&nbsp; &nbsp;&nbsp; for y in [3,1,4]:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if x != y:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if x != y:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; combs.append((x, y))</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; combs.append((x, y))</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; combs</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&gt;&gt;&gt; combs</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note how the order of the &quot;for&quot; and &quot;if&quot; statements is the same in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note how the order of the &quot;for&quot; and &quot;if&quot; statements is the same in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">both these snippets.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">both these snippets.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If the expression is a tuple (e.g. the &quot;(x, y)&quot; in the previous</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If the expression is a tuple (e.g. the &quot;(x, y)&quot; in the previous</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">example), it must be parenthesized.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">example), it must be parenthesized.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; vec = [-4, -2, 0, 2, 4]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; vec = [-4, -2, 0, 2, 4]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # create a new list with the values doubled</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # create a new list with the values doubled</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [x*2 for x in vec]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [x*2 for x in vec]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [-8, -4, 0, 4, 8]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [-8, -4, 0, 4, 8]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # filter the list to exclude negative numbers</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # filter the list to exclude negative numbers</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [x for x in vec if x &gt;= 0]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [x for x in vec if x &gt;= 0]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [0, 2, 4]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [0, 2, 4]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # apply a function to all the elements</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # apply a function to all the elements</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [abs(x) for x in vec]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [abs(x) for x in vec]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [4, 2, 0, 2, 4]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [4, 2, 0, 2, 4]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # call a method on each element</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # call a method on each element</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; freshfruit = ['&nbsp; banana', '&nbsp; loganberry ', 'passion fruit&nbsp; ']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; freshfruit = ['&nbsp; banana', '&nbsp; loganberry ', 'passion fruit&nbsp; ']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [weapon.strip() for weapon in freshfruit]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [weapon.strip() for weapon in freshfruit]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ['banana', 'loganberry', 'passion fruit']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ['banana', 'loganberry', 'passion fruit']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # create a list of 2-tuples like (number, square)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # create a list of 2-tuples like (number, square)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [(x, x**2) for x in range(6)]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [(x, x**2) for x in range(6)]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # the tuple must be parenthesized, otherwise an error is raised</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # the tuple must be parenthesized, otherwise an error is raised</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [x, x**2 for x in range(6)]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [x, x**2 for x in range(6)]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; [x, x**2 for x in range(6)]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; [x, x**2 for x in range(6)]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ^</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ^</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; SyntaxError: invalid syntax</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; SyntaxError: invalid syntax</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # flatten a list using a listcomp with two 'for'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # flatten a list using a listcomp with two 'for'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; vec = [[1,2,3], [4,5,6], [7,8,9]]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; vec = [[1,2,3], [4,5,6], [7,8,9]]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [num for elem in vec for num in elem]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [num for elem in vec for num in elem]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [1, 2, 3, 4, 5, 6, 7, 8, 9]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [1, 2, 3, 4, 5, 6, 7, 8, 9]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">List comprehensions can contain complex expressions and nested</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">List comprehensions can contain complex expressions and nested</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">functions:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">functions:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from math import pi</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from math import pi</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [str(round(pi, i)) for i in range(1, 6)]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [str(round(pi, i)) for i in range(1, 6)]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ['3.1', '3.14', '3.142', '3.1416', '3.14159']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ['3.1', '3.14', '3.142', '3.1416', '3.14159']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">Nested List Comprehensions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Nested List Comprehensions</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegSigDiff">--------------------------</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">~~~~~~~~~~~~~~~~~~~~~~~~~~</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The initial expression in a list comprehension can be any arbitrary</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The initial expression in a list comprehension can be any arbitrary</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">expression, including another list comprehension.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">expression, including another list comprehension.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Consider the following example of a 3x4 matrix implemented as a list</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Consider the following example of a 3x4 matrix implemented as a list</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of 3 lists of length 4:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of 3 lists of length 4:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; matrix = [</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; matrix = [</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; [1, 2, 3, 4],</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; [1, 2, 3, 4],</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; [5, 6, 7, 8],</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; [5, 6, 7, 8],</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; [9, 10, 11, 12],</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; [9, 10, 11, 12],</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ... ]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... ]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The following list comprehension will transpose rows and columns:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The following list comprehension will transpose rows and columns:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [[row[i] for row in matrix] for i in range(4)]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [[row[i] for row in matrix] for i in range(4)]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">As we saw in the previous section, the nested listcomp is evaluated in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">As we saw in the previous section, the nested listcomp is evaluated in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the context of the &quot;for&quot; that follows it, so this example is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the context of the &quot;for&quot; that follows it, so this example is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">equivalent to:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">equivalent to:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; transposed = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; transposed = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for i in range(4):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for i in range(4):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; transposed.append([row[i] for row in matrix])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; transposed.append([row[i] for row in matrix])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; transposed</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; transposed</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">which, in turn, is the same as:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">which, in turn, is the same as:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; transposed = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; transposed = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for i in range(4):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for i in range(4):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; # the following 3 lines implement the nested listcomp</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; # the following 3 lines implement the nested listcomp</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; transposed_row = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; transposed_row = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; for row in matrix:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; for row in matrix:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; transposed_row.append(row[i])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; transposed_row.append(row[i])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; transposed.append(transposed_row)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; transposed.append(transposed_row)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; transposed</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; transposed</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In the real world, you should prefer built-in functions to complex</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In the real world, you should prefer built-in functions to complex</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">flow statements. The &quot;zip()&quot; function would do a great job for this</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">flow statements. The &quot;zip()&quot; function would do a great job for this</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">use case:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">use case:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">list(</span>zip(*matrix<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; zip(*matrix)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; [(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; [(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">See Unpacking Argument Lists for details on the asterisk in this line.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">See Unpacking Argument Lists for details on the asterisk in this line.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;del&quot; statement</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;del&quot; statement</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There is a way to remove an item from a list given its index instead</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There is a way to remove an item from a list given its index instead</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of its value: the &quot;del&quot; statement.&nbsp; This differs from the &quot;pop()&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of its value: the &quot;del&quot; statement.&nbsp; This differs from the &quot;pop()&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">method which returns a value.&nbsp; The &quot;del&quot; statement can also be used to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">method which returns a value.&nbsp; The &quot;del&quot; statement can also be used to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">remove slices from a list or clear the entire list (which we did</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">remove slices from a list or clear the entire list (which we did</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">earlier by assignment of an empty list to the slice).&nbsp; For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">earlier by assignment of an empty list to the slice).&nbsp; For example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = [-1, 1, 66.25, 333, 333, 1234.5]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = [-1, 1, 66.25, 333, 333, 1234.5]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; del a[0]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; del a[0]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [1, 66.25, 333, 333, 1234.5]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [1, 66.25, 333, 333, 1234.5]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; del a[2:4]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; del a[2:4]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [1, 66.25, 1234.5]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [1, 66.25, 1234.5]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; del a[:]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; del a[:]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;del&quot; can also be used to delete entire variables:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;del&quot; can also be used to delete entire variables:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; del a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; del a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Referencing the name &quot;a&quot; hereafter is an error (at least until another</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Referencing the name &quot;a&quot; hereafter is an error (at least until another</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">value is assigned to it).&nbsp; We'll find other uses for &quot;del&quot; later.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">value is assigned to it).&nbsp; We'll find other uses for &quot;del&quot; later.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Tuples and Sequences</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Tuples and Sequences</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">====================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">====================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">We saw that lists and strings have many common properties, such as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">We saw that lists and strings have many common properties, such as</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">indexing and slicing operations.&nbsp; They are two examples of *sequence*</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">indexing and slicing operations.&nbsp; They are two examples of *sequence*</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">data types (see Sequence Types --- list, tuple, <span class="TextSegSigDiff">range).</span>&nbsp; <span class="TextSegSigDiff">Since</span> <span class="TextSegSigDiff">Python</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">data types (see Sequence Types --- <span class="TextSegSigDiff">str,</span> <span class="TextSegSigDiff">unicode,</span> list, tuple,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">bytearray,</span> <span class="TextSegSigDiff">buffer,</span> <span class="TextSegSigDiff">xrange).</span>&nbsp; <span class="TextSegSigDiff">Since</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">evolving</span> <span class="TextSegSigDiff">language,</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">evolving</span> <span class="TextSegSigDiff">language,</span> other sequence data types may be added.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">other sequence data types may be added.&nbsp; <span class="TextSegSigDiff">There</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">also</span> <span class="TextSegSigDiff">another</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">There</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">also</span> <span class="TextSegSigDiff">another</span> standard sequence data type: the *tuple*.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">standard sequence data type: the *tuple*.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A tuple consists of a number of values separated by commas, for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A tuple consists of a number of values separated by commas, for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">instance:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">instance:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t = 12345, 54321, 'hello!'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t = 12345, 54321, 'hello!'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t[0]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t[0]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 12345</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 12345</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; (12345, 54321, 'hello!')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; (12345, 54321, 'hello!')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # Tuples may be nested:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # Tuples may be nested:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ... u = t, (1, 2, 3, 4, 5)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... u = t, (1, 2, 3, 4, 5)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; u</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; u</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # Tuples are immutable:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # Tuples are immutable:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ... t[0] = 88888</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... t[0] = 88888</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; TypeError: 'tuple' object does not support item assignment</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; TypeError: 'tuple' object does not support item assignment</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # but they can contain mutable objects:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # but they can contain mutable objects:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ... v = ([1, 2, 3], [3, 2, 1])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... v = ([1, 2, 3], [3, 2, 1])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; v</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; v</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ([1, 2, 3], [3, 2, 1])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ([1, 2, 3], [3, 2, 1])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">As you see, on output tuples are always enclosed in parentheses, so</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">As you see, on output tuples are always enclosed in parentheses, so</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that nested tuples are interpreted correctly; they may be input with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that nested tuples are interpreted correctly; they may be input with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">or without surrounding parentheses, although often parentheses are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">or without surrounding parentheses, although often parentheses are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">necessary anyway (if the tuple is part of a larger expression).&nbsp; It is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">necessary anyway (if the tuple is part of a larger expression).&nbsp; It is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">not possible to assign to the individual items of a tuple, however it</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">not possible to assign to the individual items of a tuple, however it</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is possible to create tuples which contain mutable objects, such as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is possible to create tuples which contain mutable objects, such as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">lists.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">lists.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Though tuples may seem similar to lists, they are often used in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Though tuples may seem similar to lists, they are often used in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">different situations and for different purposes. Tuples are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">different situations and for different purposes. Tuples are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*immutable*, and usually contain a heterogeneous sequence of elements</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*immutable*, and usually contain a heterogeneous sequence of elements</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that are accessed via unpacking (see later in this section) or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that are accessed via unpacking (see later in this section) or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">indexing (or even by attribute in the case of &quot;namedtuples&quot;). Lists</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">indexing (or even by attribute in the case of &quot;namedtuples&quot;). Lists</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">are *mutable*, and their elements are usually homogeneous and are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">are *mutable*, and their elements are usually homogeneous and are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">accessed by iterating over the list.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">accessed by iterating over the list.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A special problem is the construction of tuples containing 0 or 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A special problem is the construction of tuples containing 0 or 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">items: the syntax has some extra quirks to accommodate these.&nbsp; Empty</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">items: the syntax has some extra quirks to accommodate these.&nbsp; Empty</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">tuples are constructed by an empty pair of parentheses; a tuple with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">tuples are constructed by an empty pair of parentheses; a tuple with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">one item is constructed by following a value with a comma (it is not</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">one item is constructed by following a value with a comma (it is not</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">sufficient to enclose a single value in parentheses). Ugly, but</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">sufficient to enclose a single value in parentheses). Ugly, but</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">effective.&nbsp; For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">effective.&nbsp; For example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; empty = ()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; empty = ()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; singleton = 'hello',&nbsp; &nbsp; # &lt;-- note trailing comma</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; singleton = 'hello',&nbsp; &nbsp; # &lt;-- note trailing comma</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; len(empty)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; len(empty)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; len(singleton)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; len(singleton)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; singleton</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; singleton</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ('hello',)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ('hello',)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The statement &quot;t = 12345, 54321, 'hello!'&quot; is an example of *tuple</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The statement &quot;t = 12345, 54321, 'hello!'&quot; is an example of *tuple</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">packing*: the values &quot;12345&quot;, &quot;54321&quot; and &quot;'hello!'&quot; are packed</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">packing*: the values &quot;12345&quot;, &quot;54321&quot; and &quot;'hello!'&quot; are packed</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">together in a tuple. The reverse operation is also possible:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">together in a tuple. The reverse operation is also possible:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x, y, z = t</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x, y, z = t</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This is called, appropriately enough, *sequence unpacking* and works</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This is called, appropriately enough, *sequence unpacking* and works</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">for any sequence on the right-hand side.&nbsp; Sequence unpacking requires</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for any sequence on the right-hand side.&nbsp; Sequence unpacking requires</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">th<span class="TextSegSigDiff">at</span> <span class="TextSegSigDiff">ther</span>e <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">many</span> variables on the left <span class="TextSegSigDiff">sid</span>e <span class="TextSegSigDiff">of</span> the e<span class="TextSegSigDiff">q</span><span class="TextSegSigDiff">ua</span><span class="TextSegSigDiff">ls</span> s<span class="TextSegSigDiff">ign</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">the <span class="TextSegSigDiff">li</span><span class="TextSegSigDiff">st</span> <span class="TextSegSigDiff">of</span> variables on the left <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">hav</span>e the <span class="TextSegSigDiff">sam</span>e <span class="TextSegSigDiff">number</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">element</span>s</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">as the<span class="TextSegSigDiff">re</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">e</span>le<span class="TextSegSigDiff">me</span>n<span class="TextSegSigDiff">ts</span> <span class="TextSegSigDiff">in</span> the sequence.&nbsp; Note that multiple assignment</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">as the len<span class="TextSegSigDiff">gth</span> <span class="TextSegSigDiff">of</span> the sequence.&nbsp; Note that multiple assignment <span class="TextSegSigDiff">is</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">is</span> really just a combination of tuple packing and sequence unpacking.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">really just a combination of tuple packing and sequence unpacking.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Sets</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Sets</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">====</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">====</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python also includes a data type for *sets*.&nbsp; A set is an unordered</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python also includes a data type for *sets*.&nbsp; A set is an unordered</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">collection with no duplicate elements.&nbsp; Basic uses include membership</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">collection with no duplicate elements.&nbsp; Basic uses include membership</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">testing and eliminating duplicate entries.&nbsp; Set objects also support</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">testing and eliminating duplicate entries.&nbsp; Set objects also support</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">mathematical operations like union, intersection, difference, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">mathematical operations like union, intersection, difference, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">symmetric difference.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">symmetric difference.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Curly braces or the &quot;set()&quot; function can be used to create sets.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Curly braces or the &quot;set()&quot; function can be used to create sets.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note: to create an empty set you have to use &quot;set()&quot;, not &quot;{}&quot;; the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note: to create an empty set you have to use &quot;set()&quot;, not &quot;{}&quot;; the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">latter creates an empty dictionary, a data structure that we discuss</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">latter creates an empty dictionary, a data structure that we discuss</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in the next section.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in the next section.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Here is a brief demonstration:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Here is a brief demonstration:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; basket = <span class="TextSegSigDiff">{</span>'apple', 'orange', 'apple', 'pear', 'orange', 'banana'<span class="TextSegSigDiff">}</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; basket = <span class="TextSegSigDiff">[</span>'apple', 'orange', 'apple', 'pear', 'orange', 'banana'<span class="TextSegSigDiff">]</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">pr</span><span class="TextSegSigDiff">in</span>t(basket)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">sho</span>w th<span class="TextSegSigDiff">a</span>t duplicates <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">been</span> <span class="TextSegSigDiff">removed</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">fruit</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">se</span>t(basket)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">create</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">set</span> w<span class="TextSegSigDiff">i</span>th<span class="TextSegSigDiff">ou</span>t duplicates</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">fruit</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">{</span>'orange', '<span class="TextSegSigDiff">banana',</span> <span class="TextSegSigDiff">'</span>pear', 'apple<span class="TextSegSigDiff">'}</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">set([</span>'orange', 'pear', 'apple<span class="TextSegSigDiff">',</span> <span class="TextSegSigDiff">'banana'])</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; 'orange' in <span class="TextSegSigDiff">baske</span>t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # fast membership testing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; 'orange' in <span class="TextSegSigDiff">frui</span>t&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # fast membership testing</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; True</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; True</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; 'crabgrass' in <span class="TextSegSigDiff">baske</span>t</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; 'crabgrass' in <span class="TextSegSigDiff">frui</span>t</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; False</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; False</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # Demonstrate set operations on unique letters from two words</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # Demonstrate set operations on unique letters from two words</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = set('abracadabra')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = set('abracadabra')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; b = set('alacazam')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; b = set('alacazam')</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # unique letters in a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # unique letters in a</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">{</span>'a', 'r', 'b', 'c', 'd'<span class="TextSegSigDiff">}</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">set([</span>'a', 'r', 'b', 'c', 'd'<span class="TextSegSigDiff">])</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a - b&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # letters in a but not in b</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a - b&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # letters in a but not in b</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">{</span>'r', 'd', 'b'<span class="TextSegSigDiff">}</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">set([</span>'r', 'd', 'b'<span class="TextSegSigDiff">])</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; a | b&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # letters in <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">o</span>r <span class="TextSegSigDiff">b</span> or b<span class="TextSegSigDiff">oth</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; a | b&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # letters in <span class="TextSegSigDiff">eithe</span>r <span class="TextSegSigDiff">a</span> or b</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">{</span>'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'<span class="TextSegSigDiff">}</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">set([</span>'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'<span class="TextSegSigDiff">])</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a &amp; b&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # letters in both a and b</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a &amp; b&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # letters in both a and b</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">{</span>'a', 'c'<span class="TextSegSigDiff">}</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">set([</span>'a', 'c'<span class="TextSegSigDiff">])</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a ^ b&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # letters in a or b but not both</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a ^ b&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # letters in a or b but not both</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">{</span>'r', 'd', 'b', 'm', 'z', 'l'<span class="TextSegSigDiff">}</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">set([</span>'r', 'd', 'b', 'm', 'z', 'l'<span class="TextSegSigDiff">])</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Similarly to list comprehensions, set comprehensions are also</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Similarly to list comprehensions, set comprehensions are also</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">supported:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">supported:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = {x for x in 'abracadabra' if x not in 'abc'}</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = {x for x in 'abracadabra' if x not in 'abc'}</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">{</span>'r', 'd'<span class="TextSegSigDiff">}</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">set([</span>'r', 'd'<span class="TextSegSigDiff">])</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Dictionaries</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Dictionaries</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">============</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">============</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Another useful data type built into Python is the *dictionary* (see</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Another useful data type built into Python is the *dictionary* (see</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Mapping Types --- dict). Dictionaries are sometimes found in other</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Mapping Types --- dict). Dictionaries are sometimes found in other</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">languages as &quot;associative memories&quot; or &quot;associative arrays&quot;.&nbsp; Unlike</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">languages as &quot;associative memories&quot; or &quot;associative arrays&quot;.&nbsp; Unlike</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">sequences, which are indexed by a range of numbers, dictionaries are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">sequences, which are indexed by a range of numbers, dictionaries are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">indexed by *keys*, which can be any immutable type; strings and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">indexed by *keys*, which can be any immutable type; strings and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">numbers can always be keys.&nbsp; Tuples can be used as keys if they</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">numbers can always be keys.&nbsp; Tuples can be used as keys if they</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">contain only strings, numbers, or tuples; if a tuple contains any</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">contain only strings, numbers, or tuples; if a tuple contains any</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">mutable object either directly or indirectly, it cannot be used as a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">mutable object either directly or indirectly, it cannot be used as a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">key. You can't use lists as keys, since lists can be modified in place</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">key. You can't use lists as keys, since lists can be modified in place</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">using index assignments, slice assignments, or methods like &quot;append()&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">using index assignments, slice assignments, or methods like &quot;append()&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and &quot;extend()&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and &quot;extend()&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It is best to think of a dictionary as an unordered set of *key:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It is best to think of a dictionary as an unordered set of *key:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">value* pairs, with the requirement that the keys are unique (within</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">value* pairs, with the requirement that the keys are unique (within</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">one dictionary). A pair of braces creates an empty dictionary: &quot;{}&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">one dictionary). A pair of braces creates an empty dictionary: &quot;{}&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Placing a comma-separated list of key:value pairs within the braces</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Placing a comma-separated list of key:value pairs within the braces</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">adds initial key:value pairs to the dictionary; this is also the way</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">adds initial key:value pairs to the dictionary; this is also the way</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">dictionaries are written on output.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">dictionaries are written on output.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The main operations on a dictionary are storing a value with some key</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The main operations on a dictionary are storing a value with some key</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and extracting the value given the key.&nbsp; It is also possible to delete</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and extracting the value given the key.&nbsp; It is also possible to delete</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a key:value pair with &quot;del&quot;. If you store using a key that is already</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a key:value pair with &quot;del&quot;. If you store using a key that is already</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in use, the old value associated with that key is forgotten.&nbsp; It is an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in use, the old value associated with that key is forgotten.&nbsp; It is an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">error to extract a value using a non-existent key.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">error to extract a value using a non-existent key.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegSigDiff">P</span><span class="TextSegSigDiff">erforming</span> &quot;<span class="TextSegSigDiff">list(d.</span>keys()<span class="TextSegSigDiff">)</span>&quot; <span class="TextSegSigDiff">on</span> a dictionary returns a list of all the</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span> &quot;keys()&quot; <span class="TextSegSigDiff">method</span> <span class="TextSegSigDiff">of</span> a dictionary <span class="TextSegSigDiff">object</span> returns a list of all the</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">keys used in the dictionary, in arbitrary order (if you want it</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">keys used in the dictionary, in arbitrary order (if you want it</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">sorted, just <span class="TextSegSigDiff">us</span>e &quot;sorted(<span class="TextSegSigDiff">d.keys())</span>&quot; <span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">ns</span><span class="TextSegSigDiff">tead</span>). <span class="TextSegSigDiff">[2]</span>&nbsp; To check whether a</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">sorted, just <span class="TextSegSigDiff">apply</span> <span class="TextSegSigDiff">th</span>e &quot;sorted(<span class="TextSegSigDiff">)</span>&quot; <span class="TextSegSigDiff">function</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">it</span>).&nbsp; To check whether a</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">single key is in the dictionary, use the &quot;in&quot; keyword.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">single key is in the dictionary, use the &quot;in&quot; keyword.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Here is a small example using a dictionary:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Here is a small example using a dictionary:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; tel = {'jack': 4098, 'sape': 4139}</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; tel = {'jack': 4098, 'sape': 4139}</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; tel['guido'] = 4127</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; tel['guido'] = 4127</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; tel</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; tel</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; {'sape': 4139, 'guido': 4127, 'jack': 4098}</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; {'sape': 4139, 'guido': 4127, 'jack': 4098}</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; tel['jack']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; tel['jack']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 4098</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 4098</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; del tel['sape']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; del tel['sape']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; tel['irv'] = 4127</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; tel['irv'] = 4127</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; tel</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; tel</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; {'guido': 4127, 'irv': 4127, 'jack': 4098}</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; {'guido': 4127, 'irv': 4127, 'jack': 4098}</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">list(t</span>el.keys(<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">t</span>el.keys()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">['irv',</span> <span class="TextSegSigDiff">'guido',</span> <span class="TextSegSigDiff">'jack']</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">sorted(tel.keys())</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ['guido', 'irv', 'jack']</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ['guido', 'irv', 'jack']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 'guido' in tel</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 'guido' in tel</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; True</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; True</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">'jack'</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">tel</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">False</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;dict()&quot; constructor builds dictionaries directly from sequences</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;dict()&quot; constructor builds dictionaries directly from sequences</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of key-value pairs:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of key-value pairs:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; {'sape': 4139, 'jack': 4098, 'guido': 4127}</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; {'sape': 4139, 'jack': 4098, 'guido': 4127}</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In addition, dict comprehensions can be used to create dictionaries</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In addition, dict comprehensions can be used to create dictionaries</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">from arbitrary key and value expressions:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">from arbitrary key and value expressions:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; {x: x**2 for x in (2, 4, 6)}</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; {x: x**2 for x in (2, 4, 6)}</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; {2: 4, 4: 16, 6: 36}</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; {2: 4, 4: 16, 6: 36}</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When the keys are simple strings, it is sometimes easier to specify</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When the keys are simple strings, it is sometimes easier to specify</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">pairs using keyword arguments:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">pairs using keyword arguments:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; dict(sape=4139, guido=4127, jack=4098)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; dict(sape=4139, guido=4127, jack=4098)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; {'sape': 4139, 'jack': 4098, 'guido': 4127}</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; {'sape': 4139, 'jack': 4098, 'guido': 4127}</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Looping Techniques</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Looping Techniques</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==================</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">When</span> <span class="TextSegSigDiff">looping</span> <span class="TextSegSigDiff">through</span> <span class="TextSegSigDiff">dictionaries,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">key</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">corresponding</span> <span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">can</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">retrieved</span> <span class="TextSegSigDiff">at</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">same</span> <span class="TextSegSigDiff">time</span> <span class="TextSegSigDiff">using</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;items()&quot;</span> <span class="TextSegSigDiff">method.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">knights</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">{'gallahad':</span> <span class="TextSegSigDiff">'the</span> <span class="TextSegSigDiff">pure',</span> <span class="TextSegSigDiff">'robin':</span> <span class="TextSegSigDiff">'the</span> <span class="TextSegSigDiff">brave'}</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">k,</span> <span class="TextSegSigDiff">v</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">knights.items():</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">print(k,</span> <span class="TextSegSigDiff">v)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">gallahad</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">pure</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">robin</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">brave</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When looping through a sequence, the position index and corresponding</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When looping through a sequence, the position index and corresponding</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">value can be retrieved at the same time using the &quot;enumerate()&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">value can be retrieved at the same time using the &quot;enumerate()&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for i, v in enumerate(['tic', 'tac', 'toe']):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for i, v in enumerate(['tic', 'tac', 'toe']):</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>i, v<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print i, v</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0 tic</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0 tic</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 1 tac</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 1 tac</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 2 toe</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 2 toe</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To loop over two or more sequences at the same time, the entries can</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To loop over two or more sequences at the same time, the entries can</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">be paired with the &quot;zip()&quot; function.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">be paired with the &quot;zip()&quot; function.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; questions = ['name', 'quest', 'favorite color']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; questions = ['name', 'quest', 'favorite color']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; answers = ['lancelot', 'the holy grail', 'blue']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; answers = ['lancelot', 'the holy grail', 'blue']</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for q, a in zip(questions, answers):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for q, a in zip(questions, answers):</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>'What is your {0}?&nbsp; It is {1}.'.format(q, a<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print 'What is your {0}?&nbsp; It is {1}.'.format(q, a)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; What is your name?&nbsp; It is lancelot.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; What is your name?&nbsp; It is lancelot.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; What is your quest?&nbsp; It is the holy grail.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; What is your quest?&nbsp; It is the holy grail.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; What is your favorite color?&nbsp; It is blue.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; What is your favorite color?&nbsp; It is blue.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To loop over a sequence in reverse, first specify the sequence in a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To loop over a sequence in reverse, first specify the sequence in a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">forward direction and then call the &quot;reversed()&quot; function.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">forward direction and then call the &quot;reversed()&quot; function.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; for i in reversed(range(1, 10, 2)):</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; for i in reversed(<span class="TextSegSigDiff">x</span>range(1,10,2)):</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(i)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print <span class="TextSegSigDiff">i</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 9</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 9</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 7</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 7</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 5</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 5</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 3</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 3</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To loop over a sequence in sorted order, use the &quot;sorted()&quot; function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To loop over a sequence in sorted order, use the &quot;sorted()&quot; function</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">which returns a new sorted list while leaving the source unaltered.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">which returns a new sorted list while leaving the source unaltered.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for f in sorted(set(basket)):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for f in sorted(set(basket)):</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(f)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print <span class="TextSegSigDiff">f</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; apple</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; apple</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; banana</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; banana</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; orange</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; orange</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; pear</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; pear</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">When</span> <span class="TextSegSigDiff">looping</span> <span class="TextSegSigDiff">through</span> <span class="TextSegSigDiff">dictionaries,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">key</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">corresponding</span> <span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">can</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">retrieved</span> <span class="TextSegSigDiff">at</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">same</span> <span class="TextSegSigDiff">time</span> <span class="TextSegSigDiff">using</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;iteritems()&quot;</span> <span class="TextSegSigDiff">method.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">knights</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">{'gallahad':</span> <span class="TextSegSigDiff">'the</span> <span class="TextSegSigDiff">pure',</span> <span class="TextSegSigDiff">'robin':</span> <span class="TextSegSigDiff">'the</span> <span class="TextSegSigDiff">brave'}</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">k,</span> <span class="TextSegSigDiff">v</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">knights.iteritems():</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">print</span> <span class="TextSegSigDiff">k,</span> <span class="TextSegSigDiff">v</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">gallahad</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">pure</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">robin</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">brave</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It is sometimes tempting to change a list while you are looping over</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It is sometimes tempting to change a list while you are looping over</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">it; however, it is often simpler and safer to create a new list</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">it; however, it is often simpler and safer to create a new list</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">instead.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">instead.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import math</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import math</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; filtered_data = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; filtered_data = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for value in raw_data:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for value in raw_data:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; if not math.isnan(value):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; if not math.isnan(value):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; filtered_data.append(value)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; filtered_data.append(value)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; filtered_data</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; filtered_data</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [56.2, 51.7, 55.3, 52.5, 47.8]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [56.2, 51.7, 55.3, 52.5, 47.8]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">More on Conditions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">More on Conditions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The conditions used in &quot;while&quot; and &quot;if&quot; statements can contain any</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The conditions used in &quot;while&quot; and &quot;if&quot; statements can contain any</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">operators, not just comparisons.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">operators, not just comparisons.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The comparison operators &quot;in&quot; and &quot;not in&quot; check whether a value</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The comparison operators &quot;in&quot; and &quot;not in&quot; check whether a value</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">occurs (does not occur) in a sequence.&nbsp; The operators &quot;is&quot; and &quot;is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">occurs (does not occur) in a sequence.&nbsp; The operators &quot;is&quot; and &quot;is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">not&quot; compare whether two objects are really the same object; this only</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">not&quot; compare whether two objects are really the same object; this only</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">matters for mutable objects like lists.&nbsp; All comparison operators have</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">matters for mutable objects like lists.&nbsp; All comparison operators have</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the same priority, which is lower than that of all numerical</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the same priority, which is lower than that of all numerical</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">operators.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">operators.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Comparisons can be chained.&nbsp; For example, &quot;a &lt; b == c&quot; tests whether</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Comparisons can be chained.&nbsp; For example, &quot;a &lt; b == c&quot; tests whether</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;a&quot; is less than &quot;b&quot; and moreover &quot;b&quot; equals &quot;c&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;a&quot; is less than &quot;b&quot; and moreover &quot;b&quot; equals &quot;c&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Comparisons may be combined using the Boolean operators &quot;and&quot; and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Comparisons may be combined using the Boolean operators &quot;and&quot; and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;or&quot;, and the outcome of a comparison (or of any other Boolean</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;or&quot;, and the outcome of a comparison (or of any other Boolean</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">expression) may be negated with &quot;not&quot;.&nbsp; These have lower priorities</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">expression) may be negated with &quot;not&quot;.&nbsp; These have lower priorities</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">than comparison operators; between them, &quot;not&quot; has the highest</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">than comparison operators; between them, &quot;not&quot; has the highest</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">priority and &quot;or&quot; the lowest, so that &quot;A and not B or C&quot; is equivalent</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">priority and &quot;or&quot; the lowest, so that &quot;A and not B or C&quot; is equivalent</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to &quot;(A and (not B)) or C&quot;. As always, parentheses can be used to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to &quot;(A and (not B)) or C&quot;. As always, parentheses can be used to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">express the desired composition.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">express the desired composition.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The Boolean operators &quot;and&quot; and &quot;or&quot; are so-called *short-circuit*</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The Boolean operators &quot;and&quot; and &quot;or&quot; are so-called *short-circuit*</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">operators: their arguments are evaluated from left to right, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">operators: their arguments are evaluated from left to right, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">evaluation stops as soon as the outcome is determined.&nbsp; For example,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">evaluation stops as soon as the outcome is determined.&nbsp; For example,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">if &quot;A&quot; and &quot;C&quot; are true but &quot;B&quot; is false, &quot;A and B and C&quot; does not</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">if &quot;A&quot; and &quot;C&quot; are true but &quot;B&quot; is false, &quot;A and B and C&quot; does not</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">evaluate the expression &quot;C&quot;.&nbsp; When used as a general value and not as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">evaluate the expression &quot;C&quot;.&nbsp; When used as a general value and not as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a Boolean, the return value of a short-circuit operator is the last</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a Boolean, the return value of a short-circuit operator is the last</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">evaluated argument.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">evaluated argument.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It is possible to assign the result of a comparison or other Boolean</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It is possible to assign the result of a comparison or other Boolean</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">expression to a variable.&nbsp; For example,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">expression to a variable.&nbsp; For example,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; string1, string2, string3 = '', 'Trondheim', 'Hammer Dance'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; non_null = string1 or string2 or string3</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; non_null = string1 or string2 or string3</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; non_null</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; non_null</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'Trondheim'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'Trondheim'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note that in Python, unlike C, assignment cannot occur inside</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note that in Python, unlike C, assignment cannot occur inside</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">expressions. C programmers may grumble about this, but it avoids a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">expressions. C programmers may grumble about this, but it avoids a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">common class of problems encountered in C programs: typing &quot;=&quot; in an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">common class of problems encountered in C programs: typing &quot;=&quot; in an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">expression when &quot;==&quot; was intended.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">expression when &quot;==&quot; was intended.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Comparing Sequences and Other Types</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Comparing Sequences and Other Types</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Sequence objects may be compared to other objects with the same</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Sequence objects may be compared to other objects with the same</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">sequence type. The comparison uses *lexicographical* ordering: first</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">sequence type. The comparison uses *lexicographical* ordering: first</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the first two items are compared, and if they differ this determines</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the first two items are compared, and if they differ this determines</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the outcome of the comparison; if they are equal, the next two items</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the outcome of the comparison; if they are equal, the next two items</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">are compared, and so on, until either sequence is exhausted. If two</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">are compared, and so on, until either sequence is exhausted. If two</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">items to be compared are themselves sequences of the same type, the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">items to be compared are themselves sequences of the same type, the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">lexicographical comparison is carried out recursively.&nbsp; If all items</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">lexicographical comparison is carried out recursively.&nbsp; If all items</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of two sequences compare equal, the sequences are considered equal. If</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of two sequences compare equal, the sequences are considered equal. If</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">one sequence is an initial sub-sequence of the other, the shorter</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">one sequence is an initial sub-sequence of the other, the shorter</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">sequence is the smaller (lesser) one.&nbsp; Lexicographical ordering for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">sequence is the smaller (lesser) one.&nbsp; Lexicographical ordering for</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">strings uses the <span class="TextSegSigDiff">Un</span><span class="TextSegSigDiff">icode</span> <span class="TextSegSigDiff">c</span>ode <span class="TextSegSigDiff">po</span>in<span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">number</span> <span class="TextSegSigDiff">to</span> o<span class="TextSegSigDiff">rde</span>r individual</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">strings uses the <span class="TextSegSigDiff">ASCII</span> o<span class="TextSegSigDiff">r</span>de<span class="TextSegSigDiff">r</span>in<span class="TextSegSigDiff">g</span> <span class="TextSegSigDiff">f</span>or individual <span class="TextSegSigDiff">characters.</span>&nbsp; <span class="TextSegSigDiff">Some</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">characters.</span>&nbsp; <span class="TextSegSigDiff">Some</span> <span class="TextSegSigDiff">e</span>xamples of comparisons between sequences of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">e</span>xamples of comparisons between sequences of th<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">sam</span>e <span class="TextSegSigDiff">type:</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">same</span> <span class="TextSegSigDiff">type:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; (1, 2, 3)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt; (1, 2, 4)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; (1, 2, 3)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt; (1, 2, 4)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [1, 2, 3]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt; [1, 2, 4]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [1, 2, 3]&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt; [1, 2, 4]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'ABC' &lt; 'C' &lt; 'Pascal' &lt; 'Python'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'ABC' &lt; 'C' &lt; 'Pascal' &lt; 'Python'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; (1, 2, 3, 4)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &lt; (1, 2, 4)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; (1, 2, 3, 4)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &lt; (1, 2, 4)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; (1, 2)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &lt; (1, 2, -1)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; (1, 2)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &lt; (1, 2, -1)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; (1, 2, 3)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; == (1.0, 2.0, 3.0)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; (1, 2, 3)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; == (1.0, 2.0, 3.0)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; (1, 2, ('aa', 'ab'))&nbsp;&nbsp; &lt; (1, 2, ('abc', 'a'), 4)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; (1, 2, ('aa', 'ab'))&nbsp;&nbsp; &lt; (1, 2, ('abc', 'a'), 4)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">Note that comparing objects of different types <span class="TextSegSigDiff">w</span>ith <span class="TextSegSigDiff">&quot;&lt;&quot;</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">&quot;&gt;&quot;</span> <span class="TextSegSigDiff">is</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Note that comparing objects of different types i<span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">legal.</span>&nbsp; Th<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">outcome</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">l</span><span class="TextSegSigDiff">egal</span> <span class="TextSegSigDiff">prov</span><span class="TextSegSigDiff">ided</span> t<span class="TextSegSigDiff">h</span>a<span class="TextSegSigDiff">t</span> the <span class="TextSegSigDiff">object</span>s <span class="TextSegSigDiff">hav</span>e <span class="TextSegSigDiff">appropria</span>t<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">comparison</span> me<span class="TextSegSigDiff">thods</span>.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">dete</span><span class="TextSegSigDiff">rministic</span> <span class="TextSegSigDiff">bu</span>t a<span class="TextSegSigDiff">rbitrary:</span> the <span class="TextSegSigDiff">type</span>s <span class="TextSegSigDiff">ar</span>e <span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">rdered</span> <span class="TextSegSigDiff">by</span> t<span class="TextSegSigDiff">heir</span> <span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">a</span>me.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Thus,</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">list</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">always</span> <span class="TextSegSigDiff">smaller</span> <span class="TextSegSigDiff">than</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">string,</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">string</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">always</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Fo</span>r <span class="TextSegSigDiff">exam</span>ple, mixed numeric types are compare<span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">according</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">their</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">smalle</span>r <span class="TextSegSigDiff">than</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">tu</span>ple, <span class="TextSegSigDiff">etc.</span> <span class="TextSegSigDiff">[1]</span> Mixed numeric types are compare<span class="TextSegSigDiff">d</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">numeric value, so 0 equals 0.0, etc.&nbsp; <span class="TextSegSigDiff">Otherwise,</span> <span class="TextSegSigDiff">rather</span> <span class="TextSegSigDiff">than</span> <span class="TextSegSigDiff">providing</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">accordi</span>n<span class="TextSegSigDiff">g</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">their</span> <span class="TextSegSigDiff">n</span>umeric value, so 0 equals 0.0, etc.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">arbitrary</span> <span class="TextSegSigDiff">ordering,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">interpreter</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">raise</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">&quot;TypeError&quot;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">exception.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-[ Footnotes ]-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-[ Footnotes ]-</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">[1] <span class="TextSegSigDiff">O</span>ther <span class="TextSegSigDiff">l</span><span class="TextSegSigDiff">a</span>ng<span class="TextSegSigDiff">uag</span><span class="TextSegSigDiff">e</span>s <span class="TextSegSigDiff">may</span> ret<span class="TextSegSigDiff">urn</span> t<span class="TextSegSigDiff">h</span><span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">m</span><span class="TextSegSigDiff">utate</span>d o<span class="TextSegSigDiff">bject,</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">allows</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">[1] The <span class="TextSegSigDiff">rules</span> <span class="TextSegSigDiff">fo</span>r <span class="TextSegSigDiff">compari</span>ng <span class="TextSegSigDiff">object</span>s <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">diffe</span>re<span class="TextSegSigDiff">n</span>t t<span class="TextSegSigDiff">ypes</span> <span class="TextSegSigDiff">shoul</span>d <span class="TextSegSigDiff">n</span>o<span class="TextSegSigDiff">t</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">method</span> <span class="TextSegSigDiff">chaining,</span> <span class="TextSegSigDiff">such</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">&quot;d-&gt;insert(&quot;a&quot;)-&gt;remove(&quot;b&quot;)-&gt;sort();&quot;.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">[2]</span> <span class="TextSegSigDiff">Calling</span> <span class="TextSegSigDiff">&quot;d.keys()&quot;</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">return</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">*dictionary</span> <span class="TextSegSigDiff">view*</span> <span class="TextSegSigDiff">object.</span>&nbsp; <span class="TextSegSigDiff">It</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">supports</span> <span class="TextSegSigDiff">operations</span> <span class="TextSegSigDiff">like</span> <span class="TextSegSigDiff">membership</span> <span class="TextSegSigDiff">test</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">iteration,</span> <span class="TextSegSigDiff">but</span> <span class="TextSegSigDiff">its</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">contents</span> <span class="TextSegSigDiff">a</span>re <span class="TextSegSigDiff">not</span> i<span class="TextSegSigDiff">ndependent</span> <span class="TextSegSigDiff">of</span> the <span class="TextSegSigDiff">ori</span><span class="TextSegSigDiff">g</span>ina<span class="TextSegSigDiff">l</span> <span class="TextSegSigDiff">dict</span>ion<span class="TextSegSigDiff">ary</span> <span class="TextSegSigDiff">--</span> <span class="TextSegSigDiff">i</span>t <span class="TextSegSigDiff">is</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">b</span><span class="TextSegSigDiff">e</span> re<span class="TextSegSigDiff">l</span>i<span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">upon;</span> the<span class="TextSegSigDiff">y</span> <span class="TextSegSigDiff">may</span> <span class="TextSegSigDiff">change</span> in a <span class="TextSegSigDiff">fu</span><span class="TextSegSigDiff">ture</span> <span class="TextSegSigDiff">vers</span>ion <span class="TextSegSigDiff">of</span> t<span class="TextSegSigDiff">he</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">nly</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">*view*</span>.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">langu</span><span class="TextSegSigDiff">ag</span><span class="TextSegSigDiff">e</span>.</td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\tutorial\errors.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Errors and Exceptions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Errors and Exceptions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*********************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*********************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Until now error messages haven't been more than mentioned, but if you</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Until now error messages haven't been more than mentioned, but if you</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">have tried out the examples you have probably seen some.&nbsp; There are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">have tried out the examples you have probably seen some.&nbsp; There are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(at least) two distinguishable kinds of errors: *syntax errors* and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(at least) two distinguishable kinds of errors: *syntax errors* and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*exceptions*.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*exceptions*.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Syntax Errors</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Syntax Errors</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=============</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=============</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Syntax errors, also known as parsing errors, are perhaps the most</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Syntax errors, also known as parsing errors, are perhaps the most</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">common kind of complaint you get while you are still learning Python:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">common kind of complaint you get while you are still learning Python:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; while True print<span class="TextSegSigDiff">(</span>'Hello world'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; while True print 'Hello world'</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; while True print<span class="TextSegSigDiff">(</span>'Hello world'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; while True print 'Hello world'</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ^</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; ^</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; SyntaxError: invalid syntax</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; SyntaxError: invalid syntax</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The parser repeats the offending line and displays a little 'arrow'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The parser repeats the offending line and displays a little 'arrow'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">pointing at the earliest point in the line where the error was</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">pointing at the earliest point in the line where the error was</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">detected.&nbsp; The error is caused by (or at least detected at) the token</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">detected.&nbsp; The error is caused by (or at least detected at) the token</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">*preceding* the arrow: in the example, the error is detected at the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*preceding* the arrow: in the example, the error is detected at the</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegSigDiff">function</span> &quot;print<span class="TextSegSigDiff">()</span>&quot;, since a colon (&quot;':'&quot;) is missing before it.&nbsp; File</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">keyw</span><span class="TextSegSigDiff">ord</span> &quot;print&quot;, since a colon (&quot;':'&quot;) is missing before it.&nbsp; File</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">name and line number are printed so you know where to look in case the</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">name and line number are printed so you know where to look in case the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">input came from a script.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">input came from a script.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Exceptions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Exceptions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==========</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==========</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Even if a statement or expression is syntactically correct, it may</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Even if a statement or expression is syntactically correct, it may</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">cause an error when an attempt is made to execute it. Errors detected</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">cause an error when an attempt is made to execute it. Errors detected</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">during execution are called *exceptions* and are not unconditionally</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">during execution are called *exceptions* and are not unconditionally</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">fatal: you will soon learn how to handle them in Python programs.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">fatal: you will soon learn how to handle them in Python programs.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Most exceptions are not handled by programs, however, and result in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Most exceptions are not handled by programs, however, and result in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">error messages as shown here:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">error messages as shown here:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 10 * (1/0)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 10 * (1/0)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ZeroDivisionError: division by zero</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ZeroDivisionError: <span class="TextSegSigDiff">integer</span> division <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">modulo</span> by zero</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 4 + spam*3</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 4 + spam*3</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; NameError: name 'spam' is not defined</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; NameError: name 'spam' is not defined</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; '2' + 2</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; '2' + 2</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; TypeError: Can<span class="TextSegSigDiff">'</span>t co<span class="TextSegSigDiff">nv</span>e<span class="TextSegSigDiff">rt</span> 'int' object <span class="TextSegSigDiff">to</span> s<span class="TextSegSigDiff">tr</span> <span class="TextSegSigDiff">implicitly</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; TypeError: can<span class="TextSegSigDiff">no</span>t co<span class="TextSegSigDiff">ncatenat</span>e <span class="TextSegSigDiff">'str'</span> <span class="TextSegSigDiff">and</span> 'int' objects</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The last line of the error message indicates what happened. Exceptions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The last line of the error message indicates what happened. Exceptions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">come in different types, and the type is printed as part of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">come in different types, and the type is printed as part of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">message: the types in the example are &quot;ZeroDivisionError&quot;, &quot;NameError&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">message: the types in the example are &quot;ZeroDivisionError&quot;, &quot;NameError&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and &quot;TypeError&quot;. The string printed as the exception type is the name</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and &quot;TypeError&quot;. The string printed as the exception type is the name</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of the built-in exception that occurred.&nbsp; This is true for all built-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of the built-in exception that occurred.&nbsp; This is true for all built-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in exceptions, but need not be true for user-defined exceptions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in exceptions, but need not be true for user-defined exceptions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(although it is a useful convention). Standard exception names are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(although it is a useful convention). Standard exception names are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">built-in identifiers (not reserved keywords).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">built-in identifiers (not reserved keywords).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The rest of the line provides detail based on the type of exception</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The rest of the line provides detail based on the type of exception</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and what caused it.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and what caused it.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The preceding part of the error message shows the context where the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The preceding part of the error message shows the context where the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">exception happened, in the form of a stack traceback. In general it</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">exception happened, in the form of a stack traceback. In general it</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">contains a stack traceback listing source lines; however, it will not</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">contains a stack traceback listing source lines; however, it will not</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">display lines read from standard input.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">display lines read from standard input.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Built-in Exceptions lists the built-in exceptions and their meanings.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Built-in Exceptions lists the built-in exceptions and their meanings.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Handling Exceptions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Handling Exceptions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It is possible to write programs that handle selected exceptions. Look</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It is possible to write programs that handle selected exceptions. Look</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">at the following example, which asks the user for input until a valid</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">at the following example, which asks the user for input until a valid</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">integer has been entered, but allows the user to interrupt the program</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">integer has been entered, but allows the user to interrupt the program</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(using &quot;Control-C&quot; or whatever the operating system supports); note</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(using &quot;Control-C&quot; or whatever the operating system supports); note</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that a user-generated interruption is signalled by raising the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that a user-generated interruption is signalled by raising the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;KeyboardInterrupt&quot; exception.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;KeyboardInterrupt&quot; exception.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; while True:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; while True:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; try:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; try:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; x = int(input(&quot;Please enter a number: &quot;))</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; x = int(<span class="TextSegSigDiff">raw_</span>input(&quot;Please enter a number: &quot;))</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; break</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; break</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; except ValueError:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; except ValueError:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>&quot;Oops!&nbsp; That was no valid number.&nbsp; Try again...&quot;<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; print &quot;Oops!&nbsp; That was no valid number.&nbsp; Try again...&quot;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;try&quot; statement works as follows.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;try&quot; statement works as follows.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* First, the *try clause* (the statement(s) between the &quot;try&quot; and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* First, the *try clause* (the statement(s) between the &quot;try&quot; and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; &quot;except&quot; keywords) is executed.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; &quot;except&quot; keywords) is executed.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* If no exception occurs, the *except clause* is skipped and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* If no exception occurs, the *except clause* is skipped and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; execution of the &quot;try&quot; statement is finished.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; execution of the &quot;try&quot; statement is finished.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* If an exception occurs during execution of the try clause, the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* If an exception occurs during execution of the try clause, the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; rest of the clause is skipped.&nbsp; Then if its type matches the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; rest of the clause is skipped.&nbsp; Then if its type matches the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; exception named after the &quot;except&quot; keyword, the except clause is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; exception named after the &quot;except&quot; keyword, the except clause is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; executed, and then execution continues after the &quot;try&quot; statement.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; executed, and then execution continues after the &quot;try&quot; statement.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* If an exception occurs which does not match the exception named in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* If an exception occurs which does not match the exception named in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; the except clause, it is passed on to outer &quot;try&quot; statements; if no</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; the except clause, it is passed on to outer &quot;try&quot; statements; if no</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; handler is found, it is an *unhandled exception* and execution stops</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; handler is found, it is an *unhandled exception* and execution stops</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; with a message as shown above.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; with a message as shown above.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A &quot;try&quot; statement may have more than one except clause, to specify</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A &quot;try&quot; statement may have more than one except clause, to specify</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">handlers for different exceptions.&nbsp; At most one handler will be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">handlers for different exceptions.&nbsp; At most one handler will be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">executed. Handlers only handle exceptions that occur in the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">executed. Handlers only handle exceptions that occur in the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">corresponding try clause, not in other handlers of the same &quot;try&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">corresponding try clause, not in other handlers of the same &quot;try&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">statement.&nbsp; An except clause may name multiple exceptions as a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">statement.&nbsp; An except clause may name multiple exceptions as a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">parenthesized tuple, for example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">parenthesized tuple, for example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ... except (RuntimeError, TypeError, NameError):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... except (RuntimeError, TypeError, NameError):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; pass</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; pass</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">A</span> <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">&quot;except&quot;</span> <span class="TextSegSigDiff">clause</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">compatible</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">exception</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">is</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">t<span class="TextSegSigDiff">h</span>e <span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">am</span>e <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">ba</span>se <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">thereof</span> <span class="TextSegSigDiff">(but</span> <span class="TextSegSigDiff">not</span> th<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">oth</span><span class="TextSegSigDiff">er</span> <span class="TextSegSigDiff">way</span> <span class="TextSegSigDiff">aro</span><span class="TextSegSigDiff">un</span>d</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">No</span>te <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">th</span>e <span class="TextSegSigDiff">p</span><span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">renthe</span>se<span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">u</span><span class="TextSegSigDiff">nd</span> th<span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">tuple</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">require</span>d<span class="TextSegSigDiff">,</span> <span class="TextSegSigDiff">because</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">---</span> <span class="TextSegSigDiff">an</span> except <span class="TextSegSigDiff">c</span><span class="TextSegSigDiff">l</span><span class="TextSegSigDiff">au</span>se <span class="TextSegSigDiff">li</span>st<span class="TextSegSigDiff">ing</span> a d<span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">rived</span> <span class="TextSegSigDiff">class</span> is no<span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">compatible</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">a</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;</span>except <span class="TextSegSigDiff">ValueError,</span> <span class="TextSegSigDiff">e:&quot;</span> <span class="TextSegSigDiff">wa</span>s <span class="TextSegSigDiff">th</span>e s<span class="TextSegSigDiff">yn</span>ta<span class="TextSegSigDiff">x</span> <span class="TextSegSigDiff">use</span>d <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">what</span> is no<span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">m</span><span class="TextSegSigDiff">al</span><span class="TextSegSigDiff">ly</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">base</span> <span class="TextSegSigDiff">class).</span>&nbsp; <span class="TextSegSigDiff">For</span> <span class="TextSegSigDiff">example,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">following</span> <span class="TextSegSigDiff">code</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">print</span> <span class="TextSegSigDiff">B,</span> <span class="TextSegSigDiff">C,</span> <span class="TextSegSigDiff">D</span> <span class="TextSegSigDiff">in</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">order:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">written</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">&quot;except</span> <span class="TextSegSigDiff">ValueError</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">e:&quot;</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">modern</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">(described</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">B(Exception):</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">pass</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">below).</span> <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">old</span> <span class="TextSegSigDiff">syntax</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">still</span> <span class="TextSegSigDiff">supported</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">backwards</span> <span class="TextSegSigDiff">compatibility.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">C(B):</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">pass</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">This</span> <span class="TextSegSigDiff">means</span> <span class="TextSegSigDiff">&quot;except</span> <span class="TextSegSigDiff">RuntimeError,</span> <span class="TextSegSigDiff">TypeError&quot;</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">equivalent</span> <span class="TextSegSigDiff">to</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">D(C):</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">pass</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;except</span> <span class="TextSegSigDiff">(RuntimeError,</span> <span class="TextSegSigDiff">TypeError):&quot;</span> <span class="TextSegSigDiff">but</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">&quot;except</span> <span class="TextSegSigDiff">RuntimeError</span> <span class="TextSegSigDiff">as</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">cls</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">[B,</span> <span class="TextSegSigDiff">C,</span> <span class="TextSegSigDiff">D]:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">try:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">raise</span> <span class="TextSegSigDiff">cls()</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">except</span> <span class="TextSegSigDiff">D:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">print(&quot;D&quot;)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">except</span> <span class="TextSegSigDiff">C:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">print(&quot;C&quot;)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">except</span> <span class="TextSegSigDiff">B:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">print(&quot;B&quot;)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">TypeError:&quot;</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">what</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">want.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Note</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">except</span> <span class="TextSegSigDiff">clauses</span> <span class="TextSegSigDiff">were</span> <span class="TextSegSigDiff">reversed</span> <span class="TextSegSigDiff">(with</span> <span class="TextSegSigDiff">&quot;except</span> <span class="TextSegSigDiff">B&quot;</span> <span class="TextSegSigDiff">first),</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">would</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">printed</span> <span class="TextSegSigDiff">B,</span> <span class="TextSegSigDiff">B,</span> <span class="TextSegSigDiff">B</span> <span class="TextSegSigDiff">---</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">first</span> <span class="TextSegSigDiff">matching</span> <span class="TextSegSigDiff">except</span> <span class="TextSegSigDiff">clause</span> <span class="TextSegSigDiff">is</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">triggered.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The last except clause may omit the exception name(s), to serve as a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The last except clause may omit the exception name(s), to serve as a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">wildcard. Use this with extreme caution, since it is easy to mask a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">wildcard. Use this with extreme caution, since it is easy to mask a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">real programming error in this way!&nbsp; It can also be used to print an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">real programming error in this way!&nbsp; It can also be used to print an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">error message and then re-raise the exception (allowing a caller to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">error message and then re-raise the exception (allowing a caller to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">handle the exception as well):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">handle the exception as well):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; import sys</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import sys</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; try:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; try:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; f = open('myfile.txt')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; f = open('myfile.txt')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; s = f.readline()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; s = f.readline()</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; i = int(s.strip())</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; i = int(s.strip())</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; except O<span class="TextSegSigDiff">S</span>Error as e<span class="TextSegSigDiff">rr</span>:</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; except <span class="TextSegSigDiff">I</span>OError as e:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>&quot;O<span class="TextSegSigDiff">S</span> error: {<span class="TextSegSigDiff">0</span>}&quot;.format(err<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print &quot;<span class="TextSegSigDiff">I/</span>O error<span class="TextSegSigDiff">({0})</span>: {<span class="TextSegSigDiff">1</span>}&quot;.format(e<span class="TextSegSigDiff">.e</span>rr<span class="TextSegSigDiff">no,</span> <span class="TextSegSigDiff">e.strerror</span>)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; except ValueError:</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; except ValueError:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>&quot;Could not convert data to an integer.&quot;<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print &quot;Could not convert data to an integer.&quot;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; except:</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; except:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>&quot;Unexpected error:&quot;, sys.exc_info()[0]<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print &quot;Unexpected error:&quot;, sys.exc_info()[0]</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; raise</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; raise</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;try&quot; ... &quot;except&quot; statement has an optional *else clause*, which,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;try&quot; ... &quot;except&quot; statement has an optional *else clause*, which,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">when present, must follow all except clauses.&nbsp; It is useful for code</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">when present, must follow all except clauses.&nbsp; It is useful for code</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that must be executed if the try clause does not raise an exception.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that must be executed if the try clause does not raise an exception.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; for arg in sys.argv[1:]:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; for arg in sys.argv[1:]:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; try:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; try:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f = open(arg, 'r')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f = open(arg, 'r')</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; except O<span class="TextSegSigDiff">S</span>Error:</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; except <span class="TextSegSigDiff">I</span>OError:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>'cannot open', arg<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print 'cannot open', arg</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; else:</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; else:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>arg, 'has', len(f.readlines()), 'lines'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print arg, 'has', len(f.readlines()), 'lines'</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f.close()</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f.close()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The use of the &quot;else&quot; clause is better than adding additional code to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The use of the &quot;else&quot; clause is better than adding additional code to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the &quot;try&quot; clause because it avoids accidentally catching an exception</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the &quot;try&quot; clause because it avoids accidentally catching an exception</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that wasn't raised by the code being protected by the &quot;try&quot; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that wasn't raised by the code being protected by the &quot;try&quot; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;except&quot; statement.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;except&quot; statement.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When an exception occurs, it may have an associated value, also known</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When an exception occurs, it may have an associated value, also known</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">as the exception's *argument*. The presence and type of the argument</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">as the exception's *argument*. The presence and type of the argument</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">depend on the exception type.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">depend on the exception type.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">The except clause may specify a variable after the exception name<span class="TextSegSigDiff">.</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">The except clause may specify a variable after the exception name <span class="TextSegSigDiff">(or</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">The variable is bound to an exception instance with th<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">arguments</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">t<span class="TextSegSigDiff">uple).</span> <span class="TextSegSigDiff">T</span>he variable is bound to an exception instance with th<span class="TextSegSigDiff">e</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">stored in &quot;instance.args&quot;.&nbsp; For convenience, the exception <span class="TextSegSigDiff">instance</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">arguments</span> stored in &quot;instance.args&quot;.&nbsp; For convenience, the exception</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">defines &quot;__str__()&quot; so the arguments can be printed directly <span class="TextSegSigDiff">without</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">instance</span> defines &quot;__str__()&quot; so the arguments can be printed directly</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">without</span> <span class="TextSegSigDiff">having</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">reference</span> <span class="TextSegSigDiff">&quot;.args&quot;.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">having</span> <span class="TextSegSigDiff">t</span>o <span class="TextSegSigDiff">referenc</span>e <span class="TextSegSigDiff">&quot;.args&quot;.</span>&nbsp; <span class="TextSegSigDiff">One</span> may also instantiate an except<span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">o</span>n</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">O<span class="TextSegSigDiff">n</span>e may also instantiate an except<span class="TextSegSigDiff">ion</span> <span class="TextSegSigDiff">first</span> <span class="TextSegSigDiff">before</span> <span class="TextSegSigDiff">raisi</span>n<span class="TextSegSigDiff">g</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">add</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">first</span> <span class="TextSegSigDiff">before</span> <span class="TextSegSigDiff">raising</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">add</span> any attributes to it as desired.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">any attributes to it as desired.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; try:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; try:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; raise Exception('spam', 'eggs')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; raise Exception('spam', 'eggs')</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ... except Exception as inst:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... except Exception as inst:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>type(inst)<span class="TextSegSigDiff">)</span>&nbsp; &nbsp; # the exception instance</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print type(inst)&nbsp; &nbsp;&nbsp; # the exception instance</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>inst.args<span class="TextSegSigDiff">)</span>&nbsp; &nbsp;&nbsp; # arguments stored in .args</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print inst.args&nbsp; &nbsp; &nbsp; # arguments stored in .args</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>inst<span class="TextSegSigDiff">)</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # __str__ allows args to be printed directly<span class="TextSegSigDiff">,</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print inst&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # __str__ allows args to be printed directly</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">but</span> <span class="TextSegSigDiff">may</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">overridden</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">exception</span> <span class="TextSegSigDiff">subclasses</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; x, y = inst.args&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">unpack</span> <span class="TextSegSigDiff">args</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; x, y = inst.args</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>'x =', x<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print 'x =', x</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>'y =', y<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print 'y =', y</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &lt;<span class="TextSegSigDiff">cla</span><span class="TextSegSigDiff">ss</span> <span class="TextSegSigDiff">'</span>Exception'&gt;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &lt;<span class="TextSegSigDiff">type</span> <span class="TextSegSigDiff">'exceptions.</span>Exception'&gt;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ('spam', 'eggs')</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ('spam', 'eggs')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ('spam', 'eggs')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ('spam', 'eggs')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; x = spam</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; x = spam</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; y = eggs</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; y = eggs</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">If an exception has argument<span class="TextSegSigDiff">s</span>, t<span class="TextSegSigDiff">hey</span> <span class="TextSegSigDiff">are</span> printed as the last part</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">If an exception has a<span class="TextSegSigDiff">n</span> <span class="TextSegSigDiff">a</span>rgument, <span class="TextSegSigDiff">i</span>t <span class="TextSegSigDiff">is</span> printed as the last part</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">('detail') of the message for unhandled exceptions.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">('detail') of the message for unhandled exceptions.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Exception handlers don't just handle exceptions if they occur</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Exception handlers don't just handle exceptions if they occur</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">immediately in the try clause, but also if they occur inside functions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">immediately in the try clause, but also if they occur inside functions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that are called (even indirectly) in the try clause. For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that are called (even indirectly) in the try clause. For example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; def this_fails():</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; def this_fails():</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; x = 1/0</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; x = 1/0</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; try:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; try:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; this_fails()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; this_fails()</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; ... except ZeroDivisionError as <span class="TextSegSigDiff">err</span>:</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ... except ZeroDivisionError as <span class="TextSegSigDiff">detail</span>:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>'Handling run-time error:', <span class="TextSegSigDiff">err)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print 'Handling run-time error:', <span class="TextSegSigDiff">detail</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; Handling run-time error: division by zero</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; Handling run-time error: <span class="TextSegSigDiff">integer</span> division <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">modulo</span> by zero</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Raising Exceptions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Raising Exceptions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;raise&quot; statement allows the programmer to force a specified</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;raise&quot; statement allows the programmer to force a specified</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">exception to occur. For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">exception to occur. For example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; raise NameError('HiThere')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; raise NameError('HiThere')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; NameError: HiThere</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; NameError: HiThere</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The sole argument to &quot;raise&quot; indicates the exception to be raised.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The sole argument to &quot;raise&quot; indicates the exception to be raised.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">This must be either an exception instance or an exception class (a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This must be either an exception instance or an exception class (a</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">class that derives from &quot;Exception&quot;).&nbsp; <span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">exception</span> <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">is</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">class that derives from &quot;Exception&quot;).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">passed,</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">implicitly</span> <span class="TextSegSigDiff">instantiated</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">calling</span> <span class="TextSegSigDiff">its</span> <span class="TextSegSigDiff">constructor</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">no</span> <span class="TextSegSigDiff">arguments:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">raise</span> <span class="TextSegSigDiff">ValueError</span>&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">shorthand</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">'raise</span> <span class="TextSegSigDiff">ValueError()'</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you need to determine whether an exception was raised but don't</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you need to determine whether an exception was raised but don't</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">intend to handle it, a simpler form of the &quot;raise&quot; statement allows</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">intend to handle it, a simpler form of the &quot;raise&quot; statement allows</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you to re-raise the exception:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you to re-raise the exception:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; try:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; try:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; raise NameError('HiThere')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; raise NameError('HiThere')</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ... except NameError:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... except NameError:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>'An exception flew by!'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print 'An exception flew by!'</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; raise</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; raise</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; An exception flew by!</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; An exception flew by!</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; NameError: HiThere</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; NameError: HiThere</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">User-defined Exceptions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">User-defined Exceptions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=======================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=======================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Programs may name their own exceptions by creating a new exception</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Programs may name their own exceptions by creating a new exception</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">class (see Classes for more about Python classes).&nbsp; Exceptions should</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">class (see Classes for more about Python classes).&nbsp; Exceptions should</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">typically be derived from the &quot;Exception&quot; class, either directly or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">typically be derived from the &quot;Exception&quot; class, either directly or</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">indirectly.</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">indirectly.&nbsp; <span class="TextSegSigDiff">For</span> <span class="TextSegSigDiff">example:</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">class</span> <span class="TextSegSigDiff">MyError(Exception):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">def</span> <span class="TextSegSigDiff">__init__(self,</span> <span class="TextSegSigDiff">value):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">self.value</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">value</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">def</span> <span class="TextSegSigDiff">__str__(self):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">return</span> <span class="TextSegSigDiff">repr(self.value)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">try:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">raise</span> <span class="TextSegSigDiff">MyError(2*2)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span> <span class="TextSegSigDiff">except</span> <span class="TextSegSigDiff">MyError</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">e:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">print</span> <span class="TextSegSigDiff">'My</span> <span class="TextSegSigDiff">exception</span> <span class="TextSegSigDiff">occurred,</span> <span class="TextSegSigDiff">value:',</span> <span class="TextSegSigDiff">e.value</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">My</span> <span class="TextSegSigDiff">exception</span> <span class="TextSegSigDiff">occurred,</span> <span class="TextSegSigDiff">value:</span> <span class="TextSegSigDiff">4</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">raise</span> <span class="TextSegSigDiff">MyError('oops!')</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Traceback</span> <span class="TextSegSigDiff">(most</span> <span class="TextSegSigDiff">recent</span> <span class="TextSegSigDiff">call</span> <span class="TextSegSigDiff">last):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">File</span> <span class="TextSegSigDiff">&quot;&lt;stdin&gt;&quot;,</span> <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">1,</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">&lt;module&gt;</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">__main__.MyError:</span> <span class="TextSegSigDiff">'oops!'</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">In</span> <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">example,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">default</span> <span class="TextSegSigDiff">&quot;__init__()&quot;</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">&quot;Exception&quot;</span> <span class="TextSegSigDiff">has</span> <span class="TextSegSigDiff">been</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">overridden.</span>&nbsp; <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">new</span> <span class="TextSegSigDiff">behavior</span> <span class="TextSegSigDiff">simply</span> <span class="TextSegSigDiff">creates</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">*value*</span> <span class="TextSegSigDiff">attribute.</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">This</span> <span class="TextSegSigDiff">replaces</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">default</span> <span class="TextSegSigDiff">behavior</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">creating</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">*args*</span> <span class="TextSegSigDiff">attribute.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Exception classes can be defined which do anything any other class can</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Exception classes can be defined which do anything any other class can</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">do, but are usually kept simple, often only offering a number of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">do, but are usually kept simple, often only offering a number of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">attributes that allow information about the error to be extracted by</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">attributes that allow information about the error to be extracted by</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">handlers for the exception.&nbsp; When creating a module that can raise</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">handlers for the exception.&nbsp; When creating a module that can raise</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">several distinct errors, a common practice is to create a base class</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">several distinct errors, a common practice is to create a base class</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for exceptions defined by that module, and subclass that to create</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for exceptions defined by that module, and subclass that to create</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">specific exception classes for different error conditions:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">specific exception classes for different error conditions:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class Error(Exception):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class Error(Exception):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;Base class for exceptions in this module.&quot;&quot;&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;Base class for exceptions in this module.&quot;&quot;&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; pass</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; pass</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class InputError(Error):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class InputError(Error):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;Exception raised for errors in the input.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;Exception raised for errors in the input.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; Attributes:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; Attributes:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; expr<span class="TextSegSigDiff">ession</span> -- input expression in which the error occurred</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; expr -- input expression in which the error occurred</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m<span class="TextSegSigDiff">essage</span> -- explanation of the error</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m<span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">g</span>&nbsp; -- explanation of the error</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, expr<span class="TextSegSigDiff">ession</span>, m<span class="TextSegSigDiff">essage</span>):</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, expr, m<span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">g</span>):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.expr<span class="TextSegSigDiff">ession</span> = expr<span class="TextSegSigDiff">ession</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.expr = expr</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.m<span class="TextSegSigDiff">essage</span> = m<span class="TextSegSigDiff">essage</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.m<span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">g</span> = m<span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">g</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class TransitionError(Error):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class TransitionError(Error):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;Raised when an operation attempts a state transition that's not</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;Raised when an operation attempts a state transition that's not</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; allowed.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; allowed.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; Attributes:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; Attributes:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prev<span class="TextSegSigDiff">ious</span> -- state at beginning of transition</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prev -- state at beginning of transition</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; next -- attempted new state</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; next -- attempted new state</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m<span class="TextSegSigDiff">essage</span> -- explanation of why the specific transition is not allowed</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m<span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">g</span>&nbsp; -- explanation of why the specific transition is not allowed</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, prev<span class="TextSegSigDiff">ious</span>, next, m<span class="TextSegSigDiff">essage</span>):</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, prev, next, m<span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">g</span>):</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.prev<span class="TextSegSigDiff">ious</span> = prev<span class="TextSegSigDiff">ious</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.prev = prev</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.next = next</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.next = next</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.m<span class="TextSegSigDiff">essage</span> = m<span class="TextSegSigDiff">essage</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.m<span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">g</span> = m<span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">g</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Most exceptions are defined with names that end in &quot;Error,&quot; similar to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Most exceptions are defined with names that end in &quot;Error,&quot; similar to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the naming of the standard exceptions.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the naming of the standard exceptions.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Many standard modules define their own exceptions to report errors</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Many standard modules define their own exceptions to report errors</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that may occur in functions they define.&nbsp; More information on classes</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that may occur in functions they define.&nbsp; More information on classes</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is presented in chapter Classes.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is presented in chapter Classes.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Defining Clean-up Actions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Defining Clean-up Actions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=========================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=========================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;try&quot; statement has another optional clause which is intended to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;try&quot; statement has another optional clause which is intended to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">define clean-up actions that must be executed under all circumstances.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">define clean-up actions that must be executed under all circumstances.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; try:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; try:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; raise KeyboardInterrupt</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; raise KeyboardInterrupt</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ... finally:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... finally:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>'Goodbye, world!'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print 'Goodbye, world!'</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Goodbye, world!</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Goodbye, world!</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; KeyboardInterrupt</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; KeyboardInterrupt</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A *finally clause* is always executed before leaving the &quot;try&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A *finally clause* is always executed before leaving the &quot;try&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">statement, whether an exception has occurred or not. When an exception</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">statement, whether an exception has occurred or not. When an exception</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">has occurred in the &quot;try&quot; clause and has not been handled by an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">has occurred in the &quot;try&quot; clause and has not been handled by an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;except&quot; clause (or it has occurred in an &quot;except&quot; or &quot;else&quot; clause),</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;except&quot; clause (or it has occurred in an &quot;except&quot; or &quot;else&quot; clause),</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">it is re-raised after the &quot;finally&quot; clause has been executed.&nbsp; The</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">it is re-raised after the &quot;finally&quot; clause has been executed.&nbsp; The</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;finally&quot; clause is also executed &quot;on the way out&quot; when any other</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;finally&quot; clause is also executed &quot;on the way out&quot; when any other</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">clause of the &quot;try&quot; statement is left via a &quot;break&quot;, &quot;continue&quot; or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">clause of the &quot;try&quot; statement is left via a &quot;break&quot;, &quot;continue&quot; or</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&quot;return&quot; statement.&nbsp; A more complicated example<span class="TextSegSigDiff">:</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&quot;return&quot; statement.&nbsp; A more complicated example <span class="TextSegSigDiff">(having</span> <span class="TextSegSigDiff">&quot;except&quot;</span> <span class="TextSegSigDiff">and</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;finally&quot;</span> <span class="TextSegSigDiff">clauses</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">same</span> <span class="TextSegSigDiff">&quot;try&quot;</span> <span class="TextSegSigDiff">statement</span> <span class="TextSegSigDiff">works</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">2.5):</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; def divide(x, y):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; def divide(x, y):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; try:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; try:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; result = x / y</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; result = x / y</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; except ZeroDivisionError:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; except ZeroDivisionError:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>&quot;division by zero!&quot;<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; print &quot;division by zero!&quot;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; else:</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; else:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>&quot;result is&quot;, result<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; print &quot;result is&quot;, result</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; finally:</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; finally:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>&quot;executing finally clause&quot;<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; print &quot;executing finally clause&quot;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; divide(2, 1)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; divide(2, 1)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; result is 2<span class="TextSegSigDiff">.0</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; result is 2</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; executing finally clause</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; executing finally clause</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; divide(2, 0)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; divide(2, 0)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; division by zero!</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; division by zero!</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; executing finally clause</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; executing finally clause</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; divide(&quot;2&quot;, &quot;1&quot;)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; divide(&quot;2&quot;, &quot;1&quot;)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; executing finally clause</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; executing finally clause</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 3, in divide</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 3, in divide</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; TypeError: unsupported operand type(s) for /: 'str' and 'str'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; TypeError: unsupported operand type(s) for /: 'str' and 'str'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">As you can see, the &quot;finally&quot; clause is executed in any event.&nbsp; The</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">As you can see, the &quot;finally&quot; clause is executed in any event.&nbsp; The</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;TypeError&quot; raised by dividing two strings is not handled by the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;TypeError&quot; raised by dividing two strings is not handled by the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;except&quot; clause and therefore re-raised after the &quot;finally&quot; clause has</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;except&quot; clause and therefore re-raised after the &quot;finally&quot; clause has</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">been executed.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">been executed.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In real world applications, the &quot;finally&quot; clause is useful for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In real world applications, the &quot;finally&quot; clause is useful for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">releasing external resources (such as files or network connections),</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">releasing external resources (such as files or network connections),</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">regardless of whether the use of the resource was successful.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">regardless of whether the use of the resource was successful.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Predefined Clean-up Actions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Predefined Clean-up Actions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===========================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===========================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Some objects define standard clean-up actions to be undertaken when</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Some objects define standard clean-up actions to be undertaken when</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the object is no longer needed, regardless of whether or not the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the object is no longer needed, regardless of whether or not the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">operation using the object succeeded or failed. Look at the following</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">operation using the object succeeded or failed. Look at the following</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">example, which tries to open a file and print its contents to the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">example, which tries to open a file and print its contents to the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">screen.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">screen.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; for line in open(&quot;myfile.txt&quot;):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; for line in open(&quot;myfile.txt&quot;):</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>line, <span class="TextSegSigDiff">end=&quot;&quot;)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print line,</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">The problem with this code is that it leaves the file open for an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The problem with this code is that it leaves the file open for an</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">indeterminate amount of time after th<span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">part</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">th</span>e code has finished</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">indeterminate amount of time after the code has finished <span class="TextSegSigDiff">executing.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">executing.</span> This is not an issue in simple scripts, but can be a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">This is not an issue in simple scripts, but can be a <span class="TextSegSigDiff">problem</span> <span class="TextSegSigDiff">for</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">problem</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">l</span>arger applications. The &quot;with&quot; statement allows objects</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">l</span>arger applications. The &quot;with&quot; statement allows object<span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">like</span> <span class="TextSegSigDiff">file</span>s <span class="TextSegSigDiff">to</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">like</span> <span class="TextSegSigDiff">files</span> <span class="TextSegSigDiff">to</span> be used in a way that ensures they are always cleaned up</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">be used in a way that ensures they are always cleaned up <span class="TextSegSigDiff">promptly</span> <span class="TextSegSigDiff">and</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">promptly</span> <span class="TextSegSigDiff">and</span> correctly.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">correctly.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; with open(&quot;myfile.txt&quot;) as f:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; with open(&quot;myfile.txt&quot;) as f:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; for line in f:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; for line in f:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>line, <span class="TextSegSigDiff">end=&quot;&quot;)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print line,</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">After the statement is executed, the file *f* is always closed, even</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">After the statement is executed, the file *f* is always closed, even</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">if a problem was encountered while processing the lines. Objects</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">if a problem was encountered while processing the lines. O<span class="TextSegSigDiff">ther</span> <span class="TextSegSigDiff">o</span>bjects</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">which<span class="TextSegSigDiff">,</span> <span class="TextSegSigDiff">like</span> <span class="TextSegSigDiff">files,</span> provide predefined clean-up actions will indicate</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">which provide predefined clean-up actions will indicate <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">their</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">their</span> documentation.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">documentation.</td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\tutorial\floatingpoint.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Floating Point Arithmetic:&nbsp; Issues and Limitations</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Floating Point Arithmetic:&nbsp; Issues and Limitations</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">**************************************************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">**************************************************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Floating-point numbers are represented in computer hardware as base 2</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Floating-point numbers are represented in computer hardware as base 2</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(binary) fractions.&nbsp; For example, the decimal fraction</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(binary) fractions.&nbsp; For example, the decimal fraction</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0.125</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0.125</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">has value 1/10 + 2/100 + 5/1000, and in the same way the binary</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">has value 1/10 + 2/100 + 5/1000, and in the same way the binary</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">fraction</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">fraction</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0.001</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0.001</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">has value 0/2 + 0/4 + 1/8.&nbsp; These two fractions have identical values,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">has value 0/2 + 0/4 + 1/8.&nbsp; These two fractions have identical values,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the only real difference being that the first is written in base 10</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the only real difference being that the first is written in base 10</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">fractional notation, and the second in base 2.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">fractional notation, and the second in base 2.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Unfortunately, most decimal fractions cannot be represented exactly as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Unfortunately, most decimal fractions cannot be represented exactly as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">binary fractions.&nbsp; A consequence is that, in general, the decimal</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">binary fractions.&nbsp; A consequence is that, in general, the decimal</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">floating-point numbers you enter are only approximated by the binary</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">floating-point numbers you enter are only approximated by the binary</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">floating-point numbers actually stored in the machine.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">floating-point numbers actually stored in the machine.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The problem is easier to understand at first in base 10.&nbsp; Consider the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The problem is easier to understand at first in base 10.&nbsp; Consider the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">fraction 1/3.&nbsp; You can approximate that as a base 10 fraction:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">fraction 1/3.&nbsp; You can approximate that as a base 10 fraction:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0.3</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0.3</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">or, better,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">or, better,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0.33</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0.33</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">or, better,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">or, better,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0.333</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0.333</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and so on.&nbsp; No matter how many digits you're willing to write down,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and so on.&nbsp; No matter how many digits you're willing to write down,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the result will never be exactly 1/3, but will be an increasingly</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the result will never be exactly 1/3, but will be an increasingly</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">better approximation of 1/3.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">better approximation of 1/3.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In the same way, no matter how many base 2 digits you're willing to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In the same way, no matter how many base 2 digits you're willing to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">use, the decimal value 0.1 cannot be represented exactly as a base 2</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">use, the decimal value 0.1 cannot be represented exactly as a base 2</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">fraction.&nbsp; In base 2, 1/10 is the infinitely repeating fraction</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">fraction.&nbsp; In base 2, 1/10 is the infinitely repeating fraction</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0.0001100110011001100110011001100110011001100110011...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0.0001100110011001100110011001100110011001100110011...</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">Stop at any finite number of bits, and you get an approximation.&nbsp; <span class="TextSegSigDiff">On</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Stop at any finite number of bits, and you get an approximation.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">most</span> <span class="TextSegSigDiff">machines</span> <span class="TextSegSigDiff">today,</span> <span class="TextSegSigDiff">floats</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">approximated</span> <span class="TextSegSigDiff">using</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">binary</span> <span class="TextSegSigDiff">fraction</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">w</span><span class="TextSegSigDiff">ith</span> <span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">h</span>e <span class="TextSegSigDiff">numerato</span>r u<span class="TextSegSigDiff">s</span>ing the <span class="TextSegSigDiff">first</span> 53 bits <span class="TextSegSigDiff">sta</span><span class="TextSegSigDiff">rt</span><span class="TextSegSigDiff">ing</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">most</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">On</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">typical</span> <span class="TextSegSigDiff">machin</span>e ru<span class="TextSegSigDiff">nn</span>ing <span class="TextSegSigDiff">Python,</span> th<span class="TextSegSigDiff">er</span>e <span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">re</span> 53 bits <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">precis</span><span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">on</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">ignificant</span> <span class="TextSegSigDiff">bit</span> a<span class="TextSegSigDiff">nd</span> <span class="TextSegSigDiff">wi</span>th <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">denomin</span>ato<span class="TextSegSigDiff">r</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">power</span> <span class="TextSegSigDiff">of</span> t<span class="TextSegSigDiff">wo.</span>&nbsp; In <span class="TextSegSigDiff">t</span>he</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">avail</span><span class="TextSegSigDiff">able</span> <span class="TextSegSigDiff">for</span> a <span class="TextSegSigDiff">Py</span>th<span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">fl</span><span class="TextSegSigDiff">o</span>at<span class="TextSegSigDiff">,</span> <span class="TextSegSigDiff">s</span>o <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">valu</span><span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">s</span>t<span class="TextSegSigDiff">ored</span> in<span class="TextSegSigDiff">ternally</span> <span class="TextSegSigDiff">w</span>he<span class="TextSegSigDiff">n</span> <span class="TextSegSigDiff">you</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">enter</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">decimal</span> <span class="TextSegSigDiff">number</span> <span class="TextSegSigDiff">&quot;0.1&quot;</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">binary</span> <span class="TextSegSigDiff">fraction</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">case</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">1/10,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">binary</span> <span class="TextSegSigDiff">fraction</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">&quot;3602879701896397</span> <span class="TextSegSigDiff">/</span> <span class="TextSegSigDiff">2</span> <span class="TextSegSigDiff">**</span> <span class="TextSegSigDiff">55&quot;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">0.00011001100110011001100110011001100110011001100110011010</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">which is close to but not exactly equal to <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">true</span> <span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">of</span> 1/10.</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">which is close to<span class="TextSegSigDiff">,</span> but not exactly equal to<span class="TextSegSigDiff">,</span> 1/10.</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">It's</span> <span class="TextSegSigDiff">easy</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">forget</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">stored</span> <span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">approximation</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">M</span><span class="TextSegSigDiff">any</span> <span class="TextSegSigDiff">users</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">aware</span> <span class="TextSegSigDiff">o</span>f <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">approxima</span>tion because of the way</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">original</span> <span class="TextSegSigDiff">d</span><span class="TextSegSigDiff">ecimal</span> f<span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">ac</span>tion<span class="TextSegSigDiff">,</span> because of the way <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">floats</span> <span class="TextSegSigDiff">are</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">v</span><span class="TextSegSigDiff">alues</span> a<span class="TextSegSigDiff">r</span>e <span class="TextSegSigDiff">dis</span><span class="TextSegSigDiff">played</span>.&nbsp; Python only prints a decimal <span class="TextSegSigDiff">approximation</span> <span class="TextSegSigDiff">to</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">display</span><span class="TextSegSigDiff">ed</span> a<span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">th</span>e <span class="TextSegSigDiff">interpreter</span> <span class="TextSegSigDiff">prompt</span>.&nbsp; Python only prints a decimal</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">the true decimal value of the binary approximation <span class="TextSegSigDiff">stored</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">approximation</span> t<span class="TextSegSigDiff">o</span> <span class="TextSegSigDiff">t</span>he true decimal value of the binary approximation</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">machine.</span>&nbsp; <span class="TextSegSigDiff">On</span> <span class="TextSegSigDiff">mos</span>t machine<span class="TextSegSigDiff">s,</span> if Python were to print the true decimal</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">stor</span><span class="TextSegSigDiff">ed</span> <span class="TextSegSigDiff">by</span> t<span class="TextSegSigDiff">he</span> machine<span class="TextSegSigDiff">.</span>&nbsp; If Python were to print the true decim<span class="TextSegSigDiff">al</span> <span class="TextSegSigDiff">v</span>al<span class="TextSegSigDiff">ue</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">value</span> of the binary approximation stored for 0.1, it would have to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">of the binary approximation stored for 0.1, it would have to <span class="TextSegSigDiff">display</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">display</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 0.1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 0.1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0.1000000000000000055511151231257827021181583404541015625</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0.1000000000000000055511151231257827021181583404541015625</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">That is more digits than most people find useful, so Python keeps the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">That is more digits than most people find useful, so Python keeps the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">number of digits manageable by displaying a rounded value instead</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">number of digits manageable by displaying a rounded value instead</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; 1 <span class="TextSegSigDiff">/</span> <span class="TextSegSigDiff">10</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">0.</span>1</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; 0.1</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; 0.1</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Just</span> <span class="TextSegSigDiff">remember,</span> <span class="TextSegSigDiff">even</span> <span class="TextSegSigDiff">though</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">printed</span> <span class="TextSegSigDiff">result</span> <span class="TextSegSigDiff">looks</span> <span class="TextSegSigDiff">like</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">exact</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">1/10,</span> t<span class="TextSegSigDiff">he</span> a<span class="TextSegSigDiff">ctual</span> <span class="TextSegSigDiff">s</span>tore<span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">v</span>al<span class="TextSegSigDiff">u</span>e is <span class="TextSegSigDiff">the</span> n<span class="TextSegSigDiff">e</span>ares<span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">repre</span>sen<span class="TextSegSigDiff">table</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">It's</span> <span class="TextSegSigDiff">impor</span>ta<span class="TextSegSigDiff">nt</span> to real<span class="TextSegSigDiff">iz</span>e <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">th</span>is <span class="TextSegSigDiff">is,</span> <span class="TextSegSigDiff">i</span>n a re<span class="TextSegSigDiff">al</span> s<span class="TextSegSigDiff">en</span>se<span class="TextSegSigDiff">,</span> <span class="TextSegSigDiff">a</span>n <span class="TextSegSigDiff">illusion:</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">binary</span> <span class="TextSegSigDiff">fraction.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">In</span>te<span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">est</span>in<span class="TextSegSigDiff">gly,</span> th<span class="TextSegSigDiff">ere</span> <span class="TextSegSigDiff">ar</span>e ma<span class="TextSegSigDiff">ny</span> <span class="TextSegSigDiff">differe</span>nt <span class="TextSegSigDiff">d</span>e<span class="TextSegSigDiff">cimal</span> <span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">umber</span>s <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">share</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">t<span class="TextSegSigDiff">h</span>e <span class="TextSegSigDiff">value</span> in the ma<span class="TextSegSigDiff">chine</span> <span class="TextSegSigDiff">is</span> n<span class="TextSegSigDiff">o</span>t e<span class="TextSegSigDiff">xact</span><span class="TextSegSigDiff">ly</span> <span class="TextSegSigDiff">1/10,</span> <span class="TextSegSigDiff">you're</span> s<span class="TextSegSigDiff">imply</span> <span class="TextSegSigDiff">rounding</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">s<span class="TextSegSigDiff">am</span>e <span class="TextSegSigDiff">near</span><span class="TextSegSigDiff">est</span> <span class="TextSegSigDiff">approxim</span><span class="TextSegSigDiff">at</span><span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">b</span><span class="TextSegSigDiff">inary</span> f<span class="TextSegSigDiff">r</span>act<span class="TextSegSigDiff">ion.</span>&nbsp; <span class="TextSegSigDiff">F</span><span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">exampl</span><span class="TextSegSigDiff">e,</span> t<span class="TextSegSigDiff">he</span> <span class="TextSegSigDiff">numbers</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">*di</span>s<span class="TextSegSigDiff">play*</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">th</span>e <span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">rue</span> <span class="TextSegSigDiff">mach</span><span class="TextSegSigDiff">ine</span> <span class="TextSegSigDiff">value.</span>&nbsp; <span class="TextSegSigDiff">This</span> fact <span class="TextSegSigDiff">becomes</span> <span class="TextSegSigDiff">apparen</span>t</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;0.1&quot;</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">&quot;0.10000000000000001&quot;</span> <span class="TextSegSigDiff">and</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;0.1000000000000000055511151231257827021181583404541015625&quot;</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">all</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">approximated</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">&quot;3602879701896397</span> <span class="TextSegSigDiff">/</span> <span class="TextSegSigDiff">2</span> <span class="TextSegSigDiff">**</span> <span class="TextSegSigDiff">55&quot;.</span>&nbsp; <span class="TextSegSigDiff">Since</span> <span class="TextSegSigDiff">all</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">these</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">decimal</span> <span class="TextSegSigDiff">val</span><span class="TextSegSigDiff">ues</span> <span class="TextSegSigDiff">share</span> t<span class="TextSegSigDiff">he</span> <span class="TextSegSigDiff">same</span> a<span class="TextSegSigDiff">pproxi</span><span class="TextSegSigDiff">ma</span>ti<span class="TextSegSigDiff">on,</span> <span class="TextSegSigDiff">any</span> <span class="TextSegSigDiff">one</span> <span class="TextSegSigDiff">of</span> the<span class="TextSegSigDiff">m</span> <span class="TextSegSigDiff">co</span><span class="TextSegSigDiff">uld</span> <span class="TextSegSigDiff">b</span>e</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">soon</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">ry</span> t<span class="TextSegSigDiff">o</span> <span class="TextSegSigDiff">do</span> a<span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">ithme</span>ti<span class="TextSegSigDiff">c</span> <span class="TextSegSigDiff">with</span> the<span class="TextSegSigDiff">se</span> <span class="TextSegSigDiff">valu</span>e<span class="TextSegSigDiff">s</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">displayed</span> <span class="TextSegSigDiff">while</span> <span class="TextSegSigDiff">still</span> <span class="TextSegSigDiff">preserving</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">invariant</span> <span class="TextSegSigDiff">&quot;eval(repr(x))</span> <span class="TextSegSigDiff">==</span> <span class="TextSegSigDiff">x&quot;.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">0.1</span> <span class="TextSegSigDiff">+</span> <span class="TextSegSigDiff">0.2</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Historically,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">prompt</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">built-in</span> <span class="TextSegSigDiff">&quot;repr()&quot;</span> <span class="TextSegSigDiff">function</span> <span class="TextSegSigDiff">would</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">0.30000000000000004</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">choose</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">one</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">17</span> <span class="TextSegSigDiff">significant</span> <span class="TextSegSigDiff">digits,</span> <span class="TextSegSigDiff">&quot;0.10000000000000001&quot;.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Starting</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">3.1,</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">(on</span> <span class="TextSegSigDiff">most</span> <span class="TextSegSigDiff">systems)</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">now</span> <span class="TextSegSigDiff">able</span> <span class="TextSegSigDiff">to</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">choose</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">shortest</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">these</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">simply</span> <span class="TextSegSigDiff">display</span> <span class="TextSegSigDiff">&quot;0.1&quot;.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note that this is in the very nature of binary floating-point: this is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note that this is in the very nature of binary floating-point: this is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">not a bug in Python, and it is not a bug in your code either.&nbsp; You'll</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">not a bug in Python, and it is not a bug in your code either.&nbsp; You'll</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">see the same kind of thing in all languages that support your</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">see the same kind of thing in all languages that support your</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">hardware's floating-point arithmetic (although some languages may not</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">hardware's floating-point arithmetic (although some languages may not</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*display* the difference by default, or in all output modes).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*display* the difference by default, or in all output modes).</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">F</span>or <span class="TextSegSigDiff">more</span> <span class="TextSegSigDiff">pl</span><span class="TextSegSigDiff">easant</span> <span class="TextSegSigDiff">output,</span> <span class="TextSegSigDiff">y</span><span class="TextSegSigDiff">ou</span> m<span class="TextSegSigDiff">ay</span> <span class="TextSegSigDiff">w</span>is<span class="TextSegSigDiff">h</span> <span class="TextSegSigDiff">t</span>o <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">string</span> for<span class="TextSegSigDiff">ma</span><span class="TextSegSigDiff">tting</span> to</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">O<span class="TextSegSigDiff">the</span>r <span class="TextSegSigDiff">sur</span><span class="TextSegSigDiff">prise</span><span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">follow</span> <span class="TextSegSigDiff">fro</span>m <span class="TextSegSigDiff">th</span>is o<span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">e.</span>&nbsp; For <span class="TextSegSigDiff">example,</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">try</span> to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">produce</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">limited</span> <span class="TextSegSigDiff">number</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">significant</span> <span class="TextSegSigDiff">digits:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">round</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">2.675</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">two</span> <span class="TextSegSigDiff">decimal</span> <span class="TextSegSigDiff">places,</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">get</span> <span class="TextSegSigDiff">this</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">format(math.pi,</span> <span class="TextSegSigDiff">'.12g')</span>&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">give</span> <span class="TextSegSigDiff">12</span> <span class="TextSegSigDiff">significant</span> <span class="TextSegSigDiff">digits</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">'3.14159265359'</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">round(2.675,</span> <span class="TextSegSigDiff">2)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">format(math.pi,</span> <span class="TextSegSigDiff">'.2f')</span>&nbsp;&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">give</span> <span class="TextSegSigDiff">2</span> <span class="TextSegSigDiff">digits</span> <span class="TextSegSigDiff">after</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">point</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">'3.14'</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">2.67</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">repr(math.pi)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">'3.141592653589793'</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">documentation</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">built-in</span> <span class="TextSegSigDiff">&quot;round()&quot;</span> <span class="TextSegSigDiff">function</span> <span class="TextSegSigDiff">says</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">it</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">It'</span>s <span class="TextSegSigDiff">important</span> t<span class="TextSegSigDiff">o</span> real<span class="TextSegSigDiff">ize</span> <span class="TextSegSigDiff">that</span> t<span class="TextSegSigDiff">h</span>is <span class="TextSegSigDiff">is,</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">real</span> <span class="TextSegSigDiff">sense,</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">illu</span>si<span class="TextSegSigDiff">on:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">round</span>s <span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">o</span> t<span class="TextSegSigDiff">he</span> <span class="TextSegSigDiff">nea</span>re<span class="TextSegSigDiff">st</span> <span class="TextSegSigDiff">v</span>al<span class="TextSegSigDiff">u</span><span class="TextSegSigDiff">e,</span> <span class="TextSegSigDiff">rounding</span> ti<span class="TextSegSigDiff">e</span>s <span class="TextSegSigDiff">aw</span><span class="TextSegSigDiff">ay</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">zero.</span>&nbsp; Si<span class="TextSegSigDiff">nce</span> <span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">decimal</span> <span class="TextSegSigDiff">fraction</span> <span class="TextSegSigDiff">2.675</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">exactly</span> <span class="TextSegSigDiff">halfway</span> <span class="TextSegSigDiff">between</span> <span class="TextSegSigDiff">2.67</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">2.68,</span> <span class="TextSegSigDiff">you</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">you're</span> <span class="TextSegSigDiff">simply</span> <span class="TextSegSigDiff">rounding</span> the <span class="TextSegSigDiff">*display*</span> o<span class="TextSegSigDiff">f</span> <span class="TextSegSigDiff">th</span>e <span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">rue</span> ma<span class="TextSegSigDiff">chi</span><span class="TextSegSigDiff">ne</span> <span class="TextSegSigDiff">value</span>.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">m</span><span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">ght</span> <span class="TextSegSigDiff">expect</span> the <span class="TextSegSigDiff">re</span><span class="TextSegSigDiff">sult</span> <span class="TextSegSigDiff">here</span> <span class="TextSegSigDiff">t</span>o <span class="TextSegSigDiff">b</span>e <span class="TextSegSigDiff">(a</span> <span class="TextSegSigDiff">binary</span> <span class="TextSegSigDiff">approxi</span>ma<span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">ion</span> <span class="TextSegSigDiff">to)</span> <span class="TextSegSigDiff">2.68</span>.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">It's</span> <span class="TextSegSigDiff">not,</span> <span class="TextSegSigDiff">because</span> <span class="TextSegSigDiff">when</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">decimal</span> <span class="TextSegSigDiff">string</span> <span class="TextSegSigDiff">&quot;2.675&quot;</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">converted</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">O</span><span class="TextSegSigDiff">ne</span> <span class="TextSegSigDiff">illusi</span><span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">n</span> m<span class="TextSegSigDiff">ay</span> be<span class="TextSegSigDiff">ge</span><span class="TextSegSigDiff">t</span> an<span class="TextSegSigDiff">other.</span>&nbsp; <span class="TextSegSigDiff">Fo</span>r e<span class="TextSegSigDiff">xam</span>pl<span class="TextSegSigDiff">e,</span> <span class="TextSegSigDiff">since</span> <span class="TextSegSigDiff">0.1</span> i<span class="TextSegSigDiff">s</span> n<span class="TextSegSigDiff">ot</span> <span class="TextSegSigDiff">exactl</span>y</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">binary</span> <span class="TextSegSigDiff">floating-point</span> <span class="TextSegSigDiff">nu</span>mbe<span class="TextSegSigDiff">r,</span> <span class="TextSegSigDiff">it's</span> a<span class="TextSegSigDiff">gai</span>n repl<span class="TextSegSigDiff">aced</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">b</span>in<span class="TextSegSigDiff">ar</span>y</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">approximation,</span> <span class="TextSegSigDiff">whose</span> <span class="TextSegSigDiff">exact</span> <span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">is</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">1/10,</span> <span class="TextSegSigDiff">summing</span> <span class="TextSegSigDiff">three</span> <span class="TextSegSigDiff">values</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">0.1</span> <span class="TextSegSigDiff">may</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">yield</span> <span class="TextSegSigDiff">exactly</span> <span class="TextSegSigDiff">0.3,</span> <span class="TextSegSigDiff">either:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">2.67499999999999982236431605997495353221893310546875</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">.1</span> <span class="TextSegSigDiff">+</span> <span class="TextSegSigDiff">.1</span> <span class="TextSegSigDiff">+</span> <span class="TextSegSigDiff">.1</span> <span class="TextSegSigDiff">==</span> <span class="TextSegSigDiff">.3</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Since</span> <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">approximation</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">slightly</span> <span class="TextSegSigDiff">closer</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">2.67</span> <span class="TextSegSigDiff">than</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">2.68,</span> <span class="TextSegSigDiff">it's</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">rounded</span> <span class="TextSegSigDiff">down.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">False</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">you're</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">situation</span> <span class="TextSegSigDiff">where</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">care</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">way</span> <span class="TextSegSigDiff">your</span> <span class="TextSegSigDiff">decimal</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">halfway-cases</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">rounded,</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">should</span> <span class="TextSegSigDiff">consider</span> <span class="TextSegSigDiff">using</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;decimal&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">A</span><span class="TextSegSigDiff">lso,</span> <span class="TextSegSigDiff">s</span>inc<span class="TextSegSigDiff">e</span> the <span class="TextSegSigDiff">0.1</span> <span class="TextSegSigDiff">c</span><span class="TextSegSigDiff">ann</span><span class="TextSegSigDiff">ot</span> <span class="TextSegSigDiff">get</span> a<span class="TextSegSigDiff">ny</span> <span class="TextSegSigDiff">c</span>lo<span class="TextSegSigDiff">se</span>r <span class="TextSegSigDiff">t</span>o <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">ex</span>a<span class="TextSegSigDiff">ct</span> <span class="TextSegSigDiff">value</span> o<span class="TextSegSigDiff">f</span> <span class="TextSegSigDiff">1/10</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">module.</span> Inc<span class="TextSegSigDiff">identally,</span> the <span class="TextSegSigDiff">&quot;de</span><span class="TextSegSigDiff">cimal&quot;</span> <span class="TextSegSigDiff">module</span> al<span class="TextSegSigDiff">s</span>o <span class="TextSegSigDiff">p</span>ro<span class="TextSegSigDiff">vides</span> a <span class="TextSegSigDiff">nice</span> <span class="TextSegSigDiff">way</span> <span class="TextSegSigDiff">t</span>o</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">0.3</span> <span class="TextSegSigDiff">cannot</span> <span class="TextSegSigDiff">get</span> <span class="TextSegSigDiff">any</span> <span class="TextSegSigDiff">closer</span> <span class="TextSegSigDiff">to</span> the exact value <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">3/10,</span> th<span class="TextSegSigDiff">e</span>n <span class="TextSegSigDiff">pre-</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;s</span><span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">e&quot;</span> the exact value <span class="TextSegSigDiff">that's</span> <span class="TextSegSigDiff">stored</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">any</span> <span class="TextSegSigDiff">particular</span> <span class="TextSegSigDiff">Py</span>th<span class="TextSegSigDiff">o</span>n <span class="TextSegSigDiff">float</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">rounding</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">&quot;round()&quot;</span> <span class="TextSegSigDiff">function</span> <span class="TextSegSigDiff">cannot</span> <span class="TextSegSigDiff">help:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">decimal</span> <span class="TextSegSigDiff">import</span> <span class="TextSegSigDiff">Decimal</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">roun</span>d<span class="TextSegSigDiff">(</span><span class="TextSegSigDiff">.1,</span> <span class="TextSegSigDiff">1)</span> <span class="TextSegSigDiff">+</span> <span class="TextSegSigDiff">round(.1,</span> <span class="TextSegSigDiff">1)</span> <span class="TextSegSigDiff">+</span> <span class="TextSegSigDiff">round(.1,</span> <span class="TextSegSigDiff">1)</span> <span class="TextSegSigDiff">==</span> <span class="TextSegSigDiff">round(.3,</span> <span class="TextSegSigDiff">1</span>)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; D<span class="TextSegSigDiff">ecimal(2.675</span>)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">False</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Decimal('2.67499999999999982236431605997495353221893310546875')</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Though</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">numbers</span> <span class="TextSegSigDiff">cannot</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">made</span> <span class="TextSegSigDiff">closer</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">their</span> <span class="TextSegSigDiff">intended</span> <span class="TextSegSigDiff">exact</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">values,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;round()&quot;</span> <span class="TextSegSigDiff">function</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">useful</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">post-rounding</span> <span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">that</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">r<span class="TextSegSigDiff">esult</span>s <span class="TextSegSigDiff">wi</span>th ine<span class="TextSegSigDiff">xact</span> <span class="TextSegSigDiff">value</span>s <span class="TextSegSigDiff">becom</span>e <span class="TextSegSigDiff">comparable</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">ne</span> <span class="TextSegSigDiff">another:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Anothe</span>r <span class="TextSegSigDiff">consequence</span> <span class="TextSegSigDiff">i</span>s th<span class="TextSegSigDiff">at</span> <span class="TextSegSigDiff">s</span>in<span class="TextSegSigDiff">c</span>e <span class="TextSegSigDiff">0.1</span> <span class="TextSegSigDiff">i</span>s <span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">ot</span> e<span class="TextSegSigDiff">xact</span><span class="TextSegSigDiff">ly</span> <span class="TextSegSigDiff">1/10,</span> <span class="TextSegSigDiff">summing</span> <span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">en</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">values</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">0.1</span> <span class="TextSegSigDiff">may</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">yield</span> <span class="TextSegSigDiff">exactly</span> <span class="TextSegSigDiff">1.0,</span> <span class="TextSegSigDiff">either:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">round(.1</span> <span class="TextSegSigDiff">+</span> <span class="TextSegSigDiff">.1</span> <span class="TextSegSigDiff">+</span> <span class="TextSegSigDiff">.1,</span> <span class="TextSegSigDiff">10)</span> <span class="TextSegSigDiff">==</span> <span class="TextSegSigDiff">round(.3,</span> <span class="TextSegSigDiff">10)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">sum</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">0.0</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">i</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">range(10):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">sum</span> <span class="TextSegSigDiff">+=</span> <span class="TextSegSigDiff">0.1</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">True</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">sum</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">0.9999999999999999</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Binary floating-point arithmetic holds many surprises like this.&nbsp; The</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Binary floating-point arithmetic holds many surprises like this.&nbsp; The</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">problem with &quot;0.1&quot; is explained in precise detail below, in the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">problem with &quot;0.1&quot; is explained in precise detail below, in the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;Representation Error&quot; section.&nbsp; See The Perils of Floating Point for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;Representation Error&quot; section.&nbsp; See The Perils of Floating Point for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a more complete account of other common surprises.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a more complete account of other common surprises.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">As that says near the end, &quot;there are no easy answers.&quot;&nbsp; Still, don't</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">As that says near the end, &quot;there are no easy answers.&quot;&nbsp; Still, don't</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">be unduly wary of floating-point!&nbsp; The errors in Python float</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">be unduly wary of floating-point!&nbsp; The errors in Python float</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">operations are inherited from the floating-point hardware, and on most</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">operations are inherited from the floating-point hardware, and on most</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">machines are on the order of no more than 1 part in 2**53 per</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">machines are on the order of no more than 1 part in 2**53 per</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">operation.&nbsp; That's more than adequate for most tasks, but you do need</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">operation.&nbsp; That's more than adequate for most tasks, but you do need</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">to keep in mind that it's not decimal arithmetic and that every float</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">to keep in mind that it's not decimal arithmetic<span class="TextSegSigDiff">,</span> and that every float</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">operation can suffer a new rounding error.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">operation can suffer a new rounding error.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">While pathological cases do exist, for most casual use of floating-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">While pathological cases do exist, for most casual use of floating-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">point arithmetic you'll see the result you expect in the end if you</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">point arithmetic you'll see the result you expect in the end if you</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">simply round the display of your final results to the number of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">simply round the display of your final results to the number of</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">decimal digits you expect. <span class="TextSegSigDiff">&quot;str()&quot;</span> <span class="TextSegSigDiff">usually</span> <span class="TextSegSigDiff">suffi</span>c<span class="TextSegSigDiff">es,</span> a<span class="TextSegSigDiff">nd</span> f<span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">finer</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">decimal digits you expect.&nbsp; <span class="TextSegSigDiff">For</span> <span class="TextSegSigDiff">f</span><span class="TextSegSigDiff">ine</span> c<span class="TextSegSigDiff">ontrol</span> <span class="TextSegSigDiff">over</span> <span class="TextSegSigDiff">how</span> a f<span class="TextSegSigDiff">loat</span> <span class="TextSegSigDiff">is</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">control</span> see the &quot;str.format()&quot; method's format specifiers in Format</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">disp</span><span class="TextSegSigDiff">layed</span> see the &quot;str.format()&quot; method's format specifiers in Format</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">String Syntax.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">String Syntax.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">For</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">cases</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">require</span> <span class="TextSegSigDiff">exact</span> <span class="TextSegSigDiff">decimal</span> <span class="TextSegSigDiff">representation,</span> <span class="TextSegSigDiff">try</span> <span class="TextSegSigDiff">using</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;decimal&quot;</span> <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">implements</span> <span class="TextSegSigDiff">decimal</span> <span class="TextSegSigDiff">arithmetic</span> <span class="TextSegSigDiff">suitable</span> <span class="TextSegSigDiff">for</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">accounting</span> <span class="TextSegSigDiff">applications</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">high-precision</span> <span class="TextSegSigDiff">applications.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Another</span> <span class="TextSegSigDiff">form</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">exact</span> <span class="TextSegSigDiff">arithmetic</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">supported</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;fractions&quot;</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">implements</span> <span class="TextSegSigDiff">arithmetic</span> <span class="TextSegSigDiff">based</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">rational</span> <span class="TextSegSigDiff">numbers</span> <span class="TextSegSigDiff">(so</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">numbers</span> <span class="TextSegSigDiff">like</span> <span class="TextSegSigDiff">1/3</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">represented</span> <span class="TextSegSigDiff">exactly).</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">heavy</span> <span class="TextSegSigDiff">user</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">floating</span> <span class="TextSegSigDiff">point</span> <span class="TextSegSigDiff">operations</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">should</span> <span class="TextSegSigDiff">take</span> <span class="TextSegSigDiff">a</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">look</span> <span class="TextSegSigDiff">at</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Numerical</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">package</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">many</span> <span class="TextSegSigDiff">other</span> <span class="TextSegSigDiff">packages</span> <span class="TextSegSigDiff">for</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">mathematical</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">statistical</span> <span class="TextSegSigDiff">operations</span> <span class="TextSegSigDiff">supplied</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">SciPy</span> <span class="TextSegSigDiff">project.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">See</span> <span class="TextSegSigDiff">&lt;https://scipy.org&gt;.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">provides</span> <span class="TextSegSigDiff">tools</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">may</span> <span class="TextSegSigDiff">help</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">those</span> <span class="TextSegSigDiff">rare</span> <span class="TextSegSigDiff">occasions</span> <span class="TextSegSigDiff">when</span> <span class="TextSegSigDiff">you</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">really</span> <span class="TextSegSigDiff">*do*</span> <span class="TextSegSigDiff">want</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">know</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">exact</span> <span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">float.</span>&nbsp; <span class="TextSegSigDiff">The</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;float.as_integer_ratio()&quot;</span> <span class="TextSegSigDiff">method</span> <span class="TextSegSigDiff">expresses</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">float</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">a</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">fraction:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">x</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">3.14159</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">x.as_integer_ratio()</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">(3537115888337719,</span> <span class="TextSegSigDiff">1125899906842624)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Since</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">ratio</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">exact,</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">used</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">losslessly</span> <span class="TextSegSigDiff">recreate</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">original</span> <span class="TextSegSigDiff">value:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">x</span> <span class="TextSegSigDiff">==</span> <span class="TextSegSigDiff">3537115888337719</span> <span class="TextSegSigDiff">/</span> <span class="TextSegSigDiff">1125899906842624</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">True</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">&quot;float.hex()&quot;</span> <span class="TextSegSigDiff">method</span> <span class="TextSegSigDiff">expresses</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">float</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">hexadecimal</span> <span class="TextSegSigDiff">(base</span> <span class="TextSegSigDiff">16),</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">again</span> <span class="TextSegSigDiff">giving</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">exact</span> <span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">stored</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">your</span> <span class="TextSegSigDiff">computer:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">x.hex()</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">'0x1.921f9f01b866ep+1'</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">This</span> <span class="TextSegSigDiff">precise</span> <span class="TextSegSigDiff">hexadecimal</span> <span class="TextSegSigDiff">representation</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">used</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">reconstruct</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">float</span> <span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">exactly:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">x</span> <span class="TextSegSigDiff">==</span> <span class="TextSegSigDiff">float.fromhex('0x1.921f9f01b866ep+1')</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">True</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Since</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">representation</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">exact,</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">useful</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">reliably</span> <span class="TextSegSigDiff">porting</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">values</span> <span class="TextSegSigDiff">across</span> <span class="TextSegSigDiff">different</span> <span class="TextSegSigDiff">versions</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">(platform</span> <span class="TextSegSigDiff">independence)</span> <span class="TextSegSigDiff">and</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">exchanging</span> <span class="TextSegSigDiff">data</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">other</span> <span class="TextSegSigDiff">languages</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">support</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">same</span> <span class="TextSegSigDiff">format</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">(such</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">Java</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">C99).</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Another</span> <span class="TextSegSigDiff">helpful</span> <span class="TextSegSigDiff">tool</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;math.fsum()&quot;</span> <span class="TextSegSigDiff">function</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">helps</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">mitigate</span> <span class="TextSegSigDiff">loss-of-precision</span> <span class="TextSegSigDiff">during</span> <span class="TextSegSigDiff">summation.</span>&nbsp; <span class="TextSegSigDiff">It</span> <span class="TextSegSigDiff">tracks</span> <span class="TextSegSigDiff">&quot;lost</span> <span class="TextSegSigDiff">digits&quot;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">values</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">added</span> <span class="TextSegSigDiff">onto</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">running</span> <span class="TextSegSigDiff">total.</span>&nbsp; <span class="TextSegSigDiff">That</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">make</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">difference</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">overall</span> <span class="TextSegSigDiff">accuracy</span> <span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">errors</span> <span class="TextSegSigDiff">do</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">accumulate</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">point</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">where</span> <span class="TextSegSigDiff">they</span> <span class="TextSegSigDiff">affect</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">final</span> <span class="TextSegSigDiff">total:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">sum([0.1]</span> <span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">10)</span> <span class="TextSegSigDiff">==</span> <span class="TextSegSigDiff">1.0</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">False</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">math.fsum([0.1]</span> <span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">10)</span> <span class="TextSegSigDiff">==</span> <span class="TextSegSigDiff">1.0</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">True</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Representation Error</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Representation Error</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">====================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">====================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This section explains the &quot;0.1&quot; example in detail, and shows how you</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This section explains the &quot;0.1&quot; example in detail, and shows how you</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">can perform an exact analysis of cases like this yourself.&nbsp; Basic</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">can perform an exact analysis of cases like this yourself.&nbsp; Basic</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">familiarity with binary floating-point representation is assumed.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">familiarity with binary floating-point representation is assumed.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*Representation error* refers to the fact that some (most, actually)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*Representation error* refers to the fact that some (most, actually)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">decimal fractions cannot be represented exactly as binary (base 2)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">decimal fractions cannot be represented exactly as binary (base 2)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">fractions. This is the chief reason why Python (or Perl, C, C++, Java,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">fractions. This is the chief reason why Python (or Perl, C, C++, Java,</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">Fortran, and many others) often won't display the exact decimal number</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Fortran, and many others) often won't display the exact decimal number</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">you expect<span class="TextSegSigDiff">.</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">you expect<span class="TextSegSigDiff">:</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">0.1</span> <span class="TextSegSigDiff">+</span> <span class="TextSegSigDiff">0.2</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">0.30000000000000004</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">Why is that?&nbsp; 1/10 <span class="TextSegSigDiff">is</span> not exactly representable as a binary <span class="TextSegSigDiff">fraction.</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Why is that?&nbsp; 1/10 <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">2/10</span> <span class="TextSegSigDiff">are</span> not exactly representable as a binary</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">Almost all machines today (<span class="TextSegSigDiff">November</span> 200<span class="TextSegSigDiff">0</span>) use IEEE-754 floating <span class="TextSegSigDiff">point</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">fr</span>a<span class="TextSegSigDiff">ction.</span> <span class="TextSegSigDiff">A</span>lmost all machines today (<span class="TextSegSigDiff">July</span> 20<span class="TextSegSigDiff">1</span>0) use IEEE-754 floating</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">arithmetic, and almost all platforms map Python floats to <span class="TextSegSigDiff">IEEE-754</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">point</span> arithmetic, and almost all platforms map Python floats to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&quot;double precision&quot;.&nbsp; 754 doubles contain 53 bits of <span class="TextSegSigDiff">precision,</span> <span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">on</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">IEEE-754</span> &quot;double precision&quot;.&nbsp; 754 doubles contain 53 bits of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">i<span class="TextSegSigDiff">n</span>put the computer strives to convert 0.1 to the <span class="TextSegSigDiff">closest</span> <span class="TextSegSigDiff">fraction</span> <span class="TextSegSigDiff">it</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">precis</span>i<span class="TextSegSigDiff">on,</span> <span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">in</span>put the computer strives to convert 0.1 to the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">can of the form *J*/2***N* where *J* is an integer <span class="TextSegSigDiff">containing</span> <span class="TextSegSigDiff">exactly</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">c<span class="TextSegSigDiff">losest</span> <span class="TextSegSigDiff">fraction</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">c</span>an of the form *J*/2***N* where *J* is an integer</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">53 bits.&nbsp; Rewriting</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">containing</span> <span class="TextSegSigDiff">exactly</span> 53 bits.&nbsp; Rewriting</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 1 / 10 ~= J / (2**N)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 1 / 10 ~= J / (2**N)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; J ~= 2**N / 10</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; J ~= 2**N / 10</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and recalling that *J* has exactly 53 bits (is &quot;&gt;= 2**52&quot; but &quot;&lt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and recalling that *J* has exactly 53 bits (is &quot;&gt;= 2**52&quot; but &quot;&lt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">2**53&quot;), the best value for *N* is 56:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">2**53&quot;), the best value for *N* is 56:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">2**52</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">4503599627370496</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">2**53</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">9007199254740992</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; 2**5<span class="TextSegSigDiff">2</span> <span class="TextSegSigDiff">&lt;=</span>&nbsp; <span class="TextSegSigDiff">2**5</span>6 /<span class="TextSegSigDiff">/</span> 10&nbsp; <span class="TextSegSigDiff">&lt;</span> <span class="TextSegSigDiff">2**53</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; 2**56/10</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">True</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">7205759403792793</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">That is, 56 is the only value for *N* that leaves *J* with exactly 53</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">That is, 56 is the only value for *N* that leaves *J* with exactly 53</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">bits.&nbsp; The best possible value for *J* is then that quotient rounded:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">bits. The best possible value for *J* is then that quotient rounded:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; q, r = divmod(2**56, 10)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; q, r = divmod(2**56, 10)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; r</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; r</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 6</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 6</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Since the remainder is more than half of 10, the best approximation is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Since the remainder is more than half of 10, the best approximation is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">obtained by rounding up:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">obtained by rounding up:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; q+1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; q+1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 7205759403792794</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 7205759403792794</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">Therefore the best possible approximation to 1/10 in 754 double</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Therefore the best possible approximation to 1/10 in 754 double</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">precision is<span class="TextSegSigDiff">:</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">precision is <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">over</span> <span class="TextSegSigDiff">2**56,</span> <span class="TextSegSigDiff">or</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; 7205759403792794 / <span class="TextSegSigDiff">2</span> <span class="TextSegSigDiff">**</span> <span class="TextSegSigDiff">5</span>6</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; 7205759403792794 / <span class="TextSegSigDiff">72057</span><span class="TextSegSigDiff">59403792793</span>6</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Dividing</span> <span class="TextSegSigDiff">both</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">numerator</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">denominator</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">two</span> <span class="TextSegSigDiff">reduces</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">fraction</span> <span class="TextSegSigDiff">to:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">3602879701896397</span> <span class="TextSegSigDiff">/</span> <span class="TextSegSigDiff">2</span> <span class="TextSegSigDiff">**</span> <span class="TextSegSigDiff">55</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note that since we rounded up, this is actually a little bit larger</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note that since we rounded up, this is actually a little bit larger</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">than 1/10; if we had not rounded up, the quotient would have been a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">than 1/10; if we had not rounded up, the quotient would have been a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">little bit smaller than 1/10.&nbsp; But in no case can it be *exactly*</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">little bit smaller than 1/10.&nbsp; But in no case can it be *exactly*</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">1/10!</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">1/10!</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">So the computer never &quot;sees&quot; 1/10:&nbsp; what it sees is the exact fraction</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">So the computer never &quot;sees&quot; 1/10:&nbsp; what it sees is the exact fraction</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">given above, the best 754 double approximation it can get:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">given above, the best 754 double approximation it can get:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">0</span>.1 * 2 ** 5<span class="TextSegSigDiff">5</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; .1 * 2**5<span class="TextSegSigDiff">6</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">360287</span><span class="TextSegSigDiff">97018963</span><span class="TextSegSigDiff">9</span><span class="TextSegSigDiff">7</span>.0</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">7205</span><span class="TextSegSigDiff">75940</span><span class="TextSegSigDiff">3792794</span>.0</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">If we multiply that fraction by 10**<span class="TextSegSigDiff">55</span>, we can see the <span class="TextSegSigDiff">v</span><span class="TextSegSigDiff">alue</span> <span class="TextSegSigDiff">out</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">55</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">If we multiply that fraction by 10**<span class="TextSegSigDiff">30</span>, we can see the <span class="TextSegSigDiff">(truncat</span><span class="TextSegSigDiff">ed)</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">decimal digits:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">its</span> <span class="TextSegSigDiff">30</span> <span class="TextSegSigDiff">most</span> <span class="TextSegSigDiff">significant</span> decimal digits:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">360287</span><span class="TextSegSigDiff">97018963</span><span class="TextSegSigDiff">9</span><span class="TextSegSigDiff">7</span> * 10 ** <span class="TextSegSigDiff">55</span> // 2 ** 5<span class="TextSegSigDiff">5</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">7205</span><span class="TextSegSigDiff">75940</span><span class="TextSegSigDiff">3792794</span> * 10**<span class="TextSegSigDiff">30</span> // 2**5<span class="TextSegSigDiff">6</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; 100000000000000005551115123125<span class="TextSegSigDiff">7827021181583404541015625</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; 100000000000000005551115123125<span class="TextSegSigDiff">L</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">meaning that the exact number stored in the computer is <span class="TextSegSigDiff">equal</span> <span class="TextSegSigDiff">to</span> t<span class="TextSegSigDiff">h</span>e</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">meaning that the exact number stored in the computer is <span class="TextSegSigDiff">approxima</span>te<span class="TextSegSigDiff">ly</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">decimal</span> <span class="TextSegSigDiff">value</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">0.100000000000000005551115123125<span class="TextSegSigDiff">7827021181583404541015625</span>. In<span class="TextSegSigDiff">stead</span> <span class="TextSegSigDiff">of</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">equal</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">decimal</span> <span class="TextSegSigDiff">value</span> 0.100000000000000005551115123125.&nbsp; In</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">displaying</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">full</span> <span class="TextSegSigDiff">decimal</span> <span class="TextSegSigDiff">value,</span> <span class="TextSegSigDiff">many</span> <span class="TextSegSigDiff">languages</span> <span class="TextSegSigDiff">(including</span> <span class="TextSegSigDiff">older</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">versions <span class="TextSegSigDiff">of</span> Python<span class="TextSegSigDiff">),</span> <span class="TextSegSigDiff">rou</span>nd th<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">result</span> <span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">o</span> <span class="TextSegSigDiff">17</span> <span class="TextSegSigDiff">significan</span>t <span class="TextSegSigDiff">digits:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">versions <span class="TextSegSigDiff">prior</span> <span class="TextSegSigDiff">to</span> Python <span class="TextSegSigDiff">2.7</span> <span class="TextSegSigDiff">a</span>nd <span class="TextSegSigDiff">Py</span>th<span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">3.1,</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">rounded</span> t<span class="TextSegSigDiff">h</span><span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">value</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">17</span> <span class="TextSegSigDiff">significant</span> <span class="TextSegSigDiff">digits,</span> <span class="TextSegSigDiff">giving</span> <span class="TextSegSigDiff">'0.10000000000000001'.</span>&nbsp; <span class="TextSegSigDiff">In</span> <span class="TextSegSigDiff">current</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">format(0.1,</span> <span class="TextSegSigDiff">'.17f')</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">'0.10000000000000001'</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Th</span>e <span class="TextSegSigDiff">&quot;fract</span>ions<span class="TextSegSigDiff">&quot;</span> <span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">nd</span> <span class="TextSegSigDiff">&quot;decim</span>al<span class="TextSegSigDiff">&quot;</span> <span class="TextSegSigDiff">modules</span> <span class="TextSegSigDiff">make</span> thes<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">c</span>al<span class="TextSegSigDiff">culations</span> <span class="TextSegSigDiff">easy:</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">v</span>e<span class="TextSegSigDiff">rs</span>ions<span class="TextSegSigDiff">,</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">d</span><span class="TextSegSigDiff">isplays</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">v</span>al<span class="TextSegSigDiff">u</span><span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">based</span> <span class="TextSegSigDiff">on</span> the s<span class="TextSegSigDiff">hortest</span> <span class="TextSegSigDiff">decim</span>al</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">fraction</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">rounds</span> <span class="TextSegSigDiff">correctly</span> <span class="TextSegSigDiff">back</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">true</span> <span class="TextSegSigDiff">binary</span> <span class="TextSegSigDiff">value,</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">decimal</span> <span class="TextSegSigDiff">import</span> <span class="TextSegSigDiff">Decimal</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">fractions</span> <span class="TextSegSigDiff">import</span> <span class="TextSegSigDiff">Fraction</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">resulting</span> <span class="TextSegSigDiff">simply</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">'0.1'.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">Fraction.from_float(0.1)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Fraction(3602879701896397,</span> <span class="TextSegSigDiff">36028797018963968)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">(0.1).as_integer_ratio()</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">(3602879701896397,</span> <span class="TextSegSigDiff">36028797018963968)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">Decimal.from_float(0.1)</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Decimal('0.1000000000000000055511151231257827021181583404541015625')</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">format(Decimal.from_float(0.1),</span> <span class="TextSegSigDiff">'.17')</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">'0.10000000000000001'</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\tutorial\index.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The Python Tutorial</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The Python Tutorial</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*******************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*******************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python is an easy to learn, powerful programming language. It has</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python is an easy to learn, powerful programming language. It has</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">efficient high-level data structures and a simple but effective</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">efficient high-level data structures and a simple but effective</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">approach to object-oriented programming. Python's elegant syntax and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">approach to object-oriented programming. Python's elegant syntax and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">dynamic typing, together with its interpreted nature, make it an ideal</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">dynamic typing, together with its interpreted nature, make it an ideal</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">language for scripting and rapid application development in many areas</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">language for scripting and rapid application development in many areas</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">on most platforms.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">on most platforms.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The Python interpreter and the extensive standard library are freely</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The Python interpreter and the extensive standard library are freely</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">available in source or binary form for all major platforms from the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">available in source or binary form for all major platforms from the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python Web site, https://www.python.org/, and may be freely</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python Web site, https://www.python.org/, and may be freely</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">distributed. The same site also contains distributions of and pointers</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">distributed. The same site also contains distributions of and pointers</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to many free third party Python modules, programs and tools, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to many free third party Python modules, programs and tools, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">additional documentation.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">additional documentation.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The Python interpreter is easily extended with new functions and data</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The Python interpreter is easily extended with new functions and data</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">types implemented in C or C++ (or other languages callable from C).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">types implemented in C or C++ (or other languages callable from C).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python is also suitable as an extension language for customizable</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python is also suitable as an extension language for customizable</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">applications.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">applications.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This tutorial introduces the reader informally to the basic concepts</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This tutorial introduces the reader informally to the basic concepts</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and features of the Python language and system. It helps to have a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and features of the Python language and system. It helps to have a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python interpreter handy for hands-on experience, but all examples are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python interpreter handy for hands-on experience, but all examples are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">self-contained, so the tutorial can be read off-line as well.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">self-contained, so the tutorial can be read off-line as well.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For a description of standard objects and modules, see The Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For a description of standard objects and modules, see The Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Standard Library. The Python Language Reference gives a more formal</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Standard Library. The Python Language Reference gives a more formal</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">definition of the language.&nbsp; To write extensions in C or C++, read</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">definition of the language.&nbsp; To write extensions in C or C++, read</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Extending and Embedding the Python Interpreter and Python/C API</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Extending and Embedding the Python Interpreter and Python/C API</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Reference Manual. There are also several books covering Python in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Reference Manual. There are also several books covering Python in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">depth.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">depth.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This tutorial does not attempt to be comprehensive and cover every</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This tutorial does not attempt to be comprehensive and cover every</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">single feature, or even every commonly used feature. Instead, it</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">single feature, or even every commonly used feature. Instead, it</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">introduces many of Python's most noteworthy features, and will give</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">introduces many of Python's most noteworthy features, and will give</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you a good idea of the language's flavor and style. After reading it,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you a good idea of the language's flavor and style. After reading it,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you will be able to read and write Python modules and programs, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you will be able to read and write Python modules and programs, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you will be ready to learn more about the various Python library</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you will be ready to learn more about the various Python library</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">modules described in The Python Standard Library.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">modules described in The Python Standard Library.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The Glossary is also worth going through.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The Glossary is also worth going through.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Whetting Your Appetite</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Whetting Your Appetite</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Using the Python Interpreter</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Using the Python Interpreter</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Invoking the Interpreter</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Invoking the Interpreter</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Argument Passing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Argument Passing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Interactive Mode</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Interactive Mode</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * The Interpreter and Its Environment</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * The Interpreter and Its Environment</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Source Code Encoding</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Source Code Encoding</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* An Informal Introduction to Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* An Informal Introduction to Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Using Python as a Calculator</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Using Python as a Calculator</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Numbers</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Numbers</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Strings</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Strings</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">Strings</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Lists</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Lists</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * First Steps Towards Programming</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * First Steps Towards Programming</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* More Control Flow Tools</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* More Control Flow Tools</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * &quot;if&quot; Statements</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * &quot;if&quot; Statements</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * &quot;for&quot; Statements</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * &quot;for&quot; Statements</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * The &quot;range()&quot; Function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * The &quot;range()&quot; Function</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * &quot;break&quot; and &quot;continue&quot; Statements, and &quot;else&quot; Clauses on Loops</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * &quot;break&quot; and &quot;continue&quot; Statements, and &quot;else&quot; Clauses on Loops</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * &quot;pass&quot; Statements</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * &quot;pass&quot; Statements</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Defining Functions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Defining Functions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * More on Defining Functions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * More on Defining Functions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Default Argument Values</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Default Argument Values</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Keyword Arguments</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Keyword Arguments</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Arbitrary Argument Lists</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Arbitrary Argument Lists</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Unpacking Argument Lists</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Unpacking Argument Lists</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Lambda Expressions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Lambda Expressions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Documentation Strings</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Documentation Strings</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">Function</span> <span class="TextSegSigDiff">Annotations</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Intermezzo: Coding Style</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Intermezzo: Coding Style</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Data Structures</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Data Structures</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * More on Lists</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * More on Lists</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Using Lists as Stacks</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Using Lists as Stacks</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Using Lists as Queues</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Using Lists as Queues</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">Functional</span> <span class="TextSegSigDiff">Programming</span> <span class="TextSegSigDiff">Tools</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * List Comprehensions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * List Comprehensions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Nested List Comprehensions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; * Nested List Comprehensions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * The &quot;del&quot; statement</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * The &quot;del&quot; statement</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Tuples and Sequences</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Tuples and Sequences</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Sets</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Sets</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Dictionaries</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Dictionaries</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Looping Techniques</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Looping Techniques</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * More on Conditions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * More on Conditions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Comparing Sequences and Other Types</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Comparing Sequences and Other Types</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Modules</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Modules</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * More on Modules</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * More on Modules</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Executing modules as scripts</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Executing modules as scripts</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * The Module Search Path</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * The Module Search Path</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * &quot;Compiled&quot; Python files</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * &quot;Compiled&quot; Python files</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Standard Modules</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Standard Modules</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * The &quot;dir()&quot; Function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * The &quot;dir()&quot; Function</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Packages</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Packages</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Importing * From a Package</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Importing * From a Package</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Intra-package References</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Intra-package References</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Packages in Multiple Directories</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Packages in Multiple Directories</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Input and Output</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Input and Output</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Fancier Output Formatting</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Fancier Output Formatting</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Old string formatting</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Old string formatting</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Reading and Writing Files</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Reading and Writing Files</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Methods of File Objects</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Methods of File Objects</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Saving structured data with &quot;json&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Saving structured data with &quot;json&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Errors and Exceptions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Errors and Exceptions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Syntax Errors</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Syntax Errors</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Exceptions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Exceptions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Handling Exceptions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Handling Exceptions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Raising Exceptions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Raising Exceptions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * User-defined Exceptions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * User-defined Exceptions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Defining Clean-up Actions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Defining Clean-up Actions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Predefined Clean-up Actions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Predefined Clean-up Actions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Classes</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Classes</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * A Word About Names and Objects</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * A Word About Names and Objects</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Python Scopes and Namespaces</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Python Scopes and Namespaces</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">Scopes</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">Namespaces</span> <span class="TextSegSigDiff">Example</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * A First Look at Classes</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * A First Look at Classes</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Class Definition Syntax</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Class Definition Syntax</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Class Objects</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Class Objects</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Instance Objects</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Instance Objects</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Method Objects</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Method Objects</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Class and Instance Variables</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Class and Instance Variables</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Random Remarks</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Random Remarks</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Inheritance</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Inheritance</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Multiple Inheritance</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Multiple Inheritance</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp; * Private Variables</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp; * Private Variables <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">Class-local</span> <span class="TextSegSigDiff">References</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Odds and Ends</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Odds and Ends</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">Exceptions</span> <span class="TextSegSigDiff">Are</span> <span class="TextSegSigDiff">Classes</span> <span class="TextSegSigDiff">Too</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Iterators</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Iterators</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Generators</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Generators</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Generator Expressions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Generator Expressions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Brief Tour of the Standard Library</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Brief Tour of the Standard Library</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Operating System Interface</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Operating System Interface</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * File Wildcards</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * File Wildcards</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Command Line Arguments</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Command Line Arguments</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Error Output Redirection and Program Termination</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Error Output Redirection and Program Termination</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * String Pattern Matching</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * String Pattern Matching</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Mathematics</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Mathematics</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Internet Access</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Internet Access</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Dates and Times</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Dates and Times</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Data Compression</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Data Compression</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Performance Measurement</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Performance Measurement</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Quality Control</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Quality Control</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Batteries Included</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Batteries Included</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Brief Tour of the Standard Library --- Part II</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Brief Tour of the Standard Library --- Part II</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Output Formatting</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Output Formatting</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Templating</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Templating</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Working with Binary Data Record Layouts</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Working with Binary Data Record Layouts</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Multi-threading</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Multi-threading</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Logging</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Logging</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Weak References</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Weak References</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Tools for Working with Lists</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Tools for Working with Lists</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Decimal Floating Point Arithmetic</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Decimal Floating Point Arithmetic</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">Virtual</span> <span class="TextSegSigDiff">Environments</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">Packages</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">Introduction</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">Creating</span> <span class="TextSegSigDiff">Virtual</span> <span class="TextSegSigDiff">Environments</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">Managing</span> <span class="TextSegSigDiff">Packages</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">pip</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* What Now?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* What Now?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Interactive Input Editing and History Substitution</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Interactive Input Editing and History Substitution</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">Line</span> <span class="TextSegSigDiff">Editing</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">Tab</span> <span class="TextSegSigDiff">Completion</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">History</span> <span class="TextSegSigDiff">Editing</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">History</span> <span class="TextSegSigDiff">Substitution</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">Key</span> <span class="TextSegSigDiff">Bindings</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Alternatives to the Interactive Interpreter</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Alternatives to the Interactive Interpreter</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Floating Point Arithmetic:&nbsp; Issues and Limitations</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Floating Point Arithmetic:&nbsp; Issues and Limitations</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Representation Error</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Representation Error</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Appendix</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Appendix</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; * Interactive Mode</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; * Interactive Mode</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Error Handling</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Error Handling</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Executable Python Scripts</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * Executable Python Scripts</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * The Interactive Startup File</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * The Interactive Startup File</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * The Customization Modules</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; * The Customization Modules</td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\tutorial\inputoutput.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Input and Output</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Input and Output</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">****************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">****************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There are several ways to present the output of a program; data can be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There are several ways to present the output of a program; data can be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">printed in a human-readable form, or written to a file for future use.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">printed in a human-readable form, or written to a file for future use.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This chapter will discuss some of the possibilities.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This chapter will discuss some of the possibilities.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Fancier Output Formatting</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Fancier Output Formatting</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=========================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=========================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">So far we've encountered two ways of writing values: *expression</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">So far we've encountered two ways of writing values: *expression</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">statements* and the &quot;print<span class="TextSegSigDiff">()</span>&quot; <span class="TextSegSigDiff">fu</span><span class="TextSegSigDiff">nction</span>.&nbsp; (A third way is using the</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">statements* and the &quot;print&quot; <span class="TextSegSigDiff">statemen</span><span class="TextSegSigDiff">t</span>.&nbsp; (A third way is using the</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&quot;write()&quot; method of file objects; the standard output file can be</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&quot;write()&quot; method of file objects; the standard output file can be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">referenced as &quot;sys.stdout&quot;. See the Library Reference for more</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">referenced as &quot;sys.stdout&quot;. See the Library Reference for more</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">information on this.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">information on this.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Often you'll want more control over the formatting of your output than</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Often you'll want more control over the formatting of your output than</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">simply printing space-separated values.&nbsp; There are two ways to format</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">simply printing space-separated values.&nbsp; There are two ways to format</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">your output; the first way is to do all the string handling yourself;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">your output; the first way is to do all the string handling yourself;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">using string slicing and concatenation operations you can create any</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">using string slicing and concatenation operations you can create any</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">layout you can imagine.&nbsp; The string type ha<span class="TextSegSigDiff">s</span> some methods that <span class="TextSegSigDiff">perform</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">layout you can imagine.&nbsp; The string type<span class="TextSegSigDiff">s</span> ha<span class="TextSegSigDiff">ve</span> some methods that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">useful operations for padding strings to a given column width; <span class="TextSegSigDiff">these</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">perform</span> useful operations for padding strings to a given column width;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">will be discussed shortly.&nbsp; The second way is to use <span class="TextSegSigDiff">formatted</span> <span class="TextSegSigDiff">string</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">these</span> will be discussed shortly.&nbsp; The second way is to use <span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">literals,</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">the</span> &quot;str.format()&quot; method.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&quot;str.format()&quot; method.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;string&quot; module contains a &quot;Template&quot; class which offers yet</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;string&quot; module contains a &quot;Template&quot; class which offers yet</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">another way to substitute values into strings.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">another way to substitute values into strings.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">One question remains, of course: how do you convert values to strings?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">One question remains, of course: how do you convert values to strings?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Luckily, Python has ways to convert any value to a string: pass it to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Luckily, Python has ways to convert any value to a string: pass it to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the &quot;repr()&quot; or &quot;str()&quot; functions.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the &quot;repr()&quot; or &quot;str()&quot; functions.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;str()&quot; function is meant to return representations of values</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;str()&quot; function is meant to return representations of values</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">which are fairly human-readable, while &quot;repr()&quot; is meant to generate</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">which are fairly human-readable, while &quot;repr()&quot; is meant to generate</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">representations which can be read by the interpreter (or will force a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">representations which can be read by the interpreter (or will force a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;SyntaxError&quot; if there is no equivalent syntax).&nbsp; For objects which</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;SyntaxError&quot; if there is no equivalent syntax).&nbsp; For objects which</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">don't have a particular representation for human consumption, &quot;str()&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">don't have a particular representation for human consumption, &quot;str()&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">will return the same value as &quot;repr()&quot;.&nbsp; Many values, such as numbers</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">will return the same value as &quot;repr()&quot;.&nbsp; Many values, such as numbers</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">or structures like lists and dictionaries, have the same</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">or structures like lists and dictionaries, have the same</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">representation using either function.&nbsp; Strings<span class="TextSegSigDiff">,</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">p</span><span class="TextSegSigDiff">ar</span>ti<span class="TextSegSigDiff">cular,</span> <span class="TextSegSigDiff">have</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">representation using either function.&nbsp; Strings <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">floa</span>ti<span class="TextSegSigDiff">ng</span> <span class="TextSegSigDiff">point</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">two distinct representations.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">numbers,</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">particular,</span> <span class="TextSegSigDiff">have</span> two distinct representations.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Some examples:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Some examples:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; s = 'Hello, world.'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; s = 'Hello, world.'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; str(s)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; str(s)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'Hello, world.'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'Hello, world.'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; repr(s)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; repr(s)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &quot;'Hello, world.'&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &quot;'Hello, world.'&quot;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; str(1/7)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; str(1<span class="TextSegSigDiff">.0</span>/7<span class="TextSegSigDiff">.0</span>)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">'0.142857142857'</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">repr(1.0/7.0)</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; '0.14285714285714285'</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; '0.14285714285714285'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x = 10 * 3.25</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x = 10 * 3.25</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; y = 200 * 200</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; y = 200 * 200</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...'</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(s)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print <span class="TextSegSigDiff">s</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; The value of x is 32.5, and y is 40000...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; The value of x is 32.5, and y is 40000...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # The repr() of a string adds string quotes and backslashes:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # The repr() of a string adds string quotes and backslashes:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ... hello = 'hello, world\n'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... hello = 'hello, world\n'</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; hellos = repr(hello)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; hellos = repr(hello)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>hellos<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print hellos</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; 'hello, world\n'</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; 'hello, world\n'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # The argument to repr() may be any Python object:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # The argument to repr() may be any Python object:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ... repr((x, y, ('spam', 'eggs')))</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... repr((x, y, ('spam', 'eggs')))</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &quot;(32.5, 40000, ('spam', 'eggs'))&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &quot;(32.5, 40000, ('spam', 'eggs'))&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Here are two ways to write a table of squares and cubes:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Here are two ways to write a table of squares and cubes:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for x in range(1, 11):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for x in range(1, 11):</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>repr(x).rjust(2), repr(x*x).rjust(3), <span class="TextSegSigDiff">end='</span> <span class="TextSegSigDiff">')</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print repr(x).rjust(2), repr(x*x).rjust(3),</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; # Note <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">'end'</span> on previous line</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; # Note <span class="TextSegSigDiff">trailing</span> <span class="TextSegSigDiff">comma</span> on previous line</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>repr(x*x*x).rjust(4<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print repr(x*x*x).rjust(4)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp; 1&nbsp; &nbsp; 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp; 1&nbsp; &nbsp; 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp; 4&nbsp; &nbsp; 8</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp; 4&nbsp; &nbsp; 8</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp; 9&nbsp;&nbsp; 27</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp; 9&nbsp;&nbsp; 27</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 4&nbsp; 16&nbsp;&nbsp; 64</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 4&nbsp; 16&nbsp;&nbsp; 64</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 5&nbsp; 25&nbsp; 125</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 5&nbsp; 25&nbsp; 125</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 6&nbsp; 36&nbsp; 216</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 6&nbsp; 36&nbsp; 216</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 7&nbsp; 49&nbsp; 343</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 7&nbsp; 49&nbsp; 343</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 8&nbsp; 64&nbsp; 512</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 8&nbsp; 64&nbsp; 512</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 9&nbsp; 81&nbsp; 729</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 9&nbsp; 81&nbsp; 729</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 10 100 1000</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 10 100 1000</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for x in range(1, 11):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for x in range(1,11):</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>'{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print '{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp; 1&nbsp; &nbsp; 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 1&nbsp;&nbsp; 1&nbsp; &nbsp; 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp; 4&nbsp; &nbsp; 8</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp; 4&nbsp; &nbsp; 8</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp; 9&nbsp;&nbsp; 27</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp; 9&nbsp;&nbsp; 27</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 4&nbsp; 16&nbsp;&nbsp; 64</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 4&nbsp; 16&nbsp;&nbsp; 64</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 5&nbsp; 25&nbsp; 125</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 5&nbsp; 25&nbsp; 125</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 6&nbsp; 36&nbsp; 216</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 6&nbsp; 36&nbsp; 216</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 7&nbsp; 49&nbsp; 343</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 7&nbsp; 49&nbsp; 343</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 8&nbsp; 64&nbsp; 512</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 8&nbsp; 64&nbsp; 512</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 9&nbsp; 81&nbsp; 729</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 9&nbsp; 81&nbsp; 729</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 10 100 1000</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 10 100 1000</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">(Note that in the first example, one space between each column was</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(Note that in the first example, one space between each column was</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">added by the way &quot;print<span class="TextSegSigDiff">()</span>&quot; works: it always adds spaces between its</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">added by the way &quot;print&quot; works: it always adds spaces between its</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">arguments.)</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">arguments.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This example demonstrates the &quot;str.rjust()&quot; method of string objects,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This example demonstrates the &quot;str.rjust()&quot; method of string objects,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">which right-justifies a string in a field of a given width by padding</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">which right-justifies a string in a field of a given width by padding</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">it with spaces on the left.&nbsp; There are similar methods &quot;str.ljust()&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">it with spaces on the left.&nbsp; There are similar methods &quot;str.ljust()&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and &quot;str.center()&quot;.&nbsp; These methods do not write anything, they just</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and &quot;str.center()&quot;.&nbsp; These methods do not write anything, they just</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">return a new string.&nbsp; If the input string is too long, they don't</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">return a new string.&nbsp; If the input string is too long, they don't</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">truncate it, but return it unchanged; this will mess up your column</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">truncate it, but return it unchanged; this will mess up your column</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">lay-out but that's usually better than the alternative, which would be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">lay-out but that's usually better than the alternative, which would be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">lying about a value.&nbsp; (If you really want truncation you can always</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">lying about a value.&nbsp; (If you really want truncation you can always</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">add a slice operation, as in &quot;x.ljust(n)[:n]&quot;.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">add a slice operation, as in &quot;x.ljust(n)[:n]&quot;.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There is another method, &quot;str.zfill()&quot;, which pads a numeric string on</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There is another method, &quot;str.zfill()&quot;, which pads a numeric string on</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the left with zeros.&nbsp; It understands about plus and minus signs:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the left with zeros.&nbsp; It understands about plus and minus signs:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; '12'.zfill(5)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; '12'.zfill(5)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; '00012'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; '00012'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; '-3.14'.zfill(7)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; '-3.14'.zfill(7)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; '-003.14'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; '-003.14'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; '3.14159265359'.zfill(5)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; '3.14159265359'.zfill(5)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; '3.14159265359'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; '3.14159265359'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Basic usage of the &quot;str.format()&quot; method looks like this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Basic usage of the &quot;str.format()&quot; method looks like this:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>'We are the {} who say &quot;{}!&quot;'.format('knights', 'Ni'<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print 'We are the {} who say &quot;{}!&quot;'.format('knights', 'Ni')</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; We are the knights who say &quot;Ni!&quot;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; We are the knights who say &quot;Ni!&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The brackets and characters within them (called format fields) are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The brackets and characters within them (called format fields) are</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">replaced with the objects passed into the &quot;str.format()&quot; method.&nbsp; A</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">replaced with the objects passed into the &quot;str.format()&quot; method.&nbsp; A</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">number in the brackets <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">used</span> <span class="TextSegSigDiff">to</span> refer to the position of the</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">number in the brackets refer<span class="TextSegSigDiff">s</span> to the position of th<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">obj</span>e<span class="TextSegSigDiff">ct</span> <span class="TextSegSigDiff">passed</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">object</span> <span class="TextSegSigDiff">passed</span> into the &quot;str.format()&quot; method.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">into the &quot;str.format()&quot; method.</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>'{0} and {1}'.format('spam', 'eggs'<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print '{0} and {1}'.format('spam', 'eggs')</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; spam and eggs</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; spam and eggs</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>'{1} and {0}'.format('spam', 'eggs'<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print '{1} and {0}'.format('spam', 'eggs')</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; eggs and spam</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; eggs and spam</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If keyword arguments are used in the &quot;str.format()&quot; method, their</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If keyword arguments are used in the &quot;str.format()&quot; method, their</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">values are referred to by using the name of the argument.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">values are referred to by using the name of the argument.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>'This {food} is {adjective}.'.format(</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print 'This {food} is {adjective}.'.format(</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp;&nbsp; food='spam', adjective='absolutely horrible')<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp;&nbsp; food='spam', adjective='absolutely horrible')</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; This spam is absolutely horrible.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; This spam is absolutely horrible.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Positional and keyword arguments can be arbitrarily combined:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Positional and keyword arguments can be arbitrarily combined:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>'The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print 'The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; other='Georg'<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; other='Georg')</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; The story of Bill, Manfred, and Georg.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; The story of Bill, Manfred, and Georg.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&quot;'!<span class="TextSegSigDiff">a</span>'&quot; (apply &quot;<span class="TextSegSigDiff">ascii</span>()&quot;)<span class="TextSegSigDiff">,</span> &quot;'!<span class="TextSegSigDiff">s</span>'&quot; (apply &quot;<span class="TextSegSigDiff">st</span>r()&quot;) and <span class="TextSegSigDiff">&quot;'!r'&quot;</span> <span class="TextSegSigDiff">(apply</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&quot;'!<span class="TextSegSigDiff">s</span>'&quot; (apply &quot;<span class="TextSegSigDiff">str</span>()&quot;) <span class="TextSegSigDiff">and</span> &quot;'!<span class="TextSegSigDiff">r</span>'&quot; (apply &quot;<span class="TextSegSigDiff">rep</span>r()&quot;) <span class="TextSegSigDiff">c</span>an <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">use</span>d <span class="TextSegSigDiff">to</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;repr()&quot;)</span> c<span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">used</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">c</span>onvert the value before it is formatted<span class="TextSegSigDiff">:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">convert the value before it is formatted<span class="TextSegSigDiff">.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">c</span><span class="TextSegSigDiff">onten</span><span class="TextSegSigDiff">ts</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">'eels'</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">import</span> <span class="TextSegSigDiff">math</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">('My</span> <span class="TextSegSigDiff">ho</span>ve<span class="TextSegSigDiff">rcraft</span> is <span class="TextSegSigDiff">fu</span><span class="TextSegSigDiff">ll</span> <span class="TextSegSigDiff">of</span> {}.'.format(<span class="TextSegSigDiff">contents)</span>)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print <span class="TextSegSigDiff">'The</span> v<span class="TextSegSigDiff">alu</span>e <span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">f</span> <span class="TextSegSigDiff">PI</span> is <span class="TextSegSigDiff">approximately</span> {}.'.format(<span class="TextSegSigDiff">ma</span><span class="TextSegSigDiff">th.pi</span>)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">My</span> <span class="TextSegSigDiff">ho</span>ve<span class="TextSegSigDiff">rcraft</span> is <span class="TextSegSigDiff">full</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">e</span>el<span class="TextSegSigDiff">s</span>.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">The</span> v<span class="TextSegSigDiff">alu</span>e <span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">f</span> <span class="TextSegSigDiff">PI</span> is <span class="TextSegSigDiff">appr</span><span class="TextSegSigDiff">oximat</span>el<span class="TextSegSigDiff">y</span> <span class="TextSegSigDiff">3.14159265359</span>.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">('My</span> <span class="TextSegSigDiff">ho</span>ve<span class="TextSegSigDiff">rcraft</span> is <span class="TextSegSigDiff">fu</span><span class="TextSegSigDiff">ll</span> <span class="TextSegSigDiff">of</span> {!r}.'.format(<span class="TextSegSigDiff">contents)</span>)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print <span class="TextSegSigDiff">'The</span> v<span class="TextSegSigDiff">alu</span>e <span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">f</span> <span class="TextSegSigDiff">PI</span> is <span class="TextSegSigDiff">approximately</span> {!r}.'.format(<span class="TextSegSigDiff">ma</span><span class="TextSegSigDiff">th.pi</span>)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">My</span> <span class="TextSegSigDiff">ho</span>ve<span class="TextSegSigDiff">rcraft</span> is <span class="TextSegSigDiff">full</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">'e</span>el<span class="TextSegSigDiff">s'</span>.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">The</span> v<span class="TextSegSigDiff">alu</span>e <span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">f</span> <span class="TextSegSigDiff">PI</span> is <span class="TextSegSigDiff">appr</span><span class="TextSegSigDiff">oximat</span>el<span class="TextSegSigDiff">y</span> <span class="TextSegSigDiff">3.141592653589793</span>.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">An optional &quot;':'&quot; and format specifier can follow the field name. This</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">An optional &quot;':'&quot; and format specifier can follow the field name. This</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">allows greater control over how the value is formatted.&nbsp; The following</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">allows greater control over how the value is formatted.&nbsp; The following</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">example rounds Pi to three places after the decimal.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">example rounds Pi to three places after the decimal.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&gt;&gt;&gt; import math</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&gt;&gt;&gt; import math</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>'The value of PI is approximately {0:.3f}.'.format(math.pi<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&gt;&gt;&gt; print 'The value of PI is approximately {0:.3f}.'.format(math.pi)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">The value of PI is approximately 3.142.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">The value of PI is approximately 3.142.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Passing an integer after the &quot;':'&quot; will cause that field to be a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Passing an integer after the &quot;':'&quot; will cause that field to be a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">minimum number of characters wide.&nbsp; This is useful for making tables</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">minimum number of characters wide.&nbsp; This is useful for making tables</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">pretty.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">pretty.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for name, phone in table.items():</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for name, phone in table.items():</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>'{0:10} ==&gt; {1:10d}'.format(name, phone<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print '{0:10} ==&gt; {1:10d}'.format(name, phone)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Jack&nbsp; &nbsp; &nbsp;&nbsp; ==&gt;&nbsp; &nbsp; &nbsp;&nbsp; 4098</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Jack&nbsp; &nbsp; &nbsp;&nbsp; ==&gt;&nbsp; &nbsp; &nbsp;&nbsp; 4098</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Dcab&nbsp; &nbsp; &nbsp;&nbsp; ==&gt;&nbsp; &nbsp; &nbsp;&nbsp; 7678</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Dcab&nbsp; &nbsp; &nbsp;&nbsp; ==&gt;&nbsp; &nbsp; &nbsp;&nbsp; 7678</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Sjoerd&nbsp; &nbsp;&nbsp; ==&gt;&nbsp; &nbsp; &nbsp;&nbsp; 4127</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Sjoerd&nbsp; &nbsp;&nbsp; ==&gt;&nbsp; &nbsp; &nbsp;&nbsp; 4127</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you have a really long format string that you don't want to split</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you have a really long format string that you don't want to split</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">up, it would be nice if you could reference the variables to be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">up, it would be nice if you could reference the variables to be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">formatted by name instead of by position.&nbsp; This can be done by simply</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">formatted by name instead of by position.&nbsp; This can be done by simply</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">passing the dict and using square brackets &quot;'[]'&quot; to access the keys</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">passing the dict and using square brackets &quot;'[]'&quot; to access the keys</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; print ('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp;&nbsp; 'Dcab: {0[Dcab]:d}'.format(table))</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; 'Dcab: {0[Dcab]:d}'.format(table))</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Jack: 4098; Sjoerd: 4127; Dcab: 8637678</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Jack: 4098; Sjoerd: 4127; Dcab: 8637678</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This could also be done by passing the table as keyword arguments with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This could also be done by passing the table as keyword arguments with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the '**' notation.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the '**' notation.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>'Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print 'Jack: {Jack:d}; Sjoerd: {Sjoerd:d}; Dcab: {Dcab:d}'.format(**table)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; Jack: 4098; Sjoerd: 4127; Dcab: 8637678</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; Jack: 4098; Sjoerd: 4127; Dcab: 8637678</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This is particularly useful in combination with the built-in function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This is particularly useful in combination with the built-in function</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;vars()&quot;, which returns a dictionary containing all local variables.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;vars()&quot;, which returns a dictionary containing all local variables.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For a complete overview of string formatting with &quot;str.format()&quot;, see</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For a complete overview of string formatting with &quot;str.format()&quot;, see</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Format String Syntax.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Format String Syntax.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Old string formatting</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Old string formatting</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">---------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">---------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;%&quot; operator can also be used for string formatting. It interprets</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;%&quot; operator can also be used for string formatting. It interprets</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the left argument much like a &quot;sprintf()&quot;-style format string to be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the left argument much like a &quot;sprintf()&quot;-style format string to be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">applied to the right argument, and returns the string resulting from</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">applied to the right argument, and returns the string resulting from</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">this formatting operation. For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">this formatting operation. For example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import math</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import math</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>'The value of PI is approximately %5.3f.' % math.pi<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print 'The value of PI is approximately %5.3f.' % math.pi</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; The value of PI is approximately 3.142.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; The value of PI is approximately 3.142.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">More information can be found in the <span class="TextSegSigDiff">printf-style</span> String Formatting</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">More information can be found in the String Formatting <span class="TextSegSigDiff">Operations</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">section.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">section.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Reading and Writing Files</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Reading and Writing Files</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=========================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=========================</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&quot;open()&quot; returns a <span class="TextSegSigDiff">*</span>file object<span class="TextSegSigDiff">*</span>, and is most commonly used with two</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&quot;open()&quot; returns a file object, and is most commonly used with two</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">arguments: &quot;open(filename, mode)&quot;.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">arguments: &quot;open(filename, mode)&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f = open('workfile', 'w')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f = open('workfile', 'w')</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">print</span> <span class="TextSegSigDiff">f</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&lt;open</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">'workfile',</span> <span class="TextSegSigDiff">mode</span> <span class="TextSegSigDiff">'w'</span> <span class="TextSegSigDiff">at</span> <span class="TextSegSigDiff">80a0960&gt;</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The first argument is a string containing the filename.&nbsp; The second</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The first argument is a string containing the filename.&nbsp; The second</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">argument is another string containing a few characters describing the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">argument is another string containing a few characters describing the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">way in which the file will be used.&nbsp; *mode* can be &quot;'r'&quot; when the file</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">way in which the file will be used.&nbsp; *mode* can be &quot;'r'&quot; when the file</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">will only be read, &quot;'w'&quot; for only writing (an existing file with the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">will only be read, &quot;'w'&quot; for only writing (an existing file with the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">same name will be erased), and &quot;'a'&quot; opens the file for appending; any</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">same name will be erased), and &quot;'a'&quot; opens the file for appending; any</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">data written to the file is automatically added to the end.&nbsp; &quot;'r+'&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">data written to the file is automatically added to the end.&nbsp; &quot;'r+'&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">opens the file for both reading and writing. The *mode* argument is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">opens the file for both reading and writing. The *mode* argument is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">optional; &quot;'r'&quot; will be assumed if it's omitted.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">optional; &quot;'r'&quot; will be assumed if it's omitted.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Normally,</span> <span class="TextSegSigDiff">files</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">opened</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">*text</span> <span class="TextSegSigDiff">mode*,</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">means,</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">read</span> <span class="TextSegSigDiff">and</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">write</span> <span class="TextSegSigDiff">strings</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">file,</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">encoded</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">specific</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">encoding.</span> <span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">encoding</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">specified,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">default</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">platform</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">depe</span>nd<span class="TextSegSigDiff">ent</span> <span class="TextSegSigDiff">(see</span> &quot;<span class="TextSegSigDiff">open()&quot;).</span> <span class="TextSegSigDiff">&quot;</span>'b'&quot; appended to the mode opens the file in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">On</span> <span class="TextSegSigDiff">Wi</span>nd<span class="TextSegSigDiff">ow</span><span class="TextSegSigDiff">s,</span> &quot;'b'&quot; appended to the mode opens the file in <span class="TextSegSigDiff">binary</span> <span class="TextSegSigDiff">mode,</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*binary</span> <span class="TextSegSigDiff">mode*:</span> <span class="TextSegSigDiff">now</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">data</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">read</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">written</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">form</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">bytes</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">objects.</span>&nbsp; <span class="TextSegSigDiff">This</span> <span class="TextSegSigDiff">mode</span> <span class="TextSegSigDiff">should</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">used</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">all</span> <span class="TextSegSigDiff">files</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">don't</span> <span class="TextSegSigDiff">contain</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">text.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">there</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">also</span> <span class="TextSegSigDiff">modes</span> <span class="TextSegSigDiff">like</span> <span class="TextSegSigDiff">&quot;'rb'&quot;,</span> <span class="TextSegSigDiff">&quot;'wb'&quot;,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">&quot;'r+b'&quot;.</span>&nbsp; <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">on</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">In <span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">ext</span> <span class="TextSegSigDiff">mode,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">defaul</span>t w<span class="TextSegSigDiff">h</span>en <span class="TextSegSigDiff">re</span>adin<span class="TextSegSigDiff">g</span> <span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">s</span> t<span class="TextSegSigDiff">o</span> <span class="TextSegSigDiff">c</span><span class="TextSegSigDiff">onvert</span> <span class="TextSegSigDiff">platform-specific</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">W</span>in<span class="TextSegSigDiff">dows</span> <span class="TextSegSigDiff">makes</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">distinction</span> <span class="TextSegSigDiff">be</span>tw<span class="TextSegSigDiff">e</span>en <span class="TextSegSigDiff">text</span> a<span class="TextSegSigDiff">n</span>d <span class="TextSegSigDiff">b</span>in<span class="TextSegSigDiff">ary</span> <span class="TextSegSigDiff">files;</span> t<span class="TextSegSigDiff">he</span> <span class="TextSegSigDiff">end-o</span><span class="TextSegSigDiff">f</span><span class="TextSegSigDiff">-</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">endings</span> <span class="TextSegSigDiff">(&quot;\n&quot;</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">Unix,</span> <span class="TextSegSigDiff">&quot;\r\n&quot;</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">Windows)</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">just</span> <span class="TextSegSigDiff">&quot;\n&quot;.</span>&nbsp; <span class="TextSegSigDiff">When</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">w</span><span class="TextSegSigDiff">ri</span><span class="TextSegSigDiff">ting</span> in text <span class="TextSegSigDiff">mode,</span> <span class="TextSegSigDiff">th</span>e <span class="TextSegSigDiff">def</span>au<span class="TextSegSigDiff">l</span>t i<span class="TextSegSigDiff">s</span> t<span class="TextSegSigDiff">o</span> <span class="TextSegSigDiff">conv</span>er<span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">occurrences</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">&quot;\n&quot;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">characters</span> in text <span class="TextSegSigDiff">files</span> <span class="TextSegSigDiff">ar</span>e au<span class="TextSegSigDiff">toma</span>ti<span class="TextSegSigDiff">cally</span> <span class="TextSegSigDiff">al</span>ter<span class="TextSegSigDiff">ed</span> <span class="TextSegSigDiff">slightly</span> <span class="TextSegSigDiff">wh</span><span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">n</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">b</span><span class="TextSegSigDiff">ack</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">platf</span>or<span class="TextSegSigDiff">m-specific</span> <span class="TextSegSigDiff">l</span><span class="TextSegSigDiff">ine</span> e<span class="TextSegSigDiff">ndings</span>.&nbsp; This behind-the-scenes</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">data</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">read</span> or <span class="TextSegSigDiff">writt</span>e<span class="TextSegSigDiff">n</span>.&nbsp; This behind-the-scenes <span class="TextSegSigDiff">modification</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">file</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">modification</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">file</span> data is fine for text files, but <span class="TextSegSigDiff">w</span>ill corrupt</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">data is fine for <span class="TextSegSigDiff">ASCII</span> text files, but i<span class="TextSegSigDiff">t'</span>ll corrupt <span class="TextSegSigDiff">binary</span> <span class="TextSegSigDiff">data</span> <span class="TextSegSigDiff">like</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">binary</span> <span class="TextSegSigDiff">data</span> <span class="TextSegSigDiff">like</span> that in &quot;JPEG&quot; or &quot;EXE&quot; files.&nbsp; Be very careful to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">that in &quot;JPEG&quot; or &quot;EXE&quot; files.&nbsp; Be very careful to <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">binary</span> <span class="TextSegSigDiff">mode</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">binary</span> <span class="TextSegSigDiff">mode</span> when reading and writing such files.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">when reading and writing such files.&nbsp; <span class="TextSegSigDiff">On</span> <span class="TextSegSigDiff">Unix,</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">doesn't</span> <span class="TextSegSigDiff">hurt</span> <span class="TextSegSigDiff">to</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">It</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">good</span> <span class="TextSegSigDiff">practice</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;with&quot;</span> <span class="TextSegSigDiff">keyword</span> <span class="TextSegSigDiff">when</span> <span class="TextSegSigDiff">dealing</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">file</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">objects.</span>&nbsp; <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">advantage</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">properly</span> <span class="TextSegSigDiff">closed</span> <span class="TextSegSigDiff">after</span> <span class="TextSegSigDiff">its</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">suite</span> <span class="TextSegSigDiff">finishes,</span> <span class="TextSegSigDiff">even</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">exception</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">raised</span> <span class="TextSegSigDiff">at</span> <span class="TextSegSigDiff">some</span> <span class="TextSegSigDiff">point.</span>&nbsp; <span class="TextSegSigDiff">Using</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;with&quot;</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">also</span> <span class="TextSegSigDiff">much</span> <span class="TextSegSigDiff">shorter</span> <span class="TextSegSigDiff">than</span> <span class="TextSegSigDiff">writing</span> <span class="TextSegSigDiff">equivalent</span> <span class="TextSegSigDiff">&quot;try&quot;-&quot;finally&quot;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">blocks:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">open('workfile')</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">f:</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">read_data</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">f.read()</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">f.closed</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">True</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">you're</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">using</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;with&quot;</span> <span class="TextSegSigDiff">keyword,</span> <span class="TextSegSigDiff">then</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">should</span> <span class="TextSegSigDiff">call</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;f.close()&quot;</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">close</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">immediately</span> <span class="TextSegSigDiff">free</span> <span class="TextSegSigDiff">up</span> <span class="TextSegSigDiff">any</span> <span class="TextSegSigDiff">system</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">resources</span> <span class="TextSegSigDiff">used</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">it.</span> <span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">don't</span> <span class="TextSegSigDiff">explicitly</span> <span class="TextSegSigDiff">close</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">file,</span> <span class="TextSegSigDiff">Python's</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">garbage</span> <span class="TextSegSigDiff">collector</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">eventually</span> <span class="TextSegSigDiff">destroy</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">object</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">close</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">o</span>pen <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">you,</span> <span class="TextSegSigDiff">bu</span>t <span class="TextSegSigDiff">t</span>he <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">may</span> <span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">tay</span> <span class="TextSegSigDiff">open</span> for <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">whil</span><span class="TextSegSigDiff">e.</span>&nbsp; <span class="TextSegSigDiff">Another</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">ap</span>pen<span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">&quot;'b'&quot;</span> <span class="TextSegSigDiff">to</span> the <span class="TextSegSigDiff">mode,</span> <span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">plat</span>for<span class="TextSegSigDiff">m-</span><span class="TextSegSigDiff">independe</span><span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">tly</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">risk</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">different</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">implementations</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">do</span> <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">clean-up</span> <span class="TextSegSigDiff">at</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">different</span> <span class="TextSegSigDiff">times.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">all</span> <span class="TextSegSigDiff">binary</span> <span class="TextSegSigDiff">files.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">After</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">object</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">closed,</span> <span class="TextSegSigDiff">either</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">&quot;with&quot;</span> <span class="TextSegSigDiff">statement</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">by</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">calling</span> <span class="TextSegSigDiff">&quot;f.close()&quot;,</span> <span class="TextSegSigDiff">attempts</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">object</span> <span class="TextSegSigDiff">will</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">automatically</span> <span class="TextSegSigDiff">fail.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">f.close()</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">f.read()</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Traceback</span> <span class="TextSegSigDiff">(most</span> <span class="TextSegSigDiff">recent</span> <span class="TextSegSigDiff">call</span> <span class="TextSegSigDiff">last):</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">File</span> <span class="TextSegSigDiff">&quot;&lt;stdin&gt;&quot;,</span> <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">1,</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">&lt;module&gt;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">ValueError:</span> <span class="TextSegSigDiff">I/O</span> <span class="TextSegSigDiff">operation</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">closed</span> <span class="TextSegSigDiff">file</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Methods of File Objects</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Methods of File Objects</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The rest of the examples in this section will assume that a file</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The rest of the examples in this section will assume that a file</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">object called &quot;f&quot; has already been created.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">object called &quot;f&quot; has already been created.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">To read a file's contents, call &quot;f.read(size)&quot;, which reads some</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To read a file's contents, call &quot;f.read(size)&quot;, which reads some</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">quantity of data and returns it as a string <span class="TextSegSigDiff">(</span><span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">text</span> <span class="TextSegSigDiff">mode)</span> o<span class="TextSegSigDiff">r</span> <span class="TextSegSigDiff">bytes</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">quantity of data and returns it as a string<span class="TextSegSigDiff">.</span>&nbsp; <span class="TextSegSigDiff">*size*</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">an</span> o<span class="TextSegSigDiff">p</span><span class="TextSegSigDiff">tional</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">obje</span><span class="TextSegSigDiff">ct</span> <span class="TextSegSigDiff">(in</span> <span class="TextSegSigDiff">bin</span>ar<span class="TextSegSigDiff">y</span> m<span class="TextSegSigDiff">ode)</span>. *size* is <span class="TextSegSigDiff">an</span> o<span class="TextSegSigDiff">p</span><span class="TextSegSigDiff">ti</span>on<span class="TextSegSigDiff">al</span> <span class="TextSegSigDiff">numeric</span> <span class="TextSegSigDiff">argum</span>ent<span class="TextSegSigDiff">.</span>&nbsp; <span class="TextSegSigDiff">When</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">numeric</span> ar<span class="TextSegSigDiff">gu</span>m<span class="TextSegSigDiff">ent</span>.&nbsp; <span class="TextSegSigDiff">When</span> *size* is o<span class="TextSegSigDiff">mitted</span> o<span class="TextSegSigDiff">r</span> n<span class="TextSegSigDiff">egative,</span> <span class="TextSegSigDiff">th</span><span class="TextSegSigDiff">e</span> ent<span class="TextSegSigDiff">ir</span><span class="TextSegSigDiff">e</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*size*</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">omitted</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">negative,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">entire</span> contents of the file will be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">contents of the file will b<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">r</span>e<span class="TextSegSigDiff">ad</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">returned;</span> <span class="TextSegSigDiff">it's</span> <span class="TextSegSigDiff">your</span> <span class="TextSegSigDiff">problem</span> <span class="TextSegSigDiff">if</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">read</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">returned;</span> <span class="TextSegSigDiff">it's</span> <span class="TextSegSigDiff">your</span> <span class="TextSegSigDiff">problem</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">t</span>he file is twice as large <span class="TextSegSigDiff">a</span>s</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">t</span>he file is twice as large <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">your</span> <span class="TextSegSigDiff">machine's</span> <span class="TextSegSigDiff">memory.</span> <span class="TextSegSigDiff">Otherwi</span>s<span class="TextSegSigDiff">e,</span> <span class="TextSegSigDiff">at</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">your</span> <span class="TextSegSigDiff">machine's</span> <span class="TextSegSigDiff">memory.</span> <span class="TextSegSigDiff">Otherwise,</span> <span class="TextSegSigDiff">at</span> most *size* bytes are read and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">most *size* bytes are read and <span class="TextSegSigDiff">returned.</span>&nbsp; <span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">end</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">has</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">returned.</span> <span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">end</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">has</span> been reached, &quot;f.read()&quot; will</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">been reached, &quot;f.read()&quot; will <span class="TextSegSigDiff">return</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">empty</span> <span class="TextSegSigDiff">string</span> <span class="TextSegSigDiff">(&quot;&quot;&quot;&quot;).</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">return</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">empty</span> <span class="TextSegSigDiff">string</span> <span class="TextSegSigDiff">(&quot;''&quot;).</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.read()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.read()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'This is the entire file.\n'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'This is the entire file.\n'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.read()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.read()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ''</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ''</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;f.readline()&quot; reads a single line from the file; a newline character</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;f.readline()&quot; reads a single line from the file; a newline character</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(&quot;\n&quot;) is left at the end of the string, and is only omitted on the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(&quot;\n&quot;) is left at the end of the string, and is only omitted on the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">last line of the file if the file doesn't end in a newline.&nbsp; This</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">last line of the file if the file doesn't end in a newline.&nbsp; This</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">makes the return value unambiguous; if &quot;f.readline()&quot; returns an empty</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">makes the return value unambiguous; if &quot;f.readline()&quot; returns an empty</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">string, the end of the file has been reached, while a blank line is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">string, the end of the file has been reached, while a blank line is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">represented by &quot;'\n'&quot;, a string containing only a single newline.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">represented by &quot;'\n'&quot;, a string containing only a single newline.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.readline()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.readline()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'This is the first line of the file.\n'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'This is the first line of the file.\n'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.readline()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.readline()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'Second line of the file\n'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'Second line of the file\n'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.readline()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.readline()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ''</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ''</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For reading lines from a file, you can loop over the file object. This</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For reading lines from a file, you can loop over the file object. This</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is memory efficient, fast, and leads to simple code:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is memory efficient, fast, and leads to simple code:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for line in f:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for line in f:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>line, <span class="TextSegSigDiff">end='')</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print line,</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; This is the first line of the file.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; This is the first line of the file.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Second line of the file</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Second line of the file</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you want to read all the lines of a file in a list you can also use</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you want to read all the lines of a file in a list you can also use</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;list(f)&quot; or &quot;f.readlines()&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;list(f)&quot; or &quot;f.readlines()&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&quot;f.write(string)&quot; writes the contents of *string* to the file,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;f.write(string)&quot; writes the contents of *string* to the file,</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">returning <span class="TextSegSigDiff">the</span> n<span class="TextSegSigDiff">umber</span> o<span class="TextSegSigDiff">f</span> <span class="TextSegSigDiff">characters</span> <span class="TextSegSigDiff">written</span>.</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">returning <span class="TextSegSigDiff">&quot;</span>No<span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">e&quot;</span>.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.write('This is a test\n')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.write('This is a test\n')</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">15</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">Ot<span class="TextSegSigDiff">her</span> <span class="TextSegSigDiff">type</span>s o<span class="TextSegSigDiff">f</span> o<span class="TextSegSigDiff">bjec</span>ts need to be converted <span class="TextSegSigDiff">--</span> <span class="TextSegSigDiff">either</span> to a <span class="TextSegSigDiff">string</span> <span class="TextSegSigDiff">(in</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">T</span>o <span class="TextSegSigDiff">wri</span>t<span class="TextSegSigDiff">e</span> so<span class="TextSegSigDiff">mething</span> o<span class="TextSegSigDiff">ther</span> t<span class="TextSegSigDiff">han</span> <span class="TextSegSigDiff">a</span> s<span class="TextSegSigDiff">tring,</span> <span class="TextSegSigDiff">it</span> need<span class="TextSegSigDiff">s</span> to be converted to a</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">tex</span>t <span class="TextSegSigDiff">mode)</span> <span class="TextSegSigDiff">o</span>r <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">bytes</span> <span class="TextSegSigDiff">object</span> <span class="TextSegSigDiff">(</span>in <span class="TextSegSigDiff">binary</span> <span class="TextSegSigDiff">mode)</span> <span class="TextSegSigDiff">--</span> <span class="TextSegSigDiff">before</span> <span class="TextSegSigDiff">writing</span> <span class="TextSegSigDiff">them</span>:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">s</span>trin<span class="TextSegSigDiff">g</span> <span class="TextSegSigDiff">fi</span><span class="TextSegSigDiff">rs</span><span class="TextSegSigDiff">t</span>:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; value = ('the answer', 42)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; value = ('the answer', 42)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; s = str(value)&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">convert</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">tuple</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">string</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; s = str(value)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.write(s)</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.write(s)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">18</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&quot;f.tell()&quot; returns an integer giving the file object's current</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;f.tell()&quot; returns an integer giving the file object's current</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">position in the file <span class="TextSegSigDiff">rep</span><span class="TextSegSigDiff">resent</span>ed <span class="TextSegSigDiff">as</span> n<span class="TextSegSigDiff">umber</span> <span class="TextSegSigDiff">of</span> bytes from the beginning</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">position in the file<span class="TextSegSigDiff">,</span> <span class="TextSegSigDiff">measur</span>ed <span class="TextSegSigDiff">i</span>n bytes from the beginning <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">when</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">binary</span> <span class="TextSegSigDiff">mode</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">opaque</span> <span class="TextSegSigDiff">number</span> <span class="TextSegSigDiff">when</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">text</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">mode.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">To change the file object's position, use &quot;f.seek(offset, <span class="TextSegSigDiff">from_what)&quot;.</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">file.</span>&nbsp; To change the file object's position, use &quot;f.seek(offset,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">The position is computed from adding *offset* to a <span class="TextSegSigDiff">reference</span> <span class="TextSegSigDiff">point;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">from_wha</span>t<span class="TextSegSigDiff">)&quot;.</span>&nbsp; <span class="TextSegSigDiff">T</span>he position is computed from adding *offset* to a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">the reference point is selected by the *from_what* <span class="TextSegSigDiff">argument.</span>&nbsp; <span class="TextSegSigDiff">A</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">reference</span> <span class="TextSegSigDiff">point;</span> the reference point is selected by the *from_what*</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">*from_what* value of 0 measures from the beginning of the <span class="TextSegSigDiff">file,</span> <span class="TextSegSigDiff">1</span> <span class="TextSegSigDiff">uses</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">argument.</span>&nbsp; <span class="TextSegSigDiff">A</span> *from_what* value of 0 measures from the beginning of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">the current file position, and 2 uses the end of the fil<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">th</span>e</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">file,</span> <span class="TextSegSigDiff">1</span> <span class="TextSegSigDiff">uses</span> the current file position, and 2 uses the end of the file</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">reference point.&nbsp; *from_what* can be omitted and defaults to 0, <span class="TextSegSigDiff">using</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">the</span> reference point.&nbsp; *from_what* can be omitted and defaults to 0,</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">the beginning of the file as the reference point.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">using</span> the beginning of the file as the reference point.</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; f = open('workfile', 'r<span class="TextSegSigDiff">b</span>+')</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; f = open('workfile', 'r+')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; f.write(<span class="TextSegSigDiff">b</span>'0123456789abcdef')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; f.write('0123456789abcdef')</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">16</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.seek(5)&nbsp; &nbsp; &nbsp; # Go to the 6th byte in the file</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.seek(5)&nbsp; &nbsp; &nbsp; # Go to the 6th byte in the file</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">5</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.read(1)</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.read(1)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">b</span>'5'</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; '5'</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.seek(-3, 2)&nbsp; # Go to the 3rd byte before the end</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.seek(-3, 2)&nbsp; # Go to the 3rd byte before the end</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">13</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.read(1)</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; f.read(1)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">b</span>'d'</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; 'd'</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">I</span>n <span class="TextSegSigDiff">text</span> <span class="TextSegSigDiff">files</span> <span class="TextSegSigDiff">(thos</span>e o<span class="TextSegSigDiff">pe</span>ne<span class="TextSegSigDiff">d</span> with<span class="TextSegSigDiff">out</span> <span class="TextSegSigDiff">a</span> &quot;<span class="TextSegSigDiff">b</span>&quot; <span class="TextSegSigDiff">in</span> t<span class="TextSegSigDiff">he</span> <span class="TextSegSigDiff">m</span><span class="TextSegSigDiff">od</span>e <span class="TextSegSigDiff">s</span>t<span class="TextSegSigDiff">ring),</span> <span class="TextSegSigDiff">only</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Whe</span>n <span class="TextSegSigDiff">y</span><span class="TextSegSigDiff">ou'r</span>e <span class="TextSegSigDiff">d</span>one with <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">file,</span> <span class="TextSegSigDiff">call</span> &quot;<span class="TextSegSigDiff">f.close()</span>&quot; t<span class="TextSegSigDiff">o</span> <span class="TextSegSigDiff">clos</span>e <span class="TextSegSigDiff">i</span>t <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">free</span> <span class="TextSegSigDiff">up</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">s<span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">eks</span> <span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">el</span><span class="TextSegSigDiff">ative</span> <span class="TextSegSigDiff">to</span> the <span class="TextSegSigDiff">b</span><span class="TextSegSigDiff">eginning</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> file ar<span class="TextSegSigDiff">e</span> all<span class="TextSegSigDiff">owed</span> <span class="TextSegSigDiff">(the</span> <span class="TextSegSigDiff">exceptio</span>n</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">any</span> s<span class="TextSegSigDiff">ystem</span> <span class="TextSegSigDiff">re</span><span class="TextSegSigDiff">sources</span> <span class="TextSegSigDiff">tak</span><span class="TextSegSigDiff">en</span> <span class="TextSegSigDiff">up</span> <span class="TextSegSigDiff">by</span> the <span class="TextSegSigDiff">ope</span><span class="TextSegSigDiff">n</span> file<span class="TextSegSigDiff">.</span>&nbsp; A<span class="TextSegSigDiff">fte</span>r <span class="TextSegSigDiff">c</span>all<span class="TextSegSigDiff">i</span>n<span class="TextSegSigDiff">g</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;f.close()&quot;,</span> <span class="TextSegSigDiff">attempts</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">object</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">automatically</span> <span class="TextSegSigDiff">fail.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">being</span> <span class="TextSegSigDiff">seeking</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">very</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">end</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">&quot;seek(0,</span> <span class="TextSegSigDiff">2)&quot;)</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">only</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">f.close()</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">f.read()</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Traceback</span> <span class="TextSegSigDiff">(most</span> <span class="TextSegSigDiff">recent</span> <span class="TextSegSigDiff">call</span> <span class="TextSegSigDiff">last):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">File</span> <span class="TextSegSigDiff">&quot;&lt;stdin&gt;&quot;,</span> <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">1,</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">&lt;module&gt;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">ValueError:</span> <span class="TextSegSigDiff">I/O</span> <span class="TextSegSigDiff">operation</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">closed</span> <span class="TextSegSigDiff">file</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">valid</span> <span class="TextSegSigDiff">*offset*</span> <span class="TextSegSigDiff">values</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">those</span> <span class="TextSegSigDiff">returned</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;f.tell()&quot;,</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">zero.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Any</span> <span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">th</span><span class="TextSegSigDiff">er</span> <span class="TextSegSigDiff">*off</span>set<span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">p</span><span class="TextSegSigDiff">roduc</span><span class="TextSegSigDiff">es</span> <span class="TextSegSigDiff">un</span>de<span class="TextSegSigDiff">f</span>in<span class="TextSegSigDiff">ed</span> <span class="TextSegSigDiff">be</span><span class="TextSegSigDiff">haviour.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">It</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">good</span> <span class="TextSegSigDiff">practice</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">u</span>se t<span class="TextSegSigDiff">he</span> <span class="TextSegSigDiff">&quot;with&quot;</span> <span class="TextSegSigDiff">k</span><span class="TextSegSigDiff">eywor</span><span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">when</span> de<span class="TextSegSigDiff">al</span>in<span class="TextSegSigDiff">g</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">file</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">objects.</span>&nbsp; <span class="TextSegSigDiff">This</span> <span class="TextSegSigDiff">has</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">advantage</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">properly</span> <span class="TextSegSigDiff">closed</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">after</span> <span class="TextSegSigDiff">its</span> <span class="TextSegSigDiff">suite</span> <span class="TextSegSigDiff">finishes,</span> <span class="TextSegSigDiff">even</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">exception</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">raised</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">way.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">It</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">also</span> <span class="TextSegSigDiff">much</span> <span class="TextSegSigDiff">shorter</span> <span class="TextSegSigDiff">than</span> <span class="TextSegSigDiff">writing</span> <span class="TextSegSigDiff">equivalent</span> <span class="TextSegSigDiff">&quot;try&quot;-&quot;finally&quot;</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">blocks:</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">open('workfile',</span> <span class="TextSegSigDiff">'r')</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">f:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">read_data</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">f.read()</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">f.closed</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">True</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">File objects have some additional methods, such as &quot;isatty()&quot; and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">File objects have some additional methods, such as &quot;isatty()&quot; and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;truncate()&quot; which are less frequently used; consult the Library</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;truncate()&quot; which are less frequently used; consult the Library</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Reference for a complete guide to file objects.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Reference for a complete guide to file objects.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Saving structured data with &quot;json&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Saving structured data with &quot;json&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Strings can easily be written to and read from a file.&nbsp; Numbers take a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Strings can easily be written to and read from a file.&nbsp; Numbers take a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">bit more effort, since the &quot;read()&quot; method only returns strings, which</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">bit more effort, since the &quot;read()&quot; method only returns strings, which</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">will have to be passed to a function like &quot;int()&quot;, which takes a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">will have to be passed to a function like &quot;int()&quot;, which takes a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">string like &quot;'123'&quot; and returns its numeric value 123.&nbsp; When you want</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">string like &quot;'123'&quot; and returns its numeric value 123.&nbsp; When you want</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to save more complex data types like nested lists and dictionaries,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to save more complex data types like nested lists and dictionaries,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">parsing and serializing by hand becomes complicated.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">parsing and serializing by hand becomes complicated.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Rather than having users constantly writing and debugging code to save</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Rather than having users constantly writing and debugging code to save</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">complicated data types to files, Python allows you to use the popular</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">complicated data types to files, Python allows you to use the popular</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">data interchange format called JSON (JavaScript Object Notation).&nbsp; The</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">data interchange format called JSON (JavaScript Object Notation).&nbsp; The</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">standard module called &quot;json&quot; can take Python data hierarchies, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">standard module called &quot;json&quot; can take Python data hierarchies, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">convert them to string representations; this process is called</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">convert them to string representations; this process is called</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*serializing*.&nbsp; Reconstructing the data from the string representation</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*serializing*.&nbsp; Reconstructing the data from the string representation</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is called *deserializing*.&nbsp; Between serializing and deserializing, the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is called *deserializing*.&nbsp; Between serializing and deserializing, the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">string representing the object may have been stored in a file or data,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">string representing the object may have been stored in a file or data,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">or sent over a network connection to some distant machine.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">or sent over a network connection to some distant machine.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note: The JSON format is commonly used by modern applications to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note: The JSON format is commonly used by modern applications to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; allow for data exchange.&nbsp; Many programmers are already familiar with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; allow for data exchange.&nbsp; Many programmers are already familiar with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; it, which makes it a good choice for interoperability.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; it, which makes it a good choice for interoperability.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you have an object &quot;x&quot;, you can view its JSON string representation</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you have an object &quot;x&quot;, you can view its JSON string representation</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">with a simple line of code:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">with a simple line of code:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import json</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import json</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; json.dumps([1, 'simple', 'list'])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; json.dumps([1, 'simple', 'list'])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; '[1, &quot;simple&quot;, &quot;list&quot;]'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; '[1, &quot;simple&quot;, &quot;list&quot;]'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">Another variant of the &quot;dumps()&quot; function, called &quot;dump()&quot;, simply</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Another variant of the &quot;dumps()&quot; function, called &quot;dump()&quot;, simply</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">serializes the object to a <span class="TextSegSigDiff">*text</span> file<span class="TextSegSigDiff">*</span>.&nbsp; So if &quot;f&quot; is a *<span class="TextSegSigDiff">text</span> fil<span class="TextSegSigDiff">e</span>*</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">serializes the object to a file.&nbsp; So if &quot;f&quot; is a *fil<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">object</span>* <span class="TextSegSigDiff">opened</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">object</span> <span class="TextSegSigDiff">opened</span> for writing, we can do this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">for writing, we can do this:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; json.dump(x, f)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; json.dump(x, f)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">To decode the object again, if &quot;f&quot; is a *<span class="TextSegSigDiff">text</span> file<span class="TextSegSigDiff">*</span> object which has</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">To decode the object again, if &quot;f&quot; is a *file object<span class="TextSegSigDiff">*</span> which has <span class="TextSegSigDiff">been</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">been</span> opened for reading:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">opened for reading:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; x = json.load(f)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; x = json.load(f)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This simple serialization technique can handle lists and dictionaries,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This simple serialization technique can handle lists and dictionaries,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">but serializing arbitrary class instances in JSON requires a bit of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">but serializing arbitrary class instances in JSON requires a bit of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">extra effort. The reference for the &quot;json&quot; module contains an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">extra effort. The reference for the &quot;json&quot; module contains an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">explanation of this.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">explanation of this.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">See also: &quot;pickle&quot; - the pickle module</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">See also: &quot;pickle&quot; - the pickle module</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; Contrary to JSON, *pickle* is a protocol which allows the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; Contrary to JSON, *pickle* is a protocol which allows the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; serialization of arbitrarily complex Python objects.&nbsp; As such, it is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; serialization of arbitrarily complex Python objects.&nbsp; As such, it is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; specific to Python and cannot be used to communicate with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; specific to Python and cannot be used to communicate with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; applications written in other languages.&nbsp; It is also insecure by</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; applications written in other languages.&nbsp; It is also insecure by</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; default: deserializing pickle data coming from an untrusted source</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; default: deserializing pickle data coming from an untrusted source</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; can execute arbitrary code, if the data was crafted by a skilled</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; can execute arbitrary code, if the data was crafted by a skilled</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp; attacker.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; attacker.</td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\tutorial\interactive.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Interactive Input Editing and History Substitution</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Interactive Input Editing and History Substitution</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">**************************************************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">**************************************************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Some versions of the Python interpreter support editing of the current</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Some versions of the Python interpreter support editing of the current</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">input line and history substitution, similar to facilities found in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">input line and history substitution, similar to facilities found in</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">the Korn shell and the GNU Bash shell.&nbsp; This is implemented using the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the Korn shell and the GNU Bash shell.&nbsp; This is implemented using the</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">GNU Readline library, which supports <span class="TextSegSigDiff">v</span><span class="TextSegSigDiff">arious</span> style<span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">of</span> editing.&nbsp; <span class="TextSegSigDiff">This</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">GNU Readline library, which supports <span class="TextSegSigDiff">Emacs-</span><span class="TextSegSigDiff">style</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">vi-</span>style editing.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">library has its own documentation which <span class="TextSegSigDiff">we</span> won't duplicate here<span class="TextSegSigDiff">.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">This</span> library has its own documentation which <span class="TextSegSigDiff">I</span> won't duplicate here<span class="TextSegSigDiff">;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">however,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">basics</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">easily</span> <span class="TextSegSigDiff">explained.</span>&nbsp; <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">interactive</span> <span class="TextSegSigDiff">editing</span> <span class="TextSegSigDiff">and</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">history</span> <span class="TextSegSigDiff">described</span> <span class="TextSegSigDiff">here</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">optionally</span> <span class="TextSegSigDiff">available</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Unix</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">Cygwin</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">versions</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">interpreter.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">This</span> <span class="TextSegSigDiff">chapter</span> <span class="TextSegSigDiff">does</span> <span class="TextSegSigDiff">*not*</span> <span class="TextSegSigDiff">document</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">editing</span> <span class="TextSegSigDiff">facilities</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">Mark</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Hammond's</span> <span class="TextSegSigDiff">PythonWin</span> <span class="TextSegSigDiff">package</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Tk-based</span> <span class="TextSegSigDiff">environment,</span> <span class="TextSegSigDiff">IDLE,</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">distributed</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">Python.</span> <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">command</span> <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">history</span> <span class="TextSegSigDiff">recall</span> <span class="TextSegSigDiff">which</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">operates</span> <span class="TextSegSigDiff">within</span> <span class="TextSegSigDiff">DOS</span> <span class="TextSegSigDiff">boxes</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">NT</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">some</span> <span class="TextSegSigDiff">other</span> <span class="TextSegSigDiff">DOS</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">Windows</span> <span class="TextSegSigDiff">flavors</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">yet</span> <span class="TextSegSigDiff">another</span> <span class="TextSegSigDiff">beast.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Tab</span> <span class="TextSegSigDiff">Completion</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">History</span> <span class="TextSegSigDiff">Editing</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Line</span> <span class="TextSegSigDiff">Editing</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">============</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">supported,</span> <span class="TextSegSigDiff">input</span> <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">editing</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">active</span> <span class="TextSegSigDiff">whenever</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">interpreter</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">prints</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">primary</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">secondary</span> <span class="TextSegSigDiff">prompt.</span>&nbsp; <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">current</span> <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">edited</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">using</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">conventional</span> <span class="TextSegSigDiff">Emacs</span> <span class="TextSegSigDiff">control</span> <span class="TextSegSigDiff">characters.</span>&nbsp; <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">most</span> <span class="TextSegSigDiff">important</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">these</span> <span class="TextSegSigDiff">are:</span> <span class="TextSegSigDiff">&quot;C-A&quot;</span> <span class="TextSegSigDiff">(Control-A)</span> <span class="TextSegSigDiff">moves</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">cursor</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">beginning</span> <span class="TextSegSigDiff">of</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">line,</span> <span class="TextSegSigDiff">&quot;C-E&quot;</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">end,</span> <span class="TextSegSigDiff">&quot;C-B&quot;</span> <span class="TextSegSigDiff">moves</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">one</span> <span class="TextSegSigDiff">position</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">left,</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;C-F&quot;</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">right.</span>&nbsp; <span class="TextSegSigDiff">Backspace</span> <span class="TextSegSigDiff">erases</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">character</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">left</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">cursor,</span> <span class="TextSegSigDiff">&quot;C-D&quot;</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">character</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">its</span> <span class="TextSegSigDiff">right.</span> <span class="TextSegSigDiff">&quot;C-K&quot;</span> <span class="TextSegSigDiff">kills</span> <span class="TextSegSigDiff">(erases)</span> <span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">rest</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">right</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">cursor,</span> <span class="TextSegSigDiff">&quot;C-Y&quot;</span> <span class="TextSegSigDiff">yanks</span> <span class="TextSegSigDiff">back</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">last</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">killed</span> <span class="TextSegSigDiff">string.</span> <span class="TextSegSigDiff">&quot;C-underscore&quot;</span> <span class="TextSegSigDiff">undoes</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">last</span> <span class="TextSegSigDiff">change</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">made;</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">can</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">repeated</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">cumulative</span> <span class="TextSegSigDiff">effect.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">History</span> <span class="TextSegSigDiff">Substitution</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">====================<span class="TextSegSigDiff">==============</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">====================</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">History</span> <span class="TextSegSigDiff">substitution</span> <span class="TextSegSigDiff">works</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">follows.</span>&nbsp; <span class="TextSegSigDiff">All</span> <span class="TextSegSigDiff">non-empty</span> <span class="TextSegSigDiff">input</span> <span class="TextSegSigDiff">lines</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">issued</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">saved</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">history</span> <span class="TextSegSigDiff">buffer,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">when</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">new</span> <span class="TextSegSigDiff">prompt</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">given</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">positioned</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">new</span> <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">at</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">bottom</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">buffer.</span> <span class="TextSegSigDiff">&quot;C-P&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">moves</span> <span class="TextSegSigDiff">one</span> <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">up</span> <span class="TextSegSigDiff">(back)</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">history</span> <span class="TextSegSigDiff">buffer,</span> <span class="TextSegSigDiff">&quot;C-N&quot;</span> <span class="TextSegSigDiff">moves</span> <span class="TextSegSigDiff">one</span> <span class="TextSegSigDiff">down.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Any</span> <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">history</span> <span class="TextSegSigDiff">buffer</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">edited;</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">asterisk</span> <span class="TextSegSigDiff">appears</span> <span class="TextSegSigDiff">in</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">front</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">prompt</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">mark</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">modified.</span>&nbsp; <span class="TextSegSigDiff">Pressing</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;Return&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">key</span> <span class="TextSegSigDiff">passes</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">current</span> <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">interpreter.</span>&nbsp; <span class="TextSegSigDiff">&quot;C-R&quot;</span> <span class="TextSegSigDiff">starts</span> <span class="TextSegSigDiff">an</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">incremental</span> <span class="TextSegSigDiff">reverse</span> <span class="TextSegSigDiff">search;</span> <span class="TextSegSigDiff">&quot;C-S&quot;</span> <span class="TextSegSigDiff">starts</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">forward</span> <span class="TextSegSigDiff">search.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Key</span> <span class="TextSegSigDiff">Bindings</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">============</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">key</span> <span class="TextSegSigDiff">bindings</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">some</span> <span class="TextSegSigDiff">other</span> <span class="TextSegSigDiff">parameters</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Readline</span> <span class="TextSegSigDiff">library</span> <span class="TextSegSigDiff">can</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">customized</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">placing</span> <span class="TextSegSigDiff">commands</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">initialization</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">called</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;~/.inputrc&quot;.</span>&nbsp; <span class="TextSegSigDiff">Key</span> <span class="TextSegSigDiff">bindings</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">form</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">key-name:</span> <span class="TextSegSigDiff">function-name</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">or</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&quot;string&quot;:</span> <span class="TextSegSigDiff">function-name</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">options</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">set</span> <span class="TextSegSigDiff">with</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">set</span> <span class="TextSegSigDiff">option-name</span> <span class="TextSegSigDiff">value</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">For</span> <span class="TextSegSigDiff">example:</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">I</span> <span class="TextSegSigDiff">prefer</span> <span class="TextSegSigDiff">vi-style</span> <span class="TextSegSigDiff">editing:</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">set</span> <span class="TextSegSigDiff">editing-mode</span> <span class="TextSegSigDiff">vi</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">Edit</span> <span class="TextSegSigDiff">using</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">single</span> <span class="TextSegSigDiff">line:</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">set</span> <span class="TextSegSigDiff">horizontal-scroll-mode</span> <span class="TextSegSigDiff">On</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">Rebind</span> <span class="TextSegSigDiff">some</span> <span class="TextSegSigDiff">keys:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Meta-h:</span> <span class="TextSegSigDiff">backward-kill-word</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&quot;\C-u&quot;:</span> <span class="TextSegSigDiff">universal-argument</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&quot;\C-x\C-r&quot;:</span> <span class="TextSegSigDiff">re-read-init-file</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Note</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">default</span> <span class="TextSegSigDiff">binding</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">&quot;Tab&quot;</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">insert</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">&quot;Tab&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">character</span> <span class="TextSegSigDiff">instead</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">Readline's</span> <span class="TextSegSigDiff">default</span> <span class="TextSegSigDiff">filename</span> <span class="TextSegSigDiff">completion</span> <span class="TextSegSigDiff">function.</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">insist,</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">override</span> <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">putting</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Tab:</span> <span class="TextSegSigDiff">complete</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">your</span> <span class="TextSegSigDiff">&quot;~/.inputrc&quot;.</span>&nbsp; <span class="TextSegSigDiff">(Of</span> <span class="TextSegSigDiff">course,</span> <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">makes</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">harder</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">type</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">indented</span> <span class="TextSegSigDiff">continuation</span> <span class="TextSegSigDiff">lines</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">you're</span> <span class="TextSegSigDiff">accustomed</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">using</span> <span class="TextSegSigDiff">&quot;Tab&quot;</span> <span class="TextSegSigDiff">for</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">purpose.)</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">Completion of variable and module names is <span class="TextSegSigDiff">automa</span>ti<span class="TextSegSigDiff">c</span>ally <span class="TextSegSigDiff">enabled</span> <span class="TextSegSigDiff">at</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Automati</span>c <span class="TextSegSigDiff">c</span>ompletion of variable and module names is <span class="TextSegSigDiff">op</span>ti<span class="TextSegSigDiff">on</span>ally</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">available.</span>&nbsp; <span class="TextSegSigDiff">To</span> <span class="TextSegSigDiff">enable</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">interpreter's</span> <span class="TextSegSigDiff">interactive</span> <span class="TextSegSigDiff">mode,</span> <span class="TextSegSigDiff">add</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">following</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">your</span> <span class="TextSegSigDiff">startup</span> <span class="TextSegSigDiff">file:</span> <span class="TextSegSigDiff">[1]</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">import</span> <span class="TextSegSigDiff">rlcompleter,</span> <span class="TextSegSigDiff">readline</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">readline.parse_and_bind('tab:</span> <span class="TextSegSigDiff">complete')</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">i<span class="TextSegSigDiff">nterpreter</span> s<span class="TextSegSigDiff">tartup</span> s<span class="TextSegSigDiff">o</span> th<span class="TextSegSigDiff">at</span> <span class="TextSegSigDiff">th</span>e &quot;Tab&quot; key <span class="TextSegSigDiff">invokes</span> the completion</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Th</span>is <span class="TextSegSigDiff">bind</span>s the &quot;Tab&quot; key <span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">o</span> the completi<span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">function,</span> <span class="TextSegSigDiff">s</span>o <span class="TextSegSigDiff">hitti</span>n<span class="TextSegSigDiff">g</span> <span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">f</span><span class="TextSegSigDiff">un</span>ction; it looks at Python state<span class="TextSegSigDiff">ment</span> <span class="TextSegSigDiff">names,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">curr</span>ent <span class="TextSegSigDiff">local</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;Tab&quot;</span> <span class="TextSegSigDiff">key</span> <span class="TextSegSigDiff">twice</span> <span class="TextSegSigDiff">suggests</span> c<span class="TextSegSigDiff">omple</span>tion<span class="TextSegSigDiff">s</span>; it looks at Python state<span class="TextSegSigDiff">m</span>ent</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">variables, and the available module names.&nbsp; <span class="TextSegSigDiff">For</span> <span class="TextSegSigDiff">dotted</span> <span class="TextSegSigDiff">expressions</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">names,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">current</span> <span class="TextSegSigDiff">local</span> variables, and the available module names.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">such as &quot;string.a&quot;, it will evalua<span class="TextSegSigDiff">te</span> t<span class="TextSegSigDiff">he</span> e<span class="TextSegSigDiff">xpression</span> <span class="TextSegSigDiff">up</span> <span class="TextSegSigDiff">to</span> the <span class="TextSegSigDiff">final</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">For</span> <span class="TextSegSigDiff">dotted</span> <span class="TextSegSigDiff">expressions</span> such as &quot;string.a&quot;, it will evaluate the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&quot;'.'&quot; and then suggest completions from <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">attributes</span> <span class="TextSegSigDiff">of</span> the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">expression</span> <span class="TextSegSigDiff">up</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">final</span> &quot;'.'&quot; and then suggest completions from the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">resulting object.&nbsp; Note that this may execut<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">application-defined</span> <span class="TextSegSigDiff">cod</span>e</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">attributes</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> resulting object.&nbsp; Note that this may execute</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">if an object with a &quot;__getattr__()&quot; method is <span class="TextSegSigDiff">part</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">expression.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">application-defined</span> <span class="TextSegSigDiff">code</span> if an object with a &quot;__getattr__()&quot; method is</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">part</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">expression.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">A</span> <span class="TextSegSigDiff">more</span> <span class="TextSegSigDiff">capable</span> <span class="TextSegSigDiff">startup</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">might</span> <span class="TextSegSigDiff">look</span> <span class="TextSegSigDiff">like</span> <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">example.</span>&nbsp; <span class="TextSegSigDiff">Note</span> <span class="TextSegSigDiff">that</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">deletes</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">names</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">creates</span> <span class="TextSegSigDiff">once</span> <span class="TextSegSigDiff">they</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">no</span> <span class="TextSegSigDiff">longer</span> <span class="TextSegSigDiff">needed;</span> <span class="TextSegSigDiff">this</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">done</span> <span class="TextSegSigDiff">since</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">startup</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">executed</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">same</span> <span class="TextSegSigDiff">namespace</span> <span class="TextSegSigDiff">as</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">interactive</span> <span class="TextSegSigDiff">commands,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">removing</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">names</span> <span class="TextSegSigDiff">avoids</span> <span class="TextSegSigDiff">creating</span> <span class="TextSegSigDiff">side</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">effects</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">interactive</span> <span class="TextSegSigDiff">environment.</span>&nbsp; <span class="TextSegSigDiff">You</span> <span class="TextSegSigDiff">may</span> <span class="TextSegSigDiff">find</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">convenient</span> <span class="TextSegSigDiff">to</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">keep</span> <span class="TextSegSigDiff">some</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">imported</span> <span class="TextSegSigDiff">modules,</span> <span class="TextSegSigDiff">such</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">&quot;os&quot;,</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">turn</span> <span class="TextSegSigDiff">out</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">be</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">needed</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">most</span> <span class="TextSegSigDiff">sessions</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">interpreter.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">def</span>au<span class="TextSegSigDiff">l</span>t co<span class="TextSegSigDiff">nfigura</span>tion a<span class="TextSegSigDiff">lso</span> <span class="TextSegSigDiff">save</span>s <span class="TextSegSigDiff">your</span> history <span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">n</span>to <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">file</span> n<span class="TextSegSigDiff">amed</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">Add</span> aut<span class="TextSegSigDiff">o-</span>co<span class="TextSegSigDiff">mple</span>tion a<span class="TextSegSigDiff">nd</span> <span class="TextSegSigDiff">a</span> s<span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">red</span> history <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">commands</span> to <span class="TextSegSigDiff">your</span> <span class="TextSegSigDiff">Pytho</span>n</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">interactive</span> <span class="TextSegSigDiff">interpreter.</span> <span class="TextSegSigDiff">Requires</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">2.0+,</span> <span class="TextSegSigDiff">readline.</span> <span class="TextSegSigDiff">Autocomplete</span> <span class="TextSegSigDiff">is</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">bound</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Esc</span> <span class="TextSegSigDiff">key</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">default</span> <span class="TextSegSigDiff">(you</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">change</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">-</span> <span class="TextSegSigDiff">see</span> <span class="TextSegSigDiff">readline</span> <span class="TextSegSigDiff">docs).</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">#</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">Store</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">~/.pystartup,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">set</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">environment</span> <span class="TextSegSigDiff">variable</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">point</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">it:</span>&nbsp; <span class="TextSegSigDiff">&quot;export</span> <span class="TextSegSigDiff">PYTHONSTARTUP=~/.pystartup&quot;</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">bash.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">import</span> <span class="TextSegSigDiff">atexit</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">import</span> <span class="TextSegSigDiff">os</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">import</span> <span class="TextSegSigDiff">readline</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">import</span> <span class="TextSegSigDiff">rlcompleter</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">historyPath</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">os.path.expanduser(&quot;~/.pyhistory&quot;)</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">def</span> <span class="TextSegSigDiff">save_history(historyPath=historyPath):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">import</span> <span class="TextSegSigDiff">readline</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;.python_history&quot;</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">you</span>r <span class="TextSegSigDiff">user</span> <span class="TextSegSigDiff">d</span><span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">ec</span>tory<span class="TextSegSigDiff">.</span> <span class="TextSegSigDiff">The</span> history <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">be</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; r<span class="TextSegSigDiff">ea</span><span class="TextSegSigDiff">dline.write_his</span>tory<span class="TextSegSigDiff">_file(</span>history<span class="TextSegSigDiff">Path)</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">os.path.exists(historyPath):</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">readline.read_history_file(historyPath)</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">atexit.register(save_history)</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">available</span> <span class="TextSegSigDiff">again</span> d<span class="TextSegSigDiff">uring</span> t<span class="TextSegSigDiff">he</span> <span class="TextSegSigDiff">n</span>ex<span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">interactive</span> <span class="TextSegSigDiff">inte</span>r<span class="TextSegSigDiff">pr</span>eter s<span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">sion.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; d<span class="TextSegSigDiff">el</span> <span class="TextSegSigDiff">os,</span> <span class="TextSegSigDiff">a</span>tex<span class="TextSegSigDiff">it,</span> <span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">adline,</span> r<span class="TextSegSigDiff">lcompl</span>eter<span class="TextSegSigDiff">,</span> s<span class="TextSegSigDiff">ave_history,</span> <span class="TextSegSigDiff">historyPath</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Alternatives to the Interactive Interpreter</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Alternatives to the Interactive Interpreter</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===========================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===========================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This facility is an enormous step forward compared to earlier versions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This facility is an enormous step forward compared to earlier versions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of the interpreter; however, some wishes are left: It would be nice if</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of the interpreter; however, some wishes are left: It would be nice if</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the proper indentation were suggested on continuation lines (the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the proper indentation were suggested on continuation lines (the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">parser knows if an indent token is required next).&nbsp; The completion</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">parser knows if an indent token is required next).&nbsp; The completion</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">mechanism might use the interpreter's symbol table.&nbsp; A command to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">mechanism might use the interpreter's symbol table.&nbsp; A command to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">check (or even suggest) matching parentheses, quotes, etc., would also</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">check (or even suggest) matching parentheses, quotes, etc., would also</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">be useful.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">be useful.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">One alternative enhanced interactive interpreter that has been around</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">One alternative enhanced interactive interpreter that has been around</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for quite some time is IPython, which features tab completion, object</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for quite some time is IPython, which features tab completion, object</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">exploration and advanced history management.&nbsp; It can also be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">exploration and advanced history management.&nbsp; It can also be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">thoroughly customized and embedded into other applications.&nbsp; Another</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">thoroughly customized and embedded into other applications.&nbsp; Another</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">similar enhanced interactive environment is bpython.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">similar enhanced interactive environment is bpython.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">-[</span> <span class="TextSegSigDiff">Footnotes</span> <span class="TextSegSigDiff">]-</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">[1]</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">execute</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">contents</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">identified</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">&quot;PYTHONSTARTUP&quot;</span> <span class="TextSegSigDiff">environment</span> <span class="TextSegSigDiff">variable</span> <span class="TextSegSigDiff">when</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">start</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">interactive</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">interpreter.</span>&nbsp; <span class="TextSegSigDiff">To</span> <span class="TextSegSigDiff">customize</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">even</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">non-interactive</span> <span class="TextSegSigDiff">mode,</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">see</span> <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">Customization</span> <span class="TextSegSigDiff">Modules.</span></td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\tutorial\interpreter.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Using the Python Interpreter</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Using the Python Interpreter</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">****************************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">****************************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Invoking the Interpreter</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Invoking the Interpreter</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">========================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">========================</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">The Python interpreter is usually installed as</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">The Python interpreter is usually installed as <span class="TextSegSigDiff">&quot;/usr/local/bin/python&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;/usr/local/bin/python3.6&quot;</span> on those machines where it is available;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">on those machines where it is available; <span class="TextSegSigDiff">putting</span> <span class="TextSegSigDiff">&quot;/usr/local/bin&quot;</span> <span class="TextSegSigDiff">in</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">putting</span> <span class="TextSegSigDiff">&quot;/usr/local/bin&quot;</span> <span class="TextSegSigDiff">in</span> your Unix shell's search path makes it</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">your Unix shell's search path makes it <span class="TextSegSigDiff">possible</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">start</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">typing</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">possible</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">star</span>t <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">typing</span> <span class="TextSegSigDiff">t</span>he command<span class="TextSegSigDiff">:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">the command</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; python<span class="TextSegSigDiff">3.6</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; python</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">to the shell. <span class="TextSegSigDiff">[1]</span> Since the choice of the directory where the</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">to the shell.&nbsp; Since the choice of the directory where th<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">int</span>e<span class="TextSegSigDiff">rpreter</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">interpreter</span> lives is an installation option, other places are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">lives is an installation option, other places are <span class="TextSegSigDiff">possible;</span> <span class="TextSegSigDiff">check</span> <span class="TextSegSigDiff">with</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">possible;</span> <span class="TextSegSigDiff">check</span> <span class="TextSegSigDiff">with</span> your local Python guru or system administrator.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">your local Python guru or system administrator<span class="TextSegSigDiff">.</span>&nbsp; <span class="TextSegSigDiff">(E</span>.<span class="TextSegSigDiff">g.,</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">(E.g.,</span> &quot;/usr/local/python&quot; is a popular alternative location.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&quot;/usr/local/python&quot; is a popular alternative location.)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">On Windows machines, the Python installation is usually placed in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">On Windows machines, the Python installation is usually placed in</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&quot;C:\Python<span class="TextSegSigDiff">36</span>&quot;, though you can change this when you're running the</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&quot;C:\Python<span class="TextSegSigDiff">27</span>&quot;, though you can change this when you're running the</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">installer.&nbsp; To add this directory to your path,&nbsp; you can type the</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">installer.&nbsp; To add this directory to your path,&nbsp; you can type the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">following command into the command prompt in a DOS box:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">following command into the command prompt in a DOS box:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; set path=%path%;C:\python<span class="TextSegSigDiff">36</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; set path=%path%;C:\python<span class="TextSegSigDiff">27</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Typing an end-of-file character (&quot;Control-D&quot; on Unix, &quot;Control-Z&quot; on</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Typing an end-of-file character (&quot;Control-D&quot; on Unix, &quot;Control-Z&quot; on</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Windows) at the primary prompt causes the interpreter to exit with a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Windows) at the primary prompt causes the interpreter to exit with a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">zero exit status.&nbsp; If that doesn't work, you can exit the interpreter</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">zero exit status.&nbsp; If that doesn't work, you can exit the interpreter</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">by typing the following command: &quot;quit()&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">by typing the following command: &quot;quit()&quot;.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">The interpreter's line-editing features <span class="TextSegSigDiff">inc</span><span class="TextSegSigDiff">lud</span>e <span class="TextSegSigDiff">i</span>nter<span class="TextSegSigDiff">active</span> <span class="TextSegSigDiff">editing,</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">The interpreter's line-editing features <span class="TextSegSigDiff">usually</span> <span class="TextSegSigDiff">ar</span>en<span class="TextSegSigDiff">'</span>t <span class="TextSegSigDiff">v</span>er<span class="TextSegSigDiff">y</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">sophisticated.</span>&nbsp; <span class="TextSegSigDiff">On</span> <span class="TextSegSigDiff">Unix,</span> <span class="TextSegSigDiff">whoever</span> <span class="TextSegSigDiff">installed</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">interpreter</span> <span class="TextSegSigDiff">may</span> <span class="TextSegSigDiff">have</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">enabled</span> <span class="TextSegSigDiff">support</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">GNU</span> <span class="TextSegSigDiff">readline</span> <span class="TextSegSigDiff">library,</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">adds</span> <span class="TextSegSigDiff">more</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">hist</span>or<span class="TextSegSigDiff">y</span> <span class="TextSegSigDiff">subst</span>i<span class="TextSegSigDiff">tu</span>ti<span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">cod</span>e <span class="TextSegSigDiff">compl</span>eti<span class="TextSegSigDiff">o</span>n <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">ys</span><span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">ems</span> <span class="TextSegSigDiff">t</span>ha<span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">suppor</span>t</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">elab</span>or<span class="TextSegSigDiff">ate</span> i<span class="TextSegSigDiff">nterac</span>ti<span class="TextSegSigDiff">v</span>e e<span class="TextSegSigDiff">di</span>tin<span class="TextSegSigDiff">g</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">history</span> <span class="TextSegSigDiff">feature</span><span class="TextSegSigDiff">s.</span> <span class="TextSegSigDiff">Per</span>ha<span class="TextSegSigDiff">ps</span> t<span class="TextSegSigDiff">he</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">readline.</span>&nbsp; <span class="TextSegSigDiff">Perhaps</span> <span class="TextSegSigDiff">the</span> quickest check to see whether command line</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">quickest check to see whether command line <span class="TextSegSigDiff">editing</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">supported</span> <span class="TextSegSigDiff">is</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">editing</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">supported</span> <span class="TextSegSigDiff">is</span> typing &quot;Control-P&quot; to the first Python prompt</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">typing &quot;Control-P&quot; to the first Python prompt <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">get.</span>&nbsp; <span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">beeps,</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">you <span class="TextSegSigDiff">get.</span>&nbsp; <span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">beeps,</span> <span class="TextSegSigDiff">you</span> have command line editing; see Appendix</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">you have command line editing; see Appendix <span class="TextSegSigDiff">Interactive</span> <span class="TextSegSigDiff">Input</span> <span class="TextSegSigDiff">Editing</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Interactive</span> <span class="TextSegSigDiff">Input</span> <span class="TextSegSigDiff">Editing</span> and History Substitution for an introduction</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">and History Substitution for an introduction <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">keys.</span>&nbsp; <span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">nothing</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">keys.</span>&nbsp; <span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">nothing</span> appears to happen, or if &quot;^P&quot; is echoed,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">appears to happen, or if &quot;^P&quot; is echoed, <span class="TextSegSigDiff">command</span> <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">editing</span> <span class="TextSegSigDiff">isn't</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">command</span> <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">editing</span> <span class="TextSegSigDiff">isn't</span> <span class="TextSegSigDiff">a</span>vailable; you'll only be able to u<span class="TextSegSigDiff">s</span>e</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">a</span>vailable; you'll only be able to u<span class="TextSegSigDiff">se</span> <span class="TextSegSigDiff">backspac</span>e <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">remove</span> <span class="TextSegSigDiff">characters</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">backspace</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">remove</span> <span class="TextSegSigDiff">characters</span> from the current line.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">from the current line.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The interpreter operates somewhat like the Unix shell: when called</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The interpreter operates somewhat like the Unix shell: when called</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">with standard input connected to a tty device, it reads and executes</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">with standard input connected to a tty device, it reads and executes</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">commands interactively; when called with a file name argument or with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">commands interactively; when called with a file name argument or with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a file as standard input, it reads and executes a *script* from that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a file as standard input, it reads and executes a *script* from that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">file.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">file.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A second way of starting the interpreter is &quot;python -c command [arg]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A second way of starting the interpreter is &quot;python -c command [arg]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">...&quot;, which executes the statement(s) in *command*, analogous to the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">...&quot;, which executes the statement(s) in *command*, analogous to the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">shell's &quot;-c&quot; option.&nbsp; Since Python statements often contain spaces or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">shell's &quot;-c&quot; option.&nbsp; Since Python statements often contain spaces or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">other characters that are special to the shell, it is usually advised</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">other characters that are special to the shell, it is usually advised</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to quote *command* in its entirety with single quotes.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to quote *command* in its entirety with single quotes.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Some Python modules are also useful as scripts.&nbsp; These can be invoked</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Some Python modules are also useful as scripts.&nbsp; These can be invoked</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">using &quot;python -m module [arg] ...&quot;, which executes the source file for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">using &quot;python -m module [arg] ...&quot;, which executes the source file for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*module* as if you had spelled out its full name on the command line.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*module* as if you had spelled out its full name on the command line.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When a script file is used, it is sometimes useful to be able to run</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When a script file is used, it is sometimes useful to be able to run</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the script and enter interactive mode afterwards.&nbsp; This can be done by</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the script and enter interactive mode afterwards.&nbsp; This can be done by</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">passing &quot;-i&quot; before the script.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">passing &quot;-i&quot; before the script.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">All command line options are described in Command line and</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">All command<span class="TextSegSigDiff">-</span>line options are described in Command line and</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">environment.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">environment.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Argument Passing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Argument Passing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When known to the interpreter, the script name and additional</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When known to the interpreter, the script name and additional</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">arguments thereafter are turned into a list of strings and assigned to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">arguments thereafter are turned into a list of strings and assigned to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the &quot;argv&quot; variable in the &quot;sys&quot; module.&nbsp; You can access this list by</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the &quot;argv&quot; variable in the &quot;sys&quot; module.&nbsp; You can access this list by</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">executing &quot;import sys&quot;.&nbsp; The length of the list is at least one; when</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">executing &quot;import sys&quot;.&nbsp; The length of the list is at least one; when</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">no script and no arguments are given, &quot;sys.argv[0]&quot; is an empty</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">no script and no arguments are given, &quot;sys.argv[0]&quot; is an empty</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">string.&nbsp; When the script name is given as &quot;'-'&quot; (meaning&nbsp; standard</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">string.&nbsp; When the script name is given as &quot;'-'&quot; (meaning&nbsp; standard</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">input), &quot;sys.argv[0]&quot; is set to &quot;'-'&quot;.&nbsp; When &quot;-c&quot; *command* is used,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">input), &quot;sys.argv[0]&quot; is set to &quot;'-'&quot;.&nbsp; When &quot;-c&quot; *command* is used,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;sys.argv[0]&quot; is set to &quot;'-c'&quot;.&nbsp; When &quot;-m&quot; *module* is used,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;sys.argv[0]&quot; is set to &quot;'-c'&quot;.&nbsp; When &quot;-m&quot; *module* is used,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;sys.argv[0]&quot;&nbsp; is set to the full name of the located module.&nbsp; Options</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;sys.argv[0]&quot;&nbsp; is set to the full name of the located module.&nbsp; Options</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">found after&nbsp; &quot;-c&quot; *command* or &quot;-m&quot; *module* are not consumed&nbsp; by the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">found after&nbsp; &quot;-c&quot; *command* or &quot;-m&quot; *module* are not consumed&nbsp; by the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python interpreter's option processing but left in &quot;sys.argv&quot; for&nbsp; the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python interpreter's option processing but left in &quot;sys.argv&quot; for&nbsp; the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">command or module to handle.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">command or module to handle.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Interactive Mode</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Interactive Mode</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When commands are read from a tty, the interpreter is said to be in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When commands are read from a tty, the interpreter is said to be in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*interactive mode*.&nbsp; In this mode it prompts for the next command with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*interactive mode*.&nbsp; In this mode it prompts for the next command with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the *primary prompt*, usually three greater-than signs (&quot;&gt;&gt;&gt;&quot;); for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the *primary prompt*, usually three greater-than signs (&quot;&gt;&gt;&gt;&quot;); for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">continuation lines it prompts with the *secondary prompt*, by default</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">continuation lines it prompts with the *secondary prompt*, by default</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">three dots (&quot;...&quot;). The interpreter prints a welcome message stating</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">three dots (&quot;...&quot;). The interpreter prints a welcome message stating</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">its version number and a copyright notice before printing the first</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">its version number and a copyright notice before printing the first</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">prompt:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">prompt:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">$</span> python<span class="TextSegSigDiff">3.6</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; Python <span class="TextSegSigDiff">3.6</span> (<span class="TextSegSigDiff">default</span>, <span class="TextSegSigDiff">Sep</span> <span class="TextSegSigDiff">16</span> 201<span class="TextSegSigDiff">5</span>, 0<span class="TextSegSigDiff">9</span>:2<span class="TextSegSigDiff">5</span>:0<span class="TextSegSigDiff">4</span>)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; Python <span class="TextSegSigDiff">2.7</span> (<span class="TextSegSigDiff">#1</span>, <span class="TextSegSigDiff">Feb</span> <span class="TextSegSigDiff">28</span> 201<span class="TextSegSigDiff">0</span>, <span class="TextSegSigDiff">0</span>0:<span class="TextSegSigDiff">0</span>2:0<span class="TextSegSigDiff">6</span>)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">[GCC</span> <span class="TextSegSigDiff">4.8.2]</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">linux</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Continuation lines are needed when entering a multi-line construct. As</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Continuation lines are needed when entering a multi-line construct. As</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">an example, take a look at this &quot;if&quot; statement:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">an example, take a look at this &quot;if&quot; statement:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; the_world_is_flat = <span class="TextSegSigDiff">True</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; the_world_is_flat = <span class="TextSegSigDiff">1</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; if the_world_is_flat:</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; if the_world_is_flat:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>&quot;Be careful not to fall off!&quot;<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print &quot;Be careful not to fall off!&quot;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Be careful not to fall off!</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Be careful not to fall off!</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For more on interactive mode, see Interactive Mode.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For more on interactive mode, see Interactive Mode.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The Interpreter and Its Environment</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The Interpreter and Its Environment</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Source Code Encoding</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Source Code Encoding</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">By default, Python source files are treated as encoded in UTF-8.&nbsp; In</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">By default, Python source files are treated as encoded in UTF-8.&nbsp; In</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that encoding, characters of most languages in the world can be used</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that encoding, characters of most languages in the world can be used</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">simultaneously in string literals, identifiers and comments ---</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">simultaneously in string literals, identifiers and comments ---</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">although the standard library only uses ASCII characters for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">although the standard library only uses ASCII characters for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">identifiers, a convention that any portable code should follow.&nbsp; To</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">identifiers, a convention that any portable code should follow.&nbsp; To</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">display all these characters properly, your editor must recognize that</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">display all these characters properly, your editor must recognize that</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the file is UTF-8, and it must use a font that supports all the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the file is UTF-8, and it must use a font that supports all the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">characters in the file.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">characters in the file.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To declare an encoding other than the default one, a special comment</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To declare an encoding other than the default one, a special comment</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">line should be added as the *first* line of the file.&nbsp; The syntax is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">line should be added as the *first* line of the file.&nbsp; The syntax is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">as follows:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">as follows:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; # -*- coding: encoding -*-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # -*- coding: encoding -*-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">where *encoding* is one of the valid &quot;codecs&quot; supported by Python.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">where *encoding* is one of the valid &quot;codecs&quot; supported by Python.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For example, to declare that Windows-1252 encoding is to be used, the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For example, to declare that Windows-1252 encoding is to be used, the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">first line of your source code file should be:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">first line of your source code file should be:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; # -*- coding: cp-1252 -*-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # -*- coding: cp-1252 -*-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">One exception to the *first line* rule is when the source code starts</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">One exception to the *first line* rule is when the source code starts</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">with a UNIX &quot;shebang&quot; line.&nbsp; In this case, the encoding declaration</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">with a UNIX &quot;shebang&quot; line.&nbsp; In this case, the encoding declaration</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">should be added as the second line of the file.&nbsp; For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">should be added as the second line of the file.&nbsp; For example:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; #!/usr/bin/env python<span class="TextSegSigDiff">3</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; #!/usr/bin/env python</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; # -*- coding: cp-1252 -*-</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; # -*- coding: cp-1252 -*-</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegSigDiff">-[</span> <span class="TextSegSigDiff">Footnotes</span> <span class="TextSegSigDiff">]-</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">[1]</span> <span class="TextSegSigDiff">On</span> <span class="TextSegSigDiff">Unix,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">3.x</span> <span class="TextSegSigDiff">interpreter</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">default</span> <span class="TextSegSigDiff">not</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">installed</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">executable</span> <span class="TextSegSigDiff">named</span> <span class="TextSegSigDiff">&quot;python&quot;,</span> <span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">does</span> <span class="TextSegSigDiff">not</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">conflict</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">simultaneously</span> <span class="TextSegSigDiff">installed</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">2.x</span> <span class="TextSegSigDiff">executable.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\tutorial\introduction.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">An Informal Introduction to Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">An Informal Introduction to Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">**********************************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">**********************************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In the following examples, input and output are distinguished by the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In the following examples, input and output are distinguished by the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">presence or absence of prompts (*&gt;&gt;&gt;* and *...*): to repeat the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">presence or absence of prompts (*&gt;&gt;&gt;* and *...*): to repeat the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">example, you must type everything after the prompt, when the prompt</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">example, you must type everything after the prompt, when the prompt</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">appears; lines that do not begin with a prompt are output from the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">appears; lines that do not begin with a prompt are output from the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">interpreter. Note that a secondary prompt on a line by itself in an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interpreter. Note that a secondary prompt on a line by itself in an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">example means you must type a blank line; this is used to end a multi-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">example means you must type a blank line; this is used to end a multi-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">line command.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">line command.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Many of the examples in this manual, even those entered at the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Many of the examples in this manual, even those entered at the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">interactive prompt, include comments.&nbsp; Comments in Python start with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interactive prompt, include comments.&nbsp; Comments in Python start with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the hash character, &quot;#&quot;, and extend to the end of the physical line.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the hash character, &quot;#&quot;, and extend to the end of the physical line.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A comment may appear at the start of a line or following whitespace or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A comment may appear at the start of a line or following whitespace or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">code, but not within a string literal.&nbsp; A hash character within a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">code, but not within a string literal.&nbsp; A hash character within a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">string literal is just a hash character. Since comments are to clarify</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">string literal is just a hash character. Since comments are to clarify</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">code and are not interpreted by Python, they may be omitted when</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">code and are not interpreted by Python, they may be omitted when</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">typing in examples.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">typing in examples.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Some examples:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Some examples:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; # this is the first comment</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # this is the first comment</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; spam = 1&nbsp; # and this is the second comment</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; spam = 1&nbsp; # and this is the second comment</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # ... and now a third!</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # ... and now a third!</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; text = &quot;# This is not a comment because it's inside quotes.&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; text = &quot;# This is not a comment because it's inside quotes.&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Using Python as a Calculator</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Using Python as a Calculator</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">============================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">============================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Let's try some simple Python commands.&nbsp; Start the interpreter and wait</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Let's try some simple Python commands.&nbsp; Start the interpreter and wait</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for the primary prompt, &quot;&gt;&gt;&gt;&quot;.&nbsp; (It shouldn't take long.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for the primary prompt, &quot;&gt;&gt;&gt;&quot;.&nbsp; (It shouldn't take long.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Numbers</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Numbers</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The interpreter acts as a simple calculator: you can type an</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The interpreter acts as a simple calculator: you can type an</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">expression at it and it will write the value.&nbsp; Expression syntax is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">expression at it and it will write the value.&nbsp; Expression syntax is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">straightforward: the operators &quot;+&quot;, &quot;-&quot;, &quot;*&quot; and &quot;/&quot; work just like in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">straightforward: the operators &quot;+&quot;, &quot;-&quot;, &quot;*&quot; and &quot;/&quot; work just like in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">most other languages (for example, Pascal or C); parentheses (&quot;()&quot;)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">most other languages (for example, Pascal or C); parentheses (&quot;()&quot;)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">can be used for grouping. For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">can be used for grouping. For example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 2 + 2</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 2 + 2</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 4</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 4</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 50 - 5*6</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 50 - 5*6</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; 20</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 20</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; (50 - 5*6) / 4</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; (50 - 5<span class="TextSegSigDiff">.0</span>*6) / 4</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; 5.0</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; 5.0</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; 8 / 5&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">division</span> <span class="TextSegSigDiff">always</span> <span class="TextSegSigDiff">returns</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">floating</span> <span class="TextSegSigDiff">point</span> <span class="TextSegSigDiff">number</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; 8 / 5<span class="TextSegSigDiff">.0</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; 1.6</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; 1.6</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The integer numbers (e.g. &quot;2&quot;, &quot;4&quot;, &quot;20&quot;) have type &quot;int&quot;, the ones</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The integer numbers (e.g. &quot;2&quot;, &quot;4&quot;, &quot;20&quot;) have type &quot;int&quot;, the ones</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">with a fractional part (e.g. &quot;5.0&quot;, &quot;1.6&quot;) have type &quot;float&quot;.&nbsp; We will</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">with a fractional part (e.g. &quot;5.0&quot;, &quot;1.6&quot;) have type &quot;float&quot;.&nbsp; We will</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">see more about numeric types later in the tutorial.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">see more about numeric types later in the tutorial.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">Division (&quot;/&quot;) <span class="TextSegSigDiff">always</span> <span class="TextSegSigDiff">returns</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">flo</span>at<span class="TextSegSigDiff">.</span>&nbsp; <span class="TextSegSigDiff">To</span> <span class="TextSegSigDiff">do</span> <span class="TextSegSigDiff">*floor</span> <span class="TextSegSigDiff">division*</span> and <span class="TextSegSigDiff">get</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">return</span> <span class="TextSegSigDiff">type</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">a</span> division (&quot;/&quot;) <span class="TextSegSigDiff">op</span><span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">r</span>at<span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">depends</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">it</span><span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">oper</span>and<span class="TextSegSigDiff">s.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">both</span> <span class="TextSegSigDiff">operands</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">type</span> <span class="TextSegSigDiff">&quot;int&quot;,</span> <span class="TextSegSigDiff">*floor</span> <span class="TextSegSigDiff">division*</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">performed</span> <span class="TextSegSigDiff">and</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">an int<span class="TextSegSigDiff">eg</span><span class="TextSegSigDiff">er</span> <span class="TextSegSigDiff">result</span> <span class="TextSegSigDiff">(</span>dis<span class="TextSegSigDiff">carding</span> a<span class="TextSegSigDiff">ny</span> <span class="TextSegSigDiff">fractional</span> <span class="TextSegSigDiff">result)</span> <span class="TextSegSigDiff">you</span> c<span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">an <span class="TextSegSigDiff">&quot;</span>int<span class="TextSegSigDiff">&quot;</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">returned.</span>&nbsp; <span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">ei</span><span class="TextSegSigDiff">ther</span> <span class="TextSegSigDiff">operan</span>d is a <span class="TextSegSigDiff">&quot;fl</span><span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">t&quot;,</span> c<span class="TextSegSigDiff">las</span><span class="TextSegSigDiff">sic</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;//&quot;</span> <span class="TextSegSigDiff">o</span>per<span class="TextSegSigDiff">at</span>or<span class="TextSegSigDiff">;</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">c</span>a<span class="TextSegSigDiff">lcul</span>at<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">the</span> re<span class="TextSegSigDiff">main</span><span class="TextSegSigDiff">d</span><span class="TextSegSigDiff">er</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">&quot;%&quot;:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">division</span> <span class="TextSegSigDiff">is</span> per<span class="TextSegSigDiff">f</span>or<span class="TextSegSigDiff">med</span> <span class="TextSegSigDiff">and</span> a <span class="TextSegSigDiff">&quot;flo</span>at<span class="TextSegSigDiff">&quot;</span> <span class="TextSegSigDiff">is</span> re<span class="TextSegSigDiff">turned.</span>&nbsp; <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">&quot;//&quot;</span> <span class="TextSegSigDiff">operator</span> <span class="TextSegSigDiff">is</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">also</span> <span class="TextSegSigDiff">provided</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">doing</span> <span class="TextSegSigDiff">floor</span> <span class="TextSegSigDiff">division</span> <span class="TextSegSigDiff">no</span> <span class="TextSegSigDiff">matter</span> <span class="TextSegSigDiff">what</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">operands</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">are.</span>&nbsp; <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">remainder</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">calculated</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;%&quot;</span> <span class="TextSegSigDiff">operator:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">17</span> <span class="TextSegSigDiff">/</span> <span class="TextSegSigDiff">3</span>&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">classic</span> <span class="TextSegSigDiff">division</span> <span class="TextSegSigDiff">returns</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">float</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">17</span> <span class="TextSegSigDiff">/</span> <span class="TextSegSigDiff">3</span>&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">int</span> <span class="TextSegSigDiff">/</span> <span class="TextSegSigDiff">int</span> <span class="TextSegSigDiff">-&gt;</span> <span class="TextSegSigDiff">int</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">5</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">17</span> <span class="TextSegSigDiff">/</span> <span class="TextSegSigDiff">3.0</span>&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">int</span> <span class="TextSegSigDiff">/</span> <span class="TextSegSigDiff">float</span> <span class="TextSegSigDiff">-&gt;</span> <span class="TextSegSigDiff">float</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; 5.666666666666667</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; 5.666666666666667</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; 17 // 3&nbsp; # floor division discards the fractional part</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; 17 // 3<span class="TextSegSigDiff">.0</span>&nbsp; # <span class="TextSegSigDiff">explicit</span> floor division discards the fractional part</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; 5</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; 5<span class="TextSegSigDiff">.0</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 17 % 3&nbsp; # the % operator returns the remainder of the division</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 17 % 3&nbsp; # the % operator returns the remainder of the division</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 2</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 2</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 5 * 3 + 2&nbsp; # result * divisor + remainder</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 5 * 3 + 2&nbsp; # result * divisor + remainder</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 17</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 17</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">With Python, it is possible to use the &quot;**&quot; operator to calculate</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">With Python, it is possible to use the &quot;**&quot; operator to calculate</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">powers [1]:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">powers [1]:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 5 ** 2&nbsp; # 5 squared</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 5 ** 2&nbsp; # 5 squared</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 25</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 25</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 2 ** 7&nbsp; # 2 to the power of 7</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 2 ** 7&nbsp; # 2 to the power of 7</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 128</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 128</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The equal sign (&quot;=&quot;) is used to assign a value to a variable.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The equal sign (&quot;=&quot;) is used to assign a value to a variable.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Afterwards, no result is displayed before the next interactive prompt:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Afterwards, no result is displayed before the next interactive prompt:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; width = 20</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; width = 20</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; height = 5 * 9</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; height = 5 * 9</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; width * height</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; width * height</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 900</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 900</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If a variable is not &quot;defined&quot; (assigned a value), trying to use it</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If a variable is not &quot;defined&quot; (assigned a value), trying to use it</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">will give you an error:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">will give you an error:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; n&nbsp; # try to access an undefined variable</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; n&nbsp; # try to access an undefined variable</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; NameError: name 'n' is not defined</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; NameError: name 'n' is not defined</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There is full support for floating point; operators with mixed type</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There is full support for floating point; operators with mixed type</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">operands convert the integer operand to floating point:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">operands convert the integer operand to floating point:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">4</span> * 3.75 <span class="TextSegSigDiff">-</span> 1</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">3</span> * 3.75 <span class="TextSegSigDiff">/</span> 1<span class="TextSegSigDiff">.5</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">14.0</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">7</span><span class="TextSegSigDiff">.5</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">7.0</span> <span class="TextSegSigDiff">/</span> <span class="TextSegSigDiff">2</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">3.5</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In interactive mode, the last printed expression is assigned to the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In interactive mode, the last printed expression is assigned to the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">variable &quot;_&quot;.&nbsp; This means that when you are using Python as a desk</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">variable &quot;_&quot;.&nbsp; This means that when you are using Python as a desk</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">calculator, it is somewhat easier to continue calculations, for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">calculator, it is somewhat easier to continue calculations, for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; tax = 12.5 / 100</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; tax = 12.5 / 100</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; price = 100.50</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; price = 100.50</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; price * tax</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; price * tax</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 12.5625</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 12.5625</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; price + _</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; price + _</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 113.0625</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 113.0625</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; round(_, 2)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; round(_, 2)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 113.06</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 113.06</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This variable should be treated as read-only by the user.&nbsp; Don't</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This variable should be treated as read-only by the user.&nbsp; Don't</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">explicitly assign a value to it --- you would create an independent</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">explicitly assign a value to it --- you would create an independent</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">local variable with the same name masking the built-in variable with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">local variable with the same name masking the built-in variable with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">its magic behavior.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">its magic behavior.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In addition to &quot;int&quot; and &quot;float&quot;, Python supports other types of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In addition to &quot;int&quot; and &quot;float&quot;, Python supports other types of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">numbers, such as &quot;Decimal&quot; and &quot;Fraction&quot;. Python also has built-in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">numbers, such as &quot;Decimal&quot; and &quot;Fraction&quot;. Python also has built-in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">support for complex numbers, and uses the &quot;j&quot; or &quot;J&quot; suffix to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">support for complex numbers, and uses the &quot;j&quot; or &quot;J&quot; suffix to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">indicate the imaginary part (e.g. &quot;3+5j&quot;).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">indicate the imaginary part (e.g. &quot;3+5j&quot;).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Strings</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Strings</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Besides numbers, Python can also manipulate strings, which can be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Besides numbers, Python can also manipulate strings, which can be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">expressed in several ways.&nbsp; They can be enclosed in single quotes</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">expressed in several ways.&nbsp; They can be enclosed in single quotes</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(&quot;'...'&quot;) or double quotes (&quot;&quot;...&quot;&quot;) with the same result [2].&nbsp; &quot;\&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(&quot;'...'&quot;) or double quotes (&quot;&quot;...&quot;&quot;) with the same result [2].&nbsp; &quot;\&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">can be used to escape quotes:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">can be used to escape quotes:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 'spam eggs'&nbsp; # single quotes</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 'spam eggs'&nbsp; # single quotes</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'spam eggs'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'spam eggs'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 'doesn\'t'&nbsp; # use \' to escape the single quote...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 'doesn\'t'&nbsp; # use \' to escape the single quote...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &quot;doesn't&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &quot;doesn't&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; &quot;doesn't&quot;&nbsp; # ...or use double quotes instead</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; &quot;doesn't&quot;&nbsp; # ...or use double quotes instead</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &quot;doesn't&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &quot;doesn't&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; '&quot;Yes,&quot; he said.'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; '&quot;Yes,&quot; he said.'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; '&quot;Yes,&quot; he said.'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; '&quot;Yes,&quot; he said.'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; &quot;\&quot;Yes,\&quot; he said.&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; &quot;\&quot;Yes,\&quot; he said.&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; '&quot;Yes,&quot; he said.'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; '&quot;Yes,&quot; he said.'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; '&quot;Isn\'t,&quot; she said.'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; '&quot;Isn\'t,&quot; she said.'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; '&quot;Isn\'t,&quot; she said.'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; '&quot;Isn\'t,&quot; she said.'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In the interactive interpreter, the output string is enclosed in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In the interactive interpreter, the output string is enclosed in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">quotes and special characters are escaped with backslashes.&nbsp; While</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">quotes and special characters are escaped with backslashes.&nbsp; While</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">this might sometimes look different from the input (the enclosing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">this might sometimes look different from the input (the enclosing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">quotes could change), the two strings are equivalent.&nbsp; The string is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">quotes could change), the two strings are equivalent.&nbsp; The string is</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">enclosed in double quotes if the string contains a single quote and no</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">enclosed in double quotes if the string contains a single quote and no</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">double quotes, otherwise it is enclosed in single quotes.&nbsp; The</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">double quotes, otherwise it is enclosed in single quotes.&nbsp; The <span class="TextSegSigDiff">&quot;print&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;print()&quot;</span> <span class="TextSegSigDiff">function</span> produces a more readable output, by omitting the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">sta</span><span class="TextSegSigDiff">teme</span><span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">t</span> produces a more readable output, by omitting th<span class="TextSegSigDiff">e</span> e<span class="TextSegSigDiff">nclosing</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">enclosing</span> quotes and by printing escaped and special characters:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">quotes and by printing escaped and special characters:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; '&quot;Isn\'t,&quot; she said.'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; '&quot;Isn\'t,&quot; she said.'</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; '&quot;Isn\'t,&quot; she said.'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; '&quot;Isn\'t,&quot; she said.'</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>'&quot;Isn\'t,&quot; she said.'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print '&quot;Isn\'t,&quot; she said.'</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &quot;Isn't,&quot; she said.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &quot;Isn't,&quot; she said.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; s = 'First line.\nSecond line.'&nbsp; # \n means newline</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; s = 'First line.\nSecond line.'&nbsp; # \n means newline</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; s&nbsp; # without print<span class="TextSegSigDiff">()</span>, \n is included in the output</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; s&nbsp; # without print, \n is included in the output</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; 'First line.\nSecond line.'</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; 'First line.\nSecond line.'</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(s)</span>&nbsp; # with print<span class="TextSegSigDiff">()</span>, \n produces a new line</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print <span class="TextSegSigDiff">s</span>&nbsp; # with print, \n produces a new line</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; First line.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; First line.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Second line.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Second line.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you don't want characters prefaced by &quot;\&quot; to be interpreted as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you don't want characters prefaced by &quot;\&quot; to be interpreted as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">special characters, you can use *raw strings* by adding an &quot;r&quot; before</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">special characters, you can use *raw strings* by adding an &quot;r&quot; before</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the first quote:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the first quote:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>'C:\some\name'<span class="TextSegSigDiff">)</span>&nbsp; # here \n means newline!</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print 'C:\some\name'&nbsp; # here \n means newline!</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; C:\some</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; C:\some</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ame</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ame</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>r'C:\some\name'<span class="TextSegSigDiff">)</span>&nbsp; # note the r before the quote</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print r'C:\some\name'&nbsp; # note the r before the quote</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; C:\some\name</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; C:\some\name</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">String literals can span multiple lines.&nbsp; One way is using triple-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">String literals can span multiple lines.&nbsp; One way is using triple-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">quotes: &quot;&quot;&quot;&quot;...&quot;&quot;&quot;&quot; or &quot;'''...'''&quot;.&nbsp; End of lines are automatically</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">quotes: &quot;&quot;&quot;&quot;...&quot;&quot;&quot;&quot; or &quot;'''...'''&quot;.&nbsp; End of lines are automatically</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">included in the string, but it's possible to prevent this by adding a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">included in the string, but it's possible to prevent this by adding a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;\&quot; at the end of the line.&nbsp; The following example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;\&quot; at the end of the line.&nbsp; The following example:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>&quot;&quot;&quot;\</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; print &quot;&quot;&quot;\</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; Usage: thingy [OPTIONS]</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; Usage: thingy [OPTIONS]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; -h&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Display this usage message</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; -h&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Display this usage message</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; -H hostname&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Hostname to connect to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; -H hostname&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Hostname to connect to</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &quot;&quot;&quot;<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &quot;&quot;&quot;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">produces the following output (note that the initial newline is not</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">produces the following output (note that the initial newline is not</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">included):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">included):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Usage: thingy [OPTIONS]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Usage: thingy [OPTIONS]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; -h&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Display this usage message</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; -h&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Display this usage message</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; -H hostname&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Hostname to connect to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; -H hostname&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Hostname to connect to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Strings can be concatenated (glued together) with the &quot;+&quot; operator,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Strings can be concatenated (glued together) with the &quot;+&quot; operator,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and repeated with &quot;*&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and repeated with &quot;*&quot;:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # 3 times 'un', followed by 'ium'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # 3 times 'un', followed by 'ium'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 3 * 'un' + 'ium'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 3 * 'un' + 'ium'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'unununium'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'unununium'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Two or more *string literals* (i.e. the ones enclosed between quotes)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Two or more *string literals* (i.e. the ones enclosed between quotes)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">next to each other are automatically concatenated.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">next to each other are automatically concatenated.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 'Py' 'thon'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 'Py' 'thon'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'Python'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'Python'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This only works with two literals though, not with variables or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This only works with two literals though, not with variables or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">expressions:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">expressions:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; prefix = 'Py'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; prefix = 'Py'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; prefix 'thon'&nbsp; # can't concatenate a variable and a string literal</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; prefix 'thon'&nbsp; # can't concatenate a variable and a string literal</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; SyntaxError: invalid syntax</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; SyntaxError: invalid syntax</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; ('un' * 3) 'ium'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; ('un' * 3) 'ium'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; SyntaxError: invalid syntax</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; SyntaxError: invalid syntax</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you want to concatenate variables or a variable and a literal, use</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you want to concatenate variables or a variable and a literal, use</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;+&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;+&quot;:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; prefix + 'thon'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; prefix + 'thon'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'Python'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'Python'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This feature is particularly useful when you want to break long</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This feature is particularly useful when you want to break long</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">strings:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">strings:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; text = ('Put several strings within parentheses '</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; text = ('Put several strings within parentheses '</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 'to have them joined together.')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 'to have them joined together.')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; text</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; text</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'Put several strings within parentheses to have them joined together.'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'Put several strings within parentheses to have them joined together.'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Strings can be *indexed* (subscripted), with the first character</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Strings can be *indexed* (subscripted), with the first character</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">having index 0. There is no separate character type; a character is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">having index 0. There is no separate character type; a character is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">simply a string of size one:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">simply a string of size one:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word = 'Python'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word = 'Python'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[0]&nbsp; # character in position 0</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[0]&nbsp; # character in position 0</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'P'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'P'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[5]&nbsp; # character in position 5</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[5]&nbsp; # character in position 5</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'n'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'n'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Indices may also be negative numbers, to start counting from the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Indices may also be negative numbers, to start counting from the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">right:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">right:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[-1]&nbsp; # last character</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[-1]&nbsp; # last character</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'n'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'n'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[-2]&nbsp; # second-last character</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[-2]&nbsp; # second-last character</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'o'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'o'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[-6]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[-6]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'P'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'P'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note that since -0 is the same as 0, negative indices start from -1.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note that since -0 is the same as 0, negative indices start from -1.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In addition to indexing, *slicing* is also supported.&nbsp; While indexing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In addition to indexing, *slicing* is also supported.&nbsp; While indexing</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">is used to obtain individual characters, *slicing* allows you to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is used to obtain individual characters, *slicing* allows you to</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">obtain substring:</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">obtain <span class="TextSegSigDiff">a</span> substring:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[0:2]&nbsp; # characters from position 0 (included) to 2 (excluded)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[0:2]&nbsp; # characters from position 0 (included) to 2 (excluded)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'Py'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'Py'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[2:5]&nbsp; # characters from position 2 (included) to 5 (excluded)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[2:5]&nbsp; # characters from position 2 (included) to 5 (excluded)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'tho'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'tho'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note how the start is always included, and the end always excluded.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note how the start is always included, and the end always excluded.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This makes sure that &quot;s[:i] + s[i:]&quot; is always equal to &quot;s&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This makes sure that &quot;s[:i] + s[i:]&quot; is always equal to &quot;s&quot;:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[:2] + word[2:]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[:2] + word[2:]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'Python'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'Python'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[:4] + word[4:]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[:4] + word[4:]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'Python'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'Python'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Slice indices have useful defaults; an omitted first index defaults to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Slice indices have useful defaults; an omitted first index defaults to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">zero, an omitted second index defaults to the size of the string being</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">zero, an omitted second index defaults to the size of the string being</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">sliced.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">sliced.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[:2]&nbsp;&nbsp; # character from the beginning to position 2 (excluded)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[:2]&nbsp;&nbsp; # character from the beginning to position 2 (excluded)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'Py'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'Py'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[4:]&nbsp;&nbsp; # characters from position 4 (included) to the end</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[4:]&nbsp;&nbsp; # characters from position 4 (included) to the end</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'on'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'on'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[-2:]&nbsp; # characters from the second-last (included) to the end</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[-2:]&nbsp; # characters from the second-last (included) to the end</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'on'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'on'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">One way to remember how slices work is to think of the indices as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">One way to remember how slices work is to think of the indices as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">pointing *between* characters, with the left edge of the first</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">pointing *between* characters, with the left edge of the first</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">character numbered 0. Then the right edge of the last character of a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">character numbered 0. Then the right edge of the last character of a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">string of *n* characters has index *n*, for example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">string of *n* characters has index *n*, for example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; +---+---+---+---+---+---+</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; +---+---+---+---+---+---+</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; | P | y | t | h | o | n |</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; | P | y | t | h | o | n |</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; +---+---+---+---+---+---+</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; +---+---+---+---+---+---+</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 0&nbsp;&nbsp; 1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5&nbsp;&nbsp; 6</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 0&nbsp;&nbsp; 1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5&nbsp;&nbsp; 6</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; -6&nbsp; -5&nbsp; -4&nbsp; -3&nbsp; -2&nbsp; -1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; -6&nbsp; -5&nbsp; -4&nbsp; -3&nbsp; -2&nbsp; -1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The first row of numbers gives the position of the indices 0...6 in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The first row of numbers gives the position of the indices 0...6 in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the string; the second row gives the corresponding negative indices.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the string; the second row gives the corresponding negative indices.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The slice from *i* to *j* consists of all characters between the edges</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The slice from *i* to *j* consists of all characters between the edges</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">labeled *i* and *j*, respectively.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">labeled *i* and *j*, respectively.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For non-negative indices, the length of a slice is the difference of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For non-negative indices, the length of a slice is the difference of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the indices, if both are within bounds.&nbsp; For example, the length of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the indices, if both are within bounds.&nbsp; For example, the length of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;word[1:3]&quot; is 2.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;word[1:3]&quot; is 2.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Attempting to use an index that is too large will result in an error:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Attempting to use an index that is too large will result in an error:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[42]&nbsp; # the word only has 6 characters</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[42]&nbsp; # the word only has 6 characters</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; IndexError: string index out of range</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; IndexError: string index out of range</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">However, out of range slice indexes are handled gracefully when used</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">However, out of range slice indexes are handled gracefully when used</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for slicing:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for slicing:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[4:42]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[4:42]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'on'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'on'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[42:]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[42:]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ''</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ''</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python strings cannot be changed --- they are *immutable*. Therefore,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python strings cannot be changed --- they are *immutable*. Therefore,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">assigning to an indexed position in the string results in an error:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">assigning to an indexed position in the string results in an error:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[0] = 'J'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[0] = 'J'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; TypeError: 'str' object does not support item assignment</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; TypeError: 'str' object does not support item assignment</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[2:] = 'py'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[2:] = 'py'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; TypeError: 'str' object does not support item assignment</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; TypeError: 'str' object does not support item assignment</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you need a different string, you should create a new one:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you need a different string, you should create a new one:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 'J' + word[1:]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 'J' + word[1:]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'Jython'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'Jython'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[:2] + 'py'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; word[:2] + 'py'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'Pypy'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'Pypy'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The built-in function &quot;len()&quot; returns the length of a string:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The built-in function &quot;len()&quot; returns the length of a string:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; s = 'supercalifragilisticexpialidocious'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; s = 'supercalifragilisticexpialidocious'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; len(s)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; len(s)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 34</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 34</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">See also:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">See also:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">Text</span> Sequence Type --- <span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">t</span>r</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp; Sequence Type<span class="TextSegSigDiff">s</span> --- <span class="TextSegSigDiff">str,</span> <span class="TextSegSigDiff">unicode,</span> <span class="TextSegSigDiff">list,</span> <span class="TextSegSigDiff">tuple,</span> <span class="TextSegSigDiff">bytea</span>r<span class="TextSegSigDiff">ray,</span> <span class="TextSegSigDiff">buffer,</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">xrange</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">Strings,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">strings</span> <span class="TextSegSigDiff">described</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">next</span> <span class="TextSegSigDiff">section,</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">Strings</span> are examples of *sequence types*, and support the common</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; are examples of *sequence types*, and support the common</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; operations supported by such types.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; operations supported by such types.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp; String Methods</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; String Methods</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; Strings support a large number of <span class="TextSegSigDiff">methods</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">basic</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">Both</span> strings <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">Unicode</span> s<span class="TextSegSigDiff">trings</span> <span class="TextSegSigDiff">s</span>upport a large number of</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; transformations and searching.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">methods</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">basic</span> transformations and searching.</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">Formatted</span> <span class="TextSegSigDiff">string</span> <span class="TextSegSigDiff">literals</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">String</span> <span class="TextSegSigDiff">literals</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">embedded</span> <span class="TextSegSigDiff">expressions.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; Format String Syntax</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; Format String Syntax</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; Information about string formatting with &quot;str.format()&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; Information about string formatting with &quot;str.format()&quot;.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">printf-style</span> String Formatting</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp; String Formatting <span class="TextSegSigDiff">Operations</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; The old formatting operations invoked when strings a<span class="TextSegSigDiff">re</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">l</span><span class="TextSegSigDiff">eft</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; The old formatting operations invoked when strings a<span class="TextSegSigDiff">nd</span> <span class="TextSegSigDiff">Unicode</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; operand of the &quot;%&quot; operator are described in <span class="TextSegSigDiff">more</span> <span class="TextSegSigDiff">detail</span> <span class="TextSegSigDiff">here.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">strings</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">left</span> operand of the &quot;%&quot; operator are described in</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">more</span> <span class="TextSegSigDiff">detail</span> <span class="TextSegSigDiff">here.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">Strings</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">---------------</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Starting</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">2.0</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">new</span> <span class="TextSegSigDiff">data</span> <span class="TextSegSigDiff">type</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">storing</span> <span class="TextSegSigDiff">text</span> <span class="TextSegSigDiff">data</span> <span class="TextSegSigDiff">is</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">available</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">programmer:</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">object.</span> <span class="TextSegSigDiff">It</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">used</span> <span class="TextSegSigDiff">to</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">store</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">manipulate</span> <span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">data</span> <span class="TextSegSigDiff">(see</span> <span class="TextSegSigDiff">http://www.unicode.org/)</span> <span class="TextSegSigDiff">and</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">integrates</span> <span class="TextSegSigDiff">well</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">existing</span> <span class="TextSegSigDiff">string</span> <span class="TextSegSigDiff">objects,</span> <span class="TextSegSigDiff">providing</span> <span class="TextSegSigDiff">auto-</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">conversions</span> <span class="TextSegSigDiff">where</span> <span class="TextSegSigDiff">necessary.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">has</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">advantage</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">providing</span> <span class="TextSegSigDiff">one</span> <span class="TextSegSigDiff">ordinal</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">every</span> <span class="TextSegSigDiff">character</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">every</span> <span class="TextSegSigDiff">script</span> <span class="TextSegSigDiff">used</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">modern</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">ancient</span> <span class="TextSegSigDiff">texts.</span> <span class="TextSegSigDiff">Previously,</span> <span class="TextSegSigDiff">there</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">were</span> <span class="TextSegSigDiff">only</span> <span class="TextSegSigDiff">256</span> <span class="TextSegSigDiff">possible</span> <span class="TextSegSigDiff">ordinals</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">script</span> <span class="TextSegSigDiff">characters.</span> <span class="TextSegSigDiff">Texts</span> <span class="TextSegSigDiff">were</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">typically</span> <span class="TextSegSigDiff">bound</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">code</span> <span class="TextSegSigDiff">page</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">mapped</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">ordinals</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">script</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">characters.</span> <span class="TextSegSigDiff">This</span> <span class="TextSegSigDiff">lead</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">very</span> <span class="TextSegSigDiff">much</span> <span class="TextSegSigDiff">confusion</span> <span class="TextSegSigDiff">especially</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">respect</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">internationalization</span> <span class="TextSegSigDiff">(usually</span> <span class="TextSegSigDiff">written</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">&quot;i18n&quot;</span> <span class="TextSegSigDiff">---</span> <span class="TextSegSigDiff">&quot;'i'&quot;</span> <span class="TextSegSigDiff">+</span> <span class="TextSegSigDiff">18</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">characters</span> <span class="TextSegSigDiff">+</span> <span class="TextSegSigDiff">&quot;'n'&quot;)</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">software.</span>&nbsp; <span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">solves</span> <span class="TextSegSigDiff">these</span> <span class="TextSegSigDiff">problems</span> <span class="TextSegSigDiff">by</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">defining</span> <span class="TextSegSigDiff">one</span> <span class="TextSegSigDiff">code</span> <span class="TextSegSigDiff">page</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">all</span> <span class="TextSegSigDiff">scripts.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Creating</span> <span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">strings</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">just</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">simple</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">creating</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">normal</span> <span class="TextSegSigDiff">strings:</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">u'Hello</span> <span class="TextSegSigDiff">World</span> <span class="TextSegSigDiff">!'</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">u'Hello</span> <span class="TextSegSigDiff">World</span> <span class="TextSegSigDiff">!'</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">small</span> <span class="TextSegSigDiff">&quot;'u'&quot;</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">front</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">quote</span> <span class="TextSegSigDiff">indicates</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">string</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">supposed</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">created.</span> <span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">want</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">include</span> <span class="TextSegSigDiff">special</span> <span class="TextSegSigDiff">characters</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">string,</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">do</span> <span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">using</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">*Unicode-Escape*</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">encoding.</span> <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">following</span> <span class="TextSegSigDiff">example</span> <span class="TextSegSigDiff">shows</span> <span class="TextSegSigDiff">how:</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">u'Hello\u0020World</span> <span class="TextSegSigDiff">!'</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">u'Hello</span> <span class="TextSegSigDiff">World</span> <span class="TextSegSigDiff">!'</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">escape</span> <span class="TextSegSigDiff">sequence</span> <span class="TextSegSigDiff">&quot;\u0020&quot;</span> <span class="TextSegSigDiff">indicates</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">insert</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">character</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">ordinal</span> <span class="TextSegSigDiff">value</span> <span class="TextSegSigDiff">0x0020</span> <span class="TextSegSigDiff">(the</span> <span class="TextSegSigDiff">space</span> <span class="TextSegSigDiff">character)</span> <span class="TextSegSigDiff">at</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">given</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">position.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Other</span> <span class="TextSegSigDiff">characters</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">interpreted</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">using</span> <span class="TextSegSigDiff">their</span> <span class="TextSegSigDiff">respective</span> <span class="TextSegSigDiff">ordinal</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">values</span> <span class="TextSegSigDiff">directly</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">ordinals.</span>&nbsp; <span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">literal</span> <span class="TextSegSigDiff">strings</span> <span class="TextSegSigDiff">in</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">standard</span> <span class="TextSegSigDiff">Latin-1</span> <span class="TextSegSigDiff">encoding</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">used</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">many</span> <span class="TextSegSigDiff">Western</span> <span class="TextSegSigDiff">countries,</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">find</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">convenient</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">lower</span> <span class="TextSegSigDiff">256</span> <span class="TextSegSigDiff">characters</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">Unicode</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">same</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">256</span> <span class="TextSegSigDiff">characters</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">Latin-1.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">For</span> <span class="TextSegSigDiff">experts,</span> <span class="TextSegSigDiff">there</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">also</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">raw</span> <span class="TextSegSigDiff">mode</span> <span class="TextSegSigDiff">just</span> <span class="TextSegSigDiff">like</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">one</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">normal</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">strings.</span> <span class="TextSegSigDiff">You</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">prefix</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">opening</span> <span class="TextSegSigDiff">quote</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">'ur'</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">Python</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">*Raw-Unicode-Escape*</span> <span class="TextSegSigDiff">encoding.</span> <span class="TextSegSigDiff">It</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">only</span> <span class="TextSegSigDiff">apply</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">above</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;\uXXXX&quot;</span> <span class="TextSegSigDiff">conversion</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">there</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">uneven</span> <span class="TextSegSigDiff">number</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">backslashes</span> <span class="TextSegSigDiff">in</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">front</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">small</span> <span class="TextSegSigDiff">'u'.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">ur'Hello\u0020World</span> <span class="TextSegSigDiff">!'</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">u'Hello</span> <span class="TextSegSigDiff">World</span> <span class="TextSegSigDiff">!'</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">ur'Hello\\u0020World</span> <span class="TextSegSigDiff">!'</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">u'Hello\\\\u0020World</span> <span class="TextSegSigDiff">!'</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">raw</span> <span class="TextSegSigDiff">mode</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">most</span> <span class="TextSegSigDiff">useful</span> <span class="TextSegSigDiff">when</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">enter</span> <span class="TextSegSigDiff">lots</span> <span class="TextSegSigDiff">of</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">backslashes,</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">necessary</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">regular</span> <span class="TextSegSigDiff">expressions.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Apart</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">these</span> <span class="TextSegSigDiff">standard</span> <span class="TextSegSigDiff">encodings,</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">provides</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">whole</span> <span class="TextSegSigDiff">set</span> <span class="TextSegSigDiff">of</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">other</span> <span class="TextSegSigDiff">ways</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">creating</span> <span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">strings</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">basis</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">known</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">encoding.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">built-in</span> <span class="TextSegSigDiff">function</span> <span class="TextSegSigDiff">&quot;unicode()&quot;</span> <span class="TextSegSigDiff">provides</span> <span class="TextSegSigDiff">access</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">all</span> <span class="TextSegSigDiff">registered</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">codecs</span> <span class="TextSegSigDiff">(COders</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">DECoders).</span> <span class="TextSegSigDiff">Some</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">more</span> <span class="TextSegSigDiff">well</span> <span class="TextSegSigDiff">known</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">encodings</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">these</span> <span class="TextSegSigDiff">codecs</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">convert</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">*Latin-1*,</span> <span class="TextSegSigDiff">*ASCII*,</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">*UTF-8*,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">*UTF-16*.</span> <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">latter</span> <span class="TextSegSigDiff">two</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">variable-length</span> <span class="TextSegSigDiff">encodings</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">store</span> <span class="TextSegSigDiff">each</span> <span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">character</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">one</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">more</span> <span class="TextSegSigDiff">bytes.</span> <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">default</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">encoding</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">normally</span> <span class="TextSegSigDiff">set</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">ASCII,</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">passes</span> <span class="TextSegSigDiff">through</span> <span class="TextSegSigDiff">characters</span> <span class="TextSegSigDiff">in</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">range</span> <span class="TextSegSigDiff">0</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">127</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">rejects</span> <span class="TextSegSigDiff">any</span> <span class="TextSegSigDiff">other</span> <span class="TextSegSigDiff">characters</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">error.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">When</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">string</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">printed,</span> <span class="TextSegSigDiff">written</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">file,</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">converted</span> <span class="TextSegSigDiff">with</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;str()&quot;,</span> <span class="TextSegSigDiff">conversion</span> <span class="TextSegSigDiff">takes</span> <span class="TextSegSigDiff">place</span> <span class="TextSegSigDiff">using</span> <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">default</span> <span class="TextSegSigDiff">encoding.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">u&quot;abc&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">u'abc'</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">str(u&quot;abc&quot;)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">'abc'</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">u&quot;äöü&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">u'\xe4\xf6\xfc'</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">str(u&quot;äöü&quot;)</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Traceback</span> <span class="TextSegSigDiff">(most</span> <span class="TextSegSigDiff">recent</span> <span class="TextSegSigDiff">call</span> <span class="TextSegSigDiff">last):</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">File</span> <span class="TextSegSigDiff">&quot;&lt;stdin&gt;&quot;,</span> <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">1,</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">?</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">UnicodeEncodeError:</span> <span class="TextSegSigDiff">'ascii'</span> <span class="TextSegSigDiff">codec</span> <span class="TextSegSigDiff">can't</span> <span class="TextSegSigDiff">encode</span> <span class="TextSegSigDiff">characters</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">position</span> <span class="TextSegSigDiff">0-2:</span> <span class="TextSegSigDiff">ordinal</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">range(128)</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">To</span> <span class="TextSegSigDiff">convert</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">string</span> <span class="TextSegSigDiff">into</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">8-bit</span> <span class="TextSegSigDiff">string</span> <span class="TextSegSigDiff">using</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">specific</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">encoding,</span> <span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">objects</span> <span class="TextSegSigDiff">provide</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">&quot;encode()&quot;</span> <span class="TextSegSigDiff">method</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">takes</span> <span class="TextSegSigDiff">one</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">argument,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">name</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">encoding.</span>&nbsp; <span class="TextSegSigDiff">Lowercase</span> <span class="TextSegSigDiff">names</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">encodings</span> <span class="TextSegSigDiff">are</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">preferred.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">u&quot;äöü&quot;.encode('utf-8')</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">'\xc3\xa4\xc3\xb6\xc3\xbc'</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">data</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">specific</span> <span class="TextSegSigDiff">encoding</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">want</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">produce</span> <span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">corresponding</span> <span class="TextSegSigDiff">Unicode</span> <span class="TextSegSigDiff">string</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">it,</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;unicode()&quot;</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">function</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">encoding</span> <span class="TextSegSigDiff">name</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">second</span> <span class="TextSegSigDiff">argument.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">unicode('\xc3\xa4\xc3\xb6\xc3\xbc',</span> <span class="TextSegSigDiff">'utf-8')</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">u'\xe4\xf6\xfc'</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Lists</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Lists</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python knows a number of *compound* data types, used to group together</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python knows a number of *compound* data types, used to group together</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">other values.&nbsp; The most versatile is the *list*, which can be written</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">other values.&nbsp; The most versatile is the *list*, which can be written</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">as a list of comma-separated values (items) between square brackets.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">as a list of comma-separated values (items) between square brackets.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Lists might contain items of different types, but usually the items</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Lists might contain items of different types, but usually the items</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">all have the same type.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">all have the same type.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares = [1, 4, 9, 16, 25]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares = [1, 4, 9, 16, 25]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [1, 4, 9, 16, 25]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [1, 4, 9, 16, 25]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Like strings (and all other built-in *sequence* type), lists can be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Like strings (and all other built-in *sequence* type), lists can be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">indexed and sliced:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">indexed and sliced:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares[0]&nbsp; # indexing returns the item</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares[0]&nbsp; # indexing returns the item</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares[-1]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares[-1]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 25</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 25</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares[-3:]&nbsp; # slicing returns a new list</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares[-3:]&nbsp; # slicing returns a new list</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [9, 16, 25]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [9, 16, 25]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">All slice operations return a new list containing the requested</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">All slice operations return a new list containing the requested</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">elements.&nbsp; This means that the following slice returns a new (shallow)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">elements.&nbsp; This means that the following slice returns a new (shallow)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">copy of the list:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">copy of the list:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares[:]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares[:]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [1, 4, 9, 16, 25]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [1, 4, 9, 16, 25]</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">Lists also support operations like concatenation:</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Lists also support<span class="TextSegSigDiff">s</span> operations like concatenation:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares + [36, 49, 64, 81, 100]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; squares + [36, 49, 64, 81, 100]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Unlike strings, which are *immutable*, lists are a *mutable* type,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Unlike strings, which are *immutable*, lists are a *mutable* type,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">i.e. it is possible to change their content:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">i.e. it is possible to change their content:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; cubes = [1, 8, 27, 65, 125]&nbsp; # something's wrong here</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; cubes = [1, 8, 27, 65, 125]&nbsp; # something's wrong here</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 4 ** 3&nbsp; # the cube of 4 is 64, not 65!</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 4 ** 3&nbsp; # the cube of 4 is 64, not 65!</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 64</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 64</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; cubes[3] = 64&nbsp; # replace the wrong value</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; cubes[3] = 64&nbsp; # replace the wrong value</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; cubes</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; cubes</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [1, 8, 27, 64, 125]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [1, 8, 27, 64, 125]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">You can also add new items at the end of the list, by using the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">You can also add new items at the end of the list, by using the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;append()&quot; *method* (we will see more about methods later):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;append()&quot; *method* (we will see more about methods later):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; cubes.append(216)&nbsp; # add the cube of 6</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; cubes.append(216)&nbsp; # add the cube of 6</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; cubes.append(7 ** 3)&nbsp; # and the cube of 7</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; cubes.append(7 ** 3)&nbsp; # and the cube of 7</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; cubes</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; cubes</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [1, 8, 27, 64, 125, 216, 343]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [1, 8, 27, 64, 125, 216, 343]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Assignment to slices is also possible, and this can even change the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Assignment to slices is also possible, and this can even change the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">size of the list or clear it entirely:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">size of the list or clear it entirely:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; letters</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; letters</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ['a', 'b', 'c', 'd', 'e', 'f', 'g']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ['a', 'b', 'c', 'd', 'e', 'f', 'g']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # replace some values</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # replace some values</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; letters[2:5] = ['C', 'D', 'E']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; letters[2:5] = ['C', 'D', 'E']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; letters</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; letters</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ['a', 'b', 'C', 'D', 'E', 'f', 'g']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ['a', 'b', 'C', 'D', 'E', 'f', 'g']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # now remove them</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # now remove them</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; letters[2:5] = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; letters[2:5] = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; letters</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; letters</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ['a', 'b', 'f', 'g']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ['a', 'b', 'f', 'g']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # clear the list by replacing all the elements with an empty list</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # clear the list by replacing all the elements with an empty list</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; letters[:] = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; letters[:] = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; letters</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; letters</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The built-in function &quot;len()&quot; also applies to lists:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The built-in function &quot;len()&quot; also applies to lists:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; letters = ['a', 'b', 'c', 'd']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; letters = ['a', 'b', 'c', 'd']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; len(letters)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; len(letters)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 4</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 4</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">It is possible to nest lists (create lists containing other lists),</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">It is possible to nest lists (create lists containing other lists),</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = ['a', 'b', 'c']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = ['a', 'b', 'c']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; n = [1, 2, 3]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; n = [1, 2, 3]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x = [a, n]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x = [a, n]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [['a', 'b', 'c'], [1, 2, 3]]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [['a', 'b', 'c'], [1, 2, 3]]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x[0]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x[0]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ['a', 'b', 'c']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ['a', 'b', 'c']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x[0][1]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x[0][1]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'b'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'b'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">First Steps Towards Programming</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">First Steps Towards Programming</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===============================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===============================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Of course, we can use Python for more complicated tasks than adding</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Of course, we can use Python for more complicated tasks than adding</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">two and two together.&nbsp; For instance, we can write an initial sub-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">two and two together.&nbsp; For instance, we can write an initial sub-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">sequence of the *Fibonacci* series as follows:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">sequence of the *Fibonacci* series as follows:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # Fibonacci series:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # Fibonacci series:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ... # the sum of two elements defines the next</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... # the sum of two elements defines the next</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ... a, b = 0, 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... a, b = 0, 1</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; while b &lt; 10:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; while b &lt; 10:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(b)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print <span class="TextSegSigDiff">b</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; a, b = b, a+b</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; a, b = b, a+b</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 2</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 2</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 3</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 3</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 5</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 5</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 8</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 8</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This example introduces several new features.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This example introduces several new features.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* The first line contains a *multiple assignment*: the variables &quot;a&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* The first line contains a *multiple assignment*: the variables &quot;a&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; and &quot;b&quot; simultaneously get the new values 0 and 1.&nbsp; On the last line</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; and &quot;b&quot; simultaneously get the new values 0 and 1.&nbsp; On the last line</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; this is used again, demonstrating that the expressions on the right-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; this is used again, demonstrating that the expressions on the right-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; hand side are all evaluated first before any of the assignments take</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; hand side are all evaluated first before any of the assignments take</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; place.&nbsp; The right-hand side expressions are evaluated&nbsp; from the left</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; place.&nbsp; The right-hand side expressions are evaluated&nbsp; from the left</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; to the right.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; to the right.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* The &quot;while&quot; loop executes as long as the condition (here: &quot;b &lt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* The &quot;while&quot; loop executes as long as the condition (here: &quot;b &lt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; 10&quot;) remains true.&nbsp; In Python, like in C, any non-zero integer value</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; 10&quot;) remains true.&nbsp; In Python, like in C, any non-zero integer value</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; is true; zero is false.&nbsp; The condition may also be a string or list</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; is true; zero is false.&nbsp; The condition may also be a string or list</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; value, in fact any sequence; anything with a non-zero length is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; value, in fact any sequence; anything with a non-zero length is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; true, empty sequences are false.&nbsp; The test used in the example is a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; true, empty sequences are false.&nbsp; The test used in the example is a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; simple comparison.&nbsp; The standard comparison operators are written</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; simple comparison.&nbsp; The standard comparison operators are written</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; the same as in C: &quot;&lt;&quot; (less than), &quot;&gt;&quot; (greater than), &quot;==&quot; (equal</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; the same as in C: &quot;&lt;&quot; (less than), &quot;&gt;&quot; (greater than), &quot;==&quot; (equal</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; to), &quot;&lt;=&quot; (less than or equal to), &quot;&gt;=&quot; (greater than or equal to)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; to), &quot;&lt;=&quot; (less than or equal to), &quot;&gt;=&quot; (greater than or equal to)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; and &quot;!=&quot; (not equal to).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; and &quot;!=&quot; (not equal to).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* The *body* of the loop is *indented*: indentation is Python's way</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* The *body* of the loop is *indented*: indentation is Python's way</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; of grouping statements.&nbsp; At the interactive prompt, you have to type</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; of grouping statements.&nbsp; At the interactive prompt, you have to type</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; a tab or space(s) for each indented line.&nbsp; In practice you will</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; a tab or space(s) for each indented line.&nbsp; In practice you will</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; prepare more complicated input for Python with a text editor; all</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; prepare more complicated input for Python with a text editor; all</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; decent text editors have an auto-indent facility.&nbsp; When a compound</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; decent text editors have an auto-indent facility.&nbsp; When a compound</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; statement is entered interactively, it must be followed by a blank</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; statement is entered interactively, it must be followed by a blank</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; line to indicate completion (since the parser cannot guess when you</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; line to indicate completion (since the parser cannot guess when you</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; have typed the last line).&nbsp; Note that each line within a basic block</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; have typed the last line).&nbsp; Note that each line within a basic block</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; must be indented by the same amount.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; must be indented by the same amount.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">* The &quot;print<span class="TextSegSigDiff">()</span>&quot; <span class="TextSegSigDiff">fu</span><span class="TextSegSigDiff">nction</span> writes the value of the <span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">rgume</span><span class="TextSegSigDiff">nt</span>(s) it is</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">* The &quot;print&quot; <span class="TextSegSigDiff">statemen</span><span class="TextSegSigDiff">t</span> writes the value of the <span class="TextSegSigDiff">expr</span><span class="TextSegSigDiff">ession</span>(s) it is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; given. It differs from just writing the expression you want to <span class="TextSegSigDiff">write</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; given.&nbsp; It differs from just writing the expression you want to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; (as we did earlier in the calculator examples) in the way it <span class="TextSegSigDiff">handles</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">write</span> (as we did earlier in the calculator examples) in the way it</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; multiple <span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">rguments,</span> <span class="TextSegSigDiff">floating</span> <span class="TextSegSigDiff">point</span> <span class="TextSegSigDiff">quantities,</span> and strings.&nbsp; Strings</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">handles</span> multiple <span class="TextSegSigDiff">expr</span><span class="TextSegSigDiff">es</span><span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">s</span> and strings.&nbsp; Strings <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">printed</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">printed</span> without quotes, and a space is inserted between items,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; without quotes, and a space is inserted between items, <span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">can</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">can</span> format things nicely, like this:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; format things nicely, like this:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &gt;&gt;&gt; i = 256*256</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &gt;&gt;&gt; i = 256*256</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>'The value of i is', i<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &gt;&gt;&gt; print 'The value of i is', i</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; The value of i is 65536</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; The value of i is 65536</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">keyword</span> <span class="TextSegSigDiff">argument</span> <span class="TextSegSigDiff">*end*</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">used</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">avoid</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">newline</span> <span class="TextSegSigDiff">after</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp; t<span class="TextSegSigDiff">he</span> <span class="TextSegSigDiff">output,</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">end</span> the <span class="TextSegSigDiff">output</span> <span class="TextSegSigDiff">w</span><span class="TextSegSigDiff">ith</span> a <span class="TextSegSigDiff">diff</span>ere<span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">string</span>:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">A</span> t<span class="TextSegSigDiff">railing</span> <span class="TextSegSigDiff">comma</span> <span class="TextSegSigDiff">avoi</span><span class="TextSegSigDiff">ds</span> the <span class="TextSegSigDiff">ne</span><span class="TextSegSigDiff">wline</span> a<span class="TextSegSigDiff">ft</span>er <span class="TextSegSigDiff">th</span>e <span class="TextSegSigDiff">output</span>:</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &gt;&gt;&gt; a, b = 0, 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &gt;&gt;&gt; a, b = 0, 1</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &gt;&gt;&gt; while b &lt; 1000:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &gt;&gt;&gt; while b &lt; 1000:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>b, <span class="TextSegSigDiff">end=',')</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; ...&nbsp; &nbsp;&nbsp; print b,</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...&nbsp; &nbsp;&nbsp; a, b = b, a+b</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...&nbsp; &nbsp;&nbsp; a, b = b, a+b</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; 1<span class="TextSegSigDiff">,1,2,3,5,8,</span>13<span class="TextSegSigDiff">,</span>21<span class="TextSegSigDiff">,</span>34<span class="TextSegSigDiff">,</span>55<span class="TextSegSigDiff">,</span>89<span class="TextSegSigDiff">,</span>144<span class="TextSegSigDiff">,</span>233<span class="TextSegSigDiff">,</span>377<span class="TextSegSigDiff">,</span>610<span class="TextSegSigDiff">,</span>987<span class="TextSegSigDiff">,</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; 1 <span class="TextSegSigDiff">1</span> <span class="TextSegSigDiff">2</span> <span class="TextSegSigDiff">3</span> <span class="TextSegSigDiff">5</span> <span class="TextSegSigDiff">8</span> 13 21 34 55 89 144 233 377 610 987</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">Note</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">interpreter</span> <span class="TextSegSigDiff">inserts</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">newline</span> <span class="TextSegSigDiff">before</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">prints</span> <span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">next</span> <span class="TextSegSigDiff">prompt</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">last</span> <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">was</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">completed.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-[ Footnotes ]-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-[ Footnotes ]-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">[1] Since &quot;**&quot; has higher precedence than &quot;-&quot;, &quot;-3**2&quot; will be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">[1] Since &quot;**&quot; has higher precedence than &quot;-&quot;, &quot;-3**2&quot; will be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; interpreted as &quot;-(3**2)&quot; and thus result in &quot;-9&quot;.&nbsp; To avoid this</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; interpreted as &quot;-(3**2)&quot; and thus result in &quot;-9&quot;.&nbsp; To avoid this</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; and get &quot;9&quot;, you can use &quot;(-3)**2&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; and get &quot;9&quot;, you can use &quot;(-3)**2&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">[2] Unlike other languages, special characters such as &quot;\n&quot; have</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">[2] Unlike other languages, special characters such as &quot;\n&quot; have</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; the same meaning with both single (&quot;'...'&quot;) and double (&quot;&quot;...&quot;&quot;)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; the same meaning with both single (&quot;'...'&quot;) and double (&quot;&quot;...&quot;&quot;)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; quotes. The only difference between the two is that within single</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; quotes. The only difference between the two is that within single</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; quotes you don't need to escape &quot;&quot;&quot; (but you have to escape &quot;\'&quot;)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; quotes you don't need to escape &quot;&quot;&quot; (but you have to escape &quot;\'&quot;)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; and vice versa.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; and vice versa.</td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\tutorial\modules.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Modules</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Modules</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*******</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*******</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you quit from the Python interpreter and enter it again, the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you quit from the Python interpreter and enter it again, the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">definitions you have made (functions and variables) are lost.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">definitions you have made (functions and variables) are lost.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Therefore, if you want to write a somewhat longer program, you are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Therefore, if you want to write a somewhat longer program, you are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">better off using a text editor to prepare the input for the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">better off using a text editor to prepare the input for the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">interpreter and running it with that file as input instead.&nbsp; This is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interpreter and running it with that file as input instead.&nbsp; This is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">known as creating a *script*.&nbsp; As your program gets longer, you may</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">known as creating a *script*.&nbsp; As your program gets longer, you may</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">want to split it into several files for easier maintenance.&nbsp; You may</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">want to split it into several files for easier maintenance.&nbsp; You may</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">also want to use a handy function that you've written in several</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">also want to use a handy function that you've written in several</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">programs without copying its definition into each program.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">programs without copying its definition into each program.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">To support this, Python has a way to put definitions in a file and use</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">To support this, Python has a way to put definitions in a file and use</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">them in a script or in an interactive instance of the interpreter.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">them in a script or in an interactive instance of the interpreter.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Such a file is called a *module*; definitions from a module can be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Such a file is called a *module*; definitions from a module can be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*imported* into other modules or into the *main* module (the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*imported* into other modules or into the *main* module (the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">collection of variables that you have access to in a script executed</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">collection of variables that you have access to in a script executed</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">at the top level and in calculator mode).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">at the top level and in calculator mode).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A module is a file containing Python definitions and statements.&nbsp; The</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A module is a file containing Python definitions and statements.&nbsp; The</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">file name is the module name with the suffix &quot;.py&quot; appended.&nbsp; Within a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">file name is the module name with the suffix &quot;.py&quot; appended.&nbsp; Within a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">module, the module's name (as a string) is available as the value of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">module, the module's name (as a string) is available as the value of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the global variable &quot;__name__&quot;.&nbsp; For instance, use your favorite text</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the global variable &quot;__name__&quot;.&nbsp; For instance, use your favorite text</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">editor to create a file called &quot;fibo.py&quot; in the current directory with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">editor to create a file called &quot;fibo.py&quot; in the current directory with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the following contents:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the following contents:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; # Fibonacci numbers module</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; # Fibonacci numbers module</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def fib(n):&nbsp; &nbsp; # write Fibonacci series up to n</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def fib(n):&nbsp; &nbsp; # write Fibonacci series up to n</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; a, b = 0, 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; a, b = 0, 1</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; while b &lt; n:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; while b &lt; n:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>b, <span class="TextSegSigDiff">end='</span> <span class="TextSegSigDiff">')</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print b,</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a, b = b, a+b</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a, b = b, a+b</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">print()</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def fib2(n):&nbsp;&nbsp; # return Fibonacci series up to n</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def fib2(n):&nbsp;&nbsp; # return Fibonacci series up to n</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; result = []</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; result = []</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; a, b = 0, 1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; a, b = 0, 1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; while b &lt; n:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; while b &lt; n:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result.append(b)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result.append(b)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a, b = b, a+b</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; a, b = b, a+b</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return result</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; return result</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Now enter the Python interpreter and import this module with the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Now enter the Python interpreter and import this module with the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">following command:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">following command:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import fibo</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import fibo</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This does not enter the names of the functions defined in &quot;fibo&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This does not enter the names of the functions defined in &quot;fibo&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">directly in the current symbol table; it only enters the module name</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">directly in the current symbol table; it only enters the module name</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;fibo&quot; there. Using the module name you can access the functions:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;fibo&quot; there. Using the module name you can access the functions:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fibo.fib(1000)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fibo.fib(1000)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fibo.fib2(100)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fibo.fib2(100)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fibo.__name__</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fibo.__name__</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'fibo'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'fibo'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If you intend to use a function often you can assign it to a local</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you intend to use a function often you can assign it to a local</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">name:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">name:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fib = fibo.fib</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fib = fibo.fib</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fib(500)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fib(500)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 1 1 2 3 5 8 13 21 34 55 89 144 233 377</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 1 1 2 3 5 8 13 21 34 55 89 144 233 377</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">More on Modules</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">More on Modules</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===============</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===============</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">A module can contain executable statements as well as function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">A module can contain executable statements as well as function</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">definitions. These statements are intended to initialize the module.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">definitions. These statements are intended to initialize the module.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">They are executed only the *first* time the module name is encountered</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">They are executed only the *first* time the module name is encountered</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in an import statement. [1] (They are also run if the file is executed</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in an import statement. [1] (They are also run if the file is executed</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">as a script.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">as a script.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Each module has its own private symbol table, which is used as the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Each module has its own private symbol table, which is used as the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">global symbol table by all functions defined in the module. Thus, the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">global symbol table by all functions defined in the module. Thus, the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">author of a module can use global variables in the module without</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">author of a module can use global variables in the module without</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">worrying about accidental clashes with a user's global variables. On</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">worrying about accidental clashes with a user's global variables. On</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the other hand, if you know what you are doing you can touch a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the other hand, if you know what you are doing you can touch a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">module's global variables with the same notation used to refer to its</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">module's global variables with the same notation used to refer to its</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">functions, &quot;modname.itemname&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">functions, &quot;modname.itemname&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Modules can import other modules.&nbsp; It is customary but not required to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Modules can import other modules.&nbsp; It is customary but not required to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">place all &quot;import&quot; statements at the beginning of a module (or script,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">place all &quot;import&quot; statements at the beginning of a module (or script,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for that matter).&nbsp; The imported module names are placed in the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for that matter).&nbsp; The imported module names are placed in the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">importing module's global symbol table.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">importing module's global symbol table.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There is a variant of the &quot;import&quot; statement that imports names from a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There is a variant of the &quot;import&quot; statement that imports names from a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">module directly into the importing module's symbol table.&nbsp; For</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">module directly into the importing module's symbol table.&nbsp; For</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from fibo import fib, fib2</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from fibo import fib, fib2</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fib(500)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fib(500)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 1 1 2 3 5 8 13 21 34 55 89 144 233 377</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 1 1 2 3 5 8 13 21 34 55 89 144 233 377</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This does not introduce the module name from which the imports are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This does not introduce the module name from which the imports are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">taken in the local symbol table (so in the example, &quot;fibo&quot; is not</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">taken in the local symbol table (so in the example, &quot;fibo&quot; is not</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">defined).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">defined).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">There is even a variant to import all names that a module defines:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There is even a variant to import all names that a module defines:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from fibo import *</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from fibo import *</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fib(500)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fib(500)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 1 1 2 3 5 8 13 21 34 55 89 144 233 377</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 1 1 2 3 5 8 13 21 34 55 89 144 233 377</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">This imports all names except those beginning with an underscore</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This imports all names except those beginning with an underscore</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">(&quot;_&quot;). <span class="TextSegSigDiff">In</span> <span class="TextSegSigDiff">most</span> <span class="TextSegSigDiff">cases</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">programmers</span> <span class="TextSegSigDiff">do</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">facility</span> <span class="TextSegSigDiff">since</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">(&quot;_&quot;).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">introduces</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">unknown</span> <span class="TextSegSigDiff">set</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">names</span> <span class="TextSegSigDiff">into</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">interpreter,</span> <span class="TextSegSigDiff">possibly</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">hiding</span> <span class="TextSegSigDiff">some</span> <span class="TextSegSigDiff">things</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">already</span> <span class="TextSegSigDiff">defined.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note that in general the practice of importing &quot;*&quot; from a module or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note that in general the practice of importing &quot;*&quot; from a module or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">package is frowned upon, since it often causes poorly readable code.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">package is frowned upon, since it often causes poorly readable code.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">However, it is okay to use it to save typing in interactive sessions.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">However, it is okay to use it to save typing in interactive sessions.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note: For efficiency reasons, each module is only imported once per</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note: For efficiency reasons, each module is only imported once per</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; interpreter session.&nbsp; Therefore, if you change your modules, you</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; interpreter session.&nbsp; Therefore, if you change your modules, you</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp; must restart the interpreter -- or, if it's just one module you want</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; must restart the interpreter -- or, if it's just one module you want</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp; to test interactively, use &quot;<span class="TextSegSigDiff">importlib.</span>reload()&quot;, e.g. &quot;<span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">mport</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp; to test interactively, use &quot;reload()&quot;, e.g. &quot;<span class="TextSegSigDiff">reload(m</span><span class="TextSegSigDiff">odulename)&quot;.</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">importlib;</span> <span class="TextSegSigDiff">importlib.reload(modulename)&quot;.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Executing modules as scripts</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Executing modules as scripts</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When you run a Python module with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When you run a Python module with</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; python fibo.py &lt;arguments&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; python fibo.py &lt;arguments&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the code in the module will be executed, just as if you imported it,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the code in the module will be executed, just as if you imported it,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">but with the &quot;__name__&quot; set to &quot;&quot;__main__&quot;&quot;.&nbsp; That means that by</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">but with the &quot;__name__&quot; set to &quot;&quot;__main__&quot;&quot;.&nbsp; That means that by</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">adding this code at the end of your module:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">adding this code at the end of your module:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; if __name__ == &quot;__main__&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; if __name__ == &quot;__main__&quot;:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; import sys</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; import sys</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; fib(int(sys.argv[1]))</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; fib(int(sys.argv[1]))</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">you can make the file usable as a script as well as an importable</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">you can make the file usable as a script as well as an importable</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">module, because the code that parses the command line only runs if the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">module, because the code that parses the command line only runs if the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">module is executed as the &quot;main&quot; file:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">module is executed as the &quot;main&quot; file:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; $ python fibo.py 50</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; $ python fibo.py 50</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 1 1 2 3 5 8 13 21 34</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 1 1 2 3 5 8 13 21 34</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If the module is imported, the code is not run:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If the module is imported, the code is not run:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import fibo</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import fibo</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This is often used either to provide a convenient user interface to a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This is often used either to provide a convenient user interface to a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">module, or for testing purposes (running the module as a script</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">module, or for testing purposes (running the module as a script</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">executes a test suite).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">executes a test suite).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The Module Search Path</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The Module Search Path</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">----------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">----------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When a module named &quot;spam&quot; is imported, the interpreter first searches</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When a module named &quot;spam&quot; is imported, the interpreter first searches</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for a built-in module with that name. If not found, it then searches</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for a built-in module with that name. If not found, it then searches</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for a file named &quot;spam.py&quot; in a list of directories given by the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for a file named &quot;spam.py&quot; in a list of directories given by the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">variable &quot;sys.path&quot;.&nbsp; &quot;sys.path&quot; is initialized from these locations:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">variable &quot;sys.path&quot;.&nbsp; &quot;sys.path&quot; is initialized from these locations:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">* The directory containing the input script (or the current</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* the directory containing the input script (or the current</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp; directory <span class="TextSegSigDiff">when</span> <span class="TextSegSigDiff">no</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">specified</span>).</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp; directory).</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* &quot;PYTHONPATH&quot; (a list of directory names, with the same syntax as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* &quot;PYTHONPATH&quot; (a list of directory names, with the same syntax as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; the shell variable &quot;PATH&quot;).</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; the shell variable &quot;PATH&quot;).</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* The installation-dependent default.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* the installation-dependent default.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Note:</span> <span class="TextSegSigDiff">On</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">systems</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">support</span> <span class="TextSegSigDiff">symlinks,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">directory</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">containing</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">input</span> <span class="TextSegSigDiff">script</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">calculated</span> <span class="TextSegSigDiff">after</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">symlink</span> <span class="TextSegSigDiff">is</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">followed.</span> <span class="TextSegSigDiff">In</span> <span class="TextSegSigDiff">other</span> <span class="TextSegSigDiff">words</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">directory</span> <span class="TextSegSigDiff">containing</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">symlink</span> <span class="TextSegSigDiff">is</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">**not**</span> <span class="TextSegSigDiff">added</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">search</span> <span class="TextSegSigDiff">path.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">After initialization, Python programs can modify &quot;sys.path&quot;.&nbsp; The</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">After initialization, Python programs can modify &quot;sys.path&quot;.&nbsp; The</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">directory containing the script being run is placed at the beginning</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">directory containing the script being run is placed at the beginning</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of the search path, ahead of the standard library path. This means</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of the search path, ahead of the standard library path. This means</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that scripts in that directory will be loaded instead of modules of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that scripts in that directory will be loaded instead of modules of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the same name in the library directory. This is an error unless the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the same name in the library directory. This is an error unless the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">replacement is intended.&nbsp; See section Standard Modules for more</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">replacement is intended.&nbsp; See section Standard Modules for more</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">information.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">information.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;Compiled&quot; Python files</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;Compiled&quot; Python files</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-----------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-----------------------</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">As</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">important</span> <span class="TextSegSigDiff">speed-up</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">start-up</span> <span class="TextSegSigDiff">time</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">short</span> <span class="TextSegSigDiff">programs</span> <span class="TextSegSigDiff">that</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">To</span> s<span class="TextSegSigDiff">peed</span> <span class="TextSegSigDiff">up</span> lo<span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">ding</span> modules, <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">caches</span> <span class="TextSegSigDiff">th</span>e c<span class="TextSegSigDiff">ompi</span>led <span class="TextSegSigDiff">v</span><span class="TextSegSigDiff">er</span>si<span class="TextSegSigDiff">o</span>n <span class="TextSegSigDiff">of</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">u</span>s<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">a</span> lo<span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">standard</span> modules, <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">fil</span>e c<span class="TextSegSigDiff">al</span>led <span class="TextSegSigDiff">&quot;spam.pyc&quot;</span> <span class="TextSegSigDiff">exist</span>s in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">each</span> <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;__pycache__&quot;</span> <span class="TextSegSigDiff">directory</span> <span class="TextSegSigDiff">under</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">name</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;mo</span><span class="TextSegSigDiff">dule.*version*.pyc&quot;,</span> where <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">versi</span><span class="TextSegSigDiff">o</span>n <span class="TextSegSigDiff">encodes</span> th<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">format</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">directo</span><span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">y</span> where <span class="TextSegSigDiff">&quot;spam.py&quot;</span> <span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">fou</span>n<span class="TextSegSigDiff">d,</span> th<span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">assumed</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">contain</span> <span class="TextSegSigDiff">an</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">compiled <span class="TextSegSigDiff">file;</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">generally</span> <span class="TextSegSigDiff">contains</span> the <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">number</span>.&nbsp; <span class="TextSegSigDiff">F</span><span class="TextSegSigDiff">or</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">already-&quot;byte-</span>compiled<span class="TextSegSigDiff">&quot;</span> <span class="TextSegSigDiff">v</span><span class="TextSegSigDiff">ersio</span><span class="TextSegSigDiff">n</span> <span class="TextSegSigDiff">of</span> the <span class="TextSegSigDiff">m</span><span class="TextSegSigDiff">odule</span> <span class="TextSegSigDiff">&quot;</span><span class="TextSegSigDiff">spa</span><span class="TextSegSigDiff">m&quot;</span>. <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">modification</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">example,</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">CPython</span> <span class="TextSegSigDiff">release</span> <span class="TextSegSigDiff">3.3</span> the <span class="TextSegSigDiff">compiled</span> version of spam.py <span class="TextSegSigDiff">w</span><span class="TextSegSigDiff">oul</span>d</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">ti</span><span class="TextSegSigDiff">m</span><span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">of</span> the version of <span class="TextSegSigDiff">&quot;</span>spam.py<span class="TextSegSigDiff">&quot;</span> <span class="TextSegSigDiff">used</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">create</span> <span class="TextSegSigDiff">&quot;spam.pyc&quot;</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">recorde</span>d</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">cached</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">&quot;__pycache__/spam.cpython-33.pyc&quot;.</span>&nbsp; <span class="TextSegSigDiff">This</span> <span class="TextSegSigDiff">naming</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">convention</span> <span class="TextSegSigDiff">allows</span> <span class="TextSegSigDiff">compiled</span> <span class="TextSegSigDiff">modules</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">different</span> <span class="TextSegSigDiff">releases</span> <span class="TextSegSigDiff">and</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">different</span> <span class="TextSegSigDiff">versions</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">coexist.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">P<span class="TextSegSigDiff">ytho</span><span class="TextSegSigDiff">n</span> <span class="TextSegSigDiff">c</span>he<span class="TextSegSigDiff">cks</span> <span class="TextSegSigDiff">th</span>e <span class="TextSegSigDiff">modif</span><span class="TextSegSigDiff">ication</span> d<span class="TextSegSigDiff">ate</span> <span class="TextSegSigDiff">o</span>f the s<span class="TextSegSigDiff">ourc</span>e <span class="TextSegSigDiff">agains</span>t <span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">he</span> <span class="TextSegSigDiff">compiled</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">&quot;s</span>p<span class="TextSegSigDiff">am.pyc&quot;,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">t</span>he <span class="TextSegSigDiff">&quot;.pyc&quot;</span> <span class="TextSegSigDiff">fil</span>e <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">ign</span><span class="TextSegSigDiff">ore</span>d <span class="TextSegSigDiff">i</span>f these <span class="TextSegSigDiff">do</span><span class="TextSegSigDiff">n'</span>t <span class="TextSegSigDiff">match.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">see</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">it's</span> <span class="TextSegSigDiff">out</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">date</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">needs</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">recompiled.</span>&nbsp; <span class="TextSegSigDiff">This</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">co</span><span class="TextSegSigDiff">mplete</span>ly <span class="TextSegSigDiff">a</span>uto<span class="TextSegSigDiff">m</span>a<span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">ic</span> <span class="TextSegSigDiff">pr</span>oce<span class="TextSegSigDiff">ss.</span>&nbsp; A<span class="TextSegSigDiff">lso,</span> the <span class="TextSegSigDiff">co</span><span class="TextSegSigDiff">m</span><span class="TextSegSigDiff">p</span>ile<span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">modules</span> <span class="TextSegSigDiff">are</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">N</span><span class="TextSegSigDiff">ormal</span>ly<span class="TextSegSigDiff">,</span> <span class="TextSegSigDiff">yo</span>u <span class="TextSegSigDiff">don't</span> <span class="TextSegSigDiff">need</span> t<span class="TextSegSigDiff">o</span> <span class="TextSegSigDiff">d</span>o a<span class="TextSegSigDiff">nything</span> <span class="TextSegSigDiff">t</span>o c<span class="TextSegSigDiff">r</span>ea<span class="TextSegSigDiff">te</span> the <span class="TextSegSigDiff">&quot;spam.pyc&quot;</span> <span class="TextSegSigDiff">f</span>ile<span class="TextSegSigDiff">.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">platform-independent,</span> <span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">s</span>am<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">library</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">shar</span>ed a<span class="TextSegSigDiff">mong</span> <span class="TextSegSigDiff">sys</span>tems</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Wh</span><span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">ev</span><span class="TextSegSigDiff">er</span> <span class="TextSegSigDiff">&quot;sp</span>am<span class="TextSegSigDiff">.py&quot;</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">succ</span><span class="TextSegSigDiff">essfully</span> <span class="TextSegSigDiff">compil</span>ed<span class="TextSegSigDiff">,</span> a<span class="TextSegSigDiff">n</span> <span class="TextSegSigDiff">at</span>tem<span class="TextSegSigDiff">pt</span> <span class="TextSegSigDiff">i</span>s <span class="TextSegSigDiff">made</span> <span class="TextSegSigDiff">to</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">different</span> <span class="TextSegSigDiff">architectures.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">write</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">compiled</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">&quot;spam.pyc&quot;.</span>&nbsp; <span class="TextSegSigDiff">It</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">error</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">this</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">P<span class="TextSegSigDiff">yth</span><span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">n</span> <span class="TextSegSigDiff">doe</span><span class="TextSegSigDiff">s</span> n<span class="TextSegSigDiff">ot</span> <span class="TextSegSigDiff">check</span> the <span class="TextSegSigDiff">cach</span>e in <span class="TextSegSigDiff">two</span> <span class="TextSegSigDiff">circumsta</span>nce<span class="TextSegSigDiff">s.</span>&nbsp; <span class="TextSegSigDiff">Firs</span>t, <span class="TextSegSigDiff">it</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">attem</span>p<span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">fails;</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">any</span> <span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">easo</span>n the <span class="TextSegSigDiff">fil</span>e i<span class="TextSegSigDiff">s</span> n<span class="TextSegSigDiff">ot</span> <span class="TextSegSigDiff">wr</span><span class="TextSegSigDiff">it</span><span class="TextSegSigDiff">te</span>n c<span class="TextSegSigDiff">ompl</span>et<span class="TextSegSigDiff">ely</span>,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">always</span> re<span class="TextSegSigDiff">co</span><span class="TextSegSigDiff">m</span><span class="TextSegSigDiff">p</span>ile<span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">does</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">sto</span>re <span class="TextSegSigDiff">th</span><span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">resu</span><span class="TextSegSigDiff">lt</span> <span class="TextSegSigDiff">for</span> th<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">that'</span>s</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> re<span class="TextSegSigDiff">sulting</span> <span class="TextSegSigDiff">&quot;spam.pyc&quot;</span> <span class="TextSegSigDiff">f</span>ile <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">b</span><span class="TextSegSigDiff">e</span> re<span class="TextSegSigDiff">cognized</span> <span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">invalid</span> <span class="TextSegSigDiff">and</span> th<span class="TextSegSigDiff">u</span>s</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">loaded</span> <span class="TextSegSigDiff">directly</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">command</span> <span class="TextSegSigDiff">line.</span>&nbsp; <span class="TextSegSigDiff">Second,</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">does</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">check</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">c</span><span class="TextSegSigDiff">ache</span> <span class="TextSegSigDiff">if</span> the<span class="TextSegSigDiff">r</span>e <span class="TextSegSigDiff">is</span> n<span class="TextSegSigDiff">o</span> s<span class="TextSegSigDiff">ource</span> <span class="TextSegSigDiff">module.</span>&nbsp; T<span class="TextSegSigDiff">o</span> s<span class="TextSegSigDiff">u</span>p<span class="TextSegSigDiff">port</span> a <span class="TextSegSigDiff">non-sourc</span>e <span class="TextSegSigDiff">(c</span><span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">mpiled</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">ignored</span> <span class="TextSegSigDiff">lat</span><span class="TextSegSigDiff">er.</span>&nbsp; The <span class="TextSegSigDiff">cont</span>en<span class="TextSegSigDiff">t</span>s <span class="TextSegSigDiff">of</span> t<span class="TextSegSigDiff">he</span> <span class="TextSegSigDiff">&quot;</span>sp<span class="TextSegSigDiff">am.pyc&quot;</span> <span class="TextSegSigDiff">file</span> a<span class="TextSegSigDiff">r</span>e <span class="TextSegSigDiff">platform</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">nly)</span> <span class="TextSegSigDiff">distribution,</span> th<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">compiled</span> module <span class="TextSegSigDiff">mus</span><span class="TextSegSigDiff">t</span> be in <span class="TextSegSigDiff">th</span>e <span class="TextSegSigDiff">source</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">independent,</span> <span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">o</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">Py</span>th<span class="TextSegSigDiff">on</span> module <span class="TextSegSigDiff">directory</span> <span class="TextSegSigDiff">can</span> be <span class="TextSegSigDiff">shared</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">mach</span>ine<span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">of</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">di<span class="TextSegSigDiff">rectory,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">th</span>ere <span class="TextSegSigDiff">must</span> n<span class="TextSegSigDiff">o</span>t <span class="TextSegSigDiff">be</span> a <span class="TextSegSigDiff">sou</span>rc<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">module</span>.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">di<span class="TextSegSigDiff">ff</span>erent arc<span class="TextSegSigDiff">hitect</span><span class="TextSegSigDiff">ures</span>.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Some tips for experts:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Some tips for experts:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">When</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">interpreter</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">invoked</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;-O&quot;</span> <span class="TextSegSigDiff">flag,</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">optimized</span> <span class="TextSegSigDiff">code</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">generated</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">stored</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">&quot;.pyo&quot;</span> <span class="TextSegSigDiff">files.</span>&nbsp; <span class="TextSegSigDiff">The</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">You</span> c<span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">n</span> <span class="TextSegSigDiff">u</span><span class="TextSegSigDiff">se</span> <span class="TextSegSigDiff">t</span>he <span class="TextSegSigDiff">&quot;-O&quot;</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">&quot;-OO&quot;</span> <span class="TextSegSigDiff">sw</span>it<span class="TextSegSigDiff">ches</span> on <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">command</span> <span class="TextSegSigDiff">to</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">optimizer</span> c<span class="TextSegSigDiff">urrently</span> <span class="TextSegSigDiff">doesn't</span> he<span class="TextSegSigDiff">lp</span> <span class="TextSegSigDiff">much;</span> it on<span class="TextSegSigDiff">ly</span> <span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">em</span><span class="TextSegSigDiff">oves</span> <span class="TextSegSigDiff">&quot;</span><span class="TextSegSigDiff">assert&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">statements.</span> <span class="TextSegSigDiff">When</span> <span class="TextSegSigDiff">&quot;-O&quot;</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">used,</span> <span class="TextSegSigDiff">*all*</span> <span class="TextSegSigDiff">*bytecode*</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">optimized;</span> <span class="TextSegSigDiff">&quot;.pyc&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">educe</span> <span class="TextSegSigDiff">th</span>e <span class="TextSegSigDiff">siz</span><span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">o</span>f a compiled <span class="TextSegSigDiff">module.</span>&nbsp; T<span class="TextSegSigDiff">he</span> <span class="TextSegSigDiff">&quot;-O&quot;</span> <span class="TextSegSigDiff">switch</span> <span class="TextSegSigDiff">removes</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">files</span> <span class="TextSegSigDiff">ar</span>e <span class="TextSegSigDiff">ignored</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">&quot;.py&quot;</span> f<span class="TextSegSigDiff">iles</span> a<span class="TextSegSigDiff">re</span> compiled <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">op</span>t<span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">mized</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">bytecode.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">assert</span> <span class="TextSegSigDiff">statements,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;-OO&quot;</span> <span class="TextSegSigDiff">switch</span> <span class="TextSegSigDiff">removes</span> <span class="TextSegSigDiff">both</span> <span class="TextSegSigDiff">assert</span> <span class="TextSegSigDiff">statements</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">Passing</span> <span class="TextSegSigDiff">two</span> <span class="TextSegSigDiff">&quot;-O&quot;</span> <span class="TextSegSigDiff">flags</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">interpreter</span> <span class="TextSegSigDiff">(&quot;-OO&quot;)</span> <span class="TextSegSigDiff">will</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">cause</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">bytecode</span> <span class="TextSegSigDiff">compiler</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">perform</span> <span class="TextSegSigDiff">optimizations</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">could</span> <span class="TextSegSigDiff">in</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">__doc__</span> <span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">tr</span>in<span class="TextSegSigDiff">gs.</span>&nbsp; <span class="TextSegSigDiff">Si</span>nc<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">some</span> programs <span class="TextSegSigDiff">may</span> <span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">e</span>ly on <span class="TextSegSigDiff">having</span> <span class="TextSegSigDiff">these</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">some</span> <span class="TextSegSigDiff">rare</span> <span class="TextSegSigDiff">cases</span> <span class="TextSegSigDiff">result</span> in <span class="TextSegSigDiff">malfu</span>nc<span class="TextSegSigDiff">ti</span><span class="TextSegSigDiff">oning</span> programs<span class="TextSegSigDiff">.</span>&nbsp; <span class="TextSegSigDiff">Current</span>ly on<span class="TextSegSigDiff">ly</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">&quot;__doc__&quot;</span> <span class="TextSegSigDiff">strings</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">removed</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">bytecode,</span> <span class="TextSegSigDiff">resulting</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">more</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">compact</span> <span class="TextSegSigDiff">&quot;.pyo&quot;</span> <span class="TextSegSigDiff">files.</span>&nbsp; <span class="TextSegSigDiff">Since</span> <span class="TextSegSigDiff">some</span> <span class="TextSegSigDiff">programs</span> <span class="TextSegSigDiff">may</span> <span class="TextSegSigDiff">rely</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">having</span> <span class="TextSegSigDiff">these</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp; available, you should only use this option if you know what you're</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp; available, you should only use this option if you know what you're</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">doing.</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">d</span><span class="TextSegSigDiff">oing.</span>&nbsp; <span class="TextSegSigDiff">&quot;Op</span><span class="TextSegSigDiff">timized&quot;</span> <span class="TextSegSigDiff">modul</span><span class="TextSegSigDiff">es</span> h<span class="TextSegSigDiff">av</span>e <span class="TextSegSigDiff">a</span>n <span class="TextSegSigDiff">&quot;opt-&quot;</span> <span class="TextSegSigDiff">tag</span> a<span class="TextSegSigDiff">n</span>d <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">usuall</span>y</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">A</span> <span class="TextSegSigDiff">pro</span><span class="TextSegSigDiff">gram</span> <span class="TextSegSigDiff">d</span><span class="TextSegSigDiff">oesn't</span> <span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">un</span> <span class="TextSegSigDiff">any</span> <span class="TextSegSigDiff">faster</span> <span class="TextSegSigDiff">w</span>hen <span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">re</span>ad <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">&quot;.p</span>y<span class="TextSegSigDiff">c&quot;</span> <span class="TextSegSigDiff">or</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">smal</span>le<span class="TextSegSigDiff">r.</span>&nbsp; <span class="TextSegSigDiff">Fu</span><span class="TextSegSigDiff">ture</span> re<span class="TextSegSigDiff">leases</span> ma<span class="TextSegSigDiff">y</span> <span class="TextSegSigDiff">change</span> th<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">effects</span> o<span class="TextSegSigDiff">f</span> <span class="TextSegSigDiff">optimization.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">&quot;.pyo&quot;</span> <span class="TextSegSigDiff">fi</span>le <span class="TextSegSigDiff">than</span> <span class="TextSegSigDiff">when</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">is</span> re<span class="TextSegSigDiff">ad</span> <span class="TextSegSigDiff">fro</span>m a <span class="TextSegSigDiff">&quot;.py&quot;</span> <span class="TextSegSigDiff">fil</span><span class="TextSegSigDiff">e;</span> th<span class="TextSegSigDiff">e</span> o<span class="TextSegSigDiff">nly</span> <span class="TextSegSigDiff">th</span><span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">ng</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">that's</span> <span class="TextSegSigDiff">faster</span> <span class="TextSegSigDiff">about</span> <span class="TextSegSigDiff">&quot;.pyc&quot;</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">&quot;.pyo&quot;</span> <span class="TextSegSigDiff">files</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">speed</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">which</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">they</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">loaded.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">A</span> <span class="TextSegSigDiff">program</span> <span class="TextSegSigDiff">doesn't</span> <span class="TextSegSigDiff">run</span> <span class="TextSegSigDiff">any</span> <span class="TextSegSigDiff">faster</span> <span class="TextSegSigDiff">when</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">read</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">&quot;.pyc&quot;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">than</span> when <span class="TextSegSigDiff">i</span>t is r<span class="TextSegSigDiff">ead</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">&quot;.py&quot;</span> <span class="TextSegSigDiff">file;</span> the <span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">ly</span> <span class="TextSegSigDiff">th</span>in<span class="TextSegSigDiff">g</span> th<span class="TextSegSigDiff">at's</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span> When <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">scrip</span>t is r<span class="TextSegSigDiff">un</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">giving</span> <span class="TextSegSigDiff">its</span> <span class="TextSegSigDiff">name</span> <span class="TextSegSigDiff">on</span> the <span class="TextSegSigDiff">command</span> <span class="TextSegSigDiff">l</span>in<span class="TextSegSigDiff">e,</span> th<span class="TextSegSigDiff">e</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">fas</span>ter <span class="TextSegSigDiff">abou</span>t <span class="TextSegSigDiff">&quot;.pyc&quot;</span> <span class="TextSegSigDiff">files</span> is <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">speed</span> w<span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">th</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">they</span> <span class="TextSegSigDiff">are</span> l<span class="TextSegSigDiff">oaded</span>.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">by</span>te<span class="TextSegSigDiff">code</span> <span class="TextSegSigDiff">fo</span>r t<span class="TextSegSigDiff">he</span> <span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">cr</span><span class="TextSegSigDiff">ipt</span> is <span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">ev</span><span class="TextSegSigDiff">er</span> w<span class="TextSegSigDiff">ritten</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">&quot;.pyc&quot;</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">&quot;.pyo&quot;</span> <span class="TextSegSigDiff">fi</span>l<span class="TextSegSigDiff">e</span>.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">Thus,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">startup</span> <span class="TextSegSigDiff">time</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">script</span> <span class="TextSegSigDiff">may</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">reduced</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">moving</span> <span class="TextSegSigDiff">most</span> <span class="TextSegSigDiff">of</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">its</span> <span class="TextSegSigDiff">code</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">having</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">small</span> <span class="TextSegSigDiff">bootstrap</span> <span class="TextSegSigDiff">script</span> <span class="TextSegSigDiff">that</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span> Th<span class="TextSegSigDiff">e</span> module <span class="TextSegSigDiff">&quot;c</span><span class="TextSegSigDiff">om</span>p<span class="TextSegSigDiff">i</span>le<span class="TextSegSigDiff">all&quot;</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">create</span> .pyc <span class="TextSegSigDiff">files</span> <span class="TextSegSigDiff">f</span>or <span class="TextSegSigDiff">all</span> <span class="TextSegSigDiff">modules</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">a</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">imports</span> th<span class="TextSegSigDiff">at</span> module<span class="TextSegSigDiff">.</span>&nbsp; <span class="TextSegSigDiff">It</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">also</span> p<span class="TextSegSigDiff">ossib</span>le <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">name</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">&quot;</span>.pyc<span class="TextSegSigDiff">&quot;</span> or <span class="TextSegSigDiff">&quot;.py</span><span class="TextSegSigDiff">o&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">directly</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">command</span> <span class="TextSegSigDiff">line.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">directory.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">It</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">possible</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">called</span> <span class="TextSegSigDiff">&quot;spam.pyc&quot;</span> <span class="TextSegSigDiff">(or</span> <span class="TextSegSigDiff">&quot;spam.pyo&quot;</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">when</span> <span class="TextSegSigDiff">&quot;-O&quot;</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">used)</span> <span class="TextSegSigDiff">without</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">file</span> <span class="TextSegSigDiff">&quot;spam.py&quot;</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">same</span> <span class="TextSegSigDiff">module.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span> The<span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">e</span> is <span class="TextSegSigDiff">mor</span>e <span class="TextSegSigDiff">det</span>a<span class="TextSegSigDiff">il</span> o<span class="TextSegSigDiff">n</span> th<span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">process,</span> in<span class="TextSegSigDiff">cluding</span> a f<span class="TextSegSigDiff">low</span> <span class="TextSegSigDiff">chart</span> <span class="TextSegSigDiff">of</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; Th<span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">b</span>e <span class="TextSegSigDiff">used</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">d</span>is<span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">ribut</span>e a <span class="TextSegSigDiff">library</span> o<span class="TextSegSigDiff">f</span> <span class="TextSegSigDiff">Py</span>th<span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">c</span><span class="TextSegSigDiff">ode</span> in a f<span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">rm</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">moderately</span> <span class="TextSegSigDiff">hard</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">reverse</span> <span class="TextSegSigDiff">engineer.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">decisions,</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">PEP</span> <span class="TextSegSigDiff">3147.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">&quot;compileall&quot;</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">create</span> <span class="TextSegSigDiff">&quot;.pyc&quot;</span> <span class="TextSegSigDiff">files</span> <span class="TextSegSigDiff">(or</span> <span class="TextSegSigDiff">&quot;.pyo&quot;</span> <span class="TextSegSigDiff">files</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">when</span> <span class="TextSegSigDiff">&quot;-O&quot;</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">used)</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">all</span> <span class="TextSegSigDiff">modules</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">directory.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Standard Modules</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Standard Modules</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python comes with a library of standard modules, described in a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python comes with a library of standard modules, described in a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">separate document, the Python Library Reference (&quot;Library Reference&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">separate document, the Python Library Reference (&quot;Library Reference&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">hereafter).&nbsp; Some modules are built into the interpreter; these</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">hereafter).&nbsp; Some modules are built into the interpreter; these</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">provide access to operations that are not part of the core of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">provide access to operations that are not part of the core of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">language but are nevertheless built in, either for efficiency or to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">language but are nevertheless built in, either for efficiency or to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">provide access to operating system primitives such as system calls.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">provide access to operating system primitives such as system calls.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The set of such modules is a configuration option which also depends</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The set of such modules is a configuration option which also depends</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">on the underlying platform.&nbsp; For example, the &quot;winreg&quot; module is only</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">on the underlying platform.&nbsp; For example, the &quot;winreg&quot; module is only</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">provided on Windows systems. One particular module deserves some</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">provided on Windows systems. One particular module deserves some</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">attention: &quot;sys&quot;, which is built into every Python interpreter.&nbsp; The</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">attention: &quot;sys&quot;, which is built into every Python interpreter.&nbsp; The</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">variables &quot;sys.ps1&quot; and &quot;sys.ps2&quot; define the strings used as primary</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">variables &quot;sys.ps1&quot; and &quot;sys.ps2&quot; define the strings used as primary</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">and secondary prompts:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">and secondary prompts:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import sys</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import sys</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sys.ps1</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sys.ps1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; '&gt;&gt;&gt; '</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; '&gt;&gt;&gt; '</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sys.ps2</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sys.ps2</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; '... '</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; '... '</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sys.ps1 = 'C&gt; '</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sys.ps1 = 'C&gt; '</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; C&gt; print<span class="TextSegSigDiff">(</span>'Yuck!'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; C&gt; print 'Yuck!'</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; Yuck!</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; Yuck!</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; C&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; C&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">These two variables are only defined if the interpreter is in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">These two variables are only defined if the interpreter is in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">interactive mode.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interactive mode.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The variable &quot;sys.path&quot; is a list of strings that determines the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The variable &quot;sys.path&quot; is a list of strings that determines the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">interpreter's search path for modules. It is initialized to a default</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">interpreter's search path for modules. It is initialized to a default</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">path taken from the environment variable &quot;PYTHONPATH&quot;, or from a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">path taken from the environment variable &quot;PYTHONPATH&quot;, or from a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">built-in default if &quot;PYTHONPATH&quot; is not set.&nbsp; You can modify it using</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">built-in default if &quot;PYTHONPATH&quot; is not set.&nbsp; You can modify it using</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">standard list operations:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">standard list operations:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import sys</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import sys</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sys.path.append('/ufs/guido/lib/python')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sys.path.append('/ufs/guido/lib/python')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;dir()&quot; Function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;dir()&quot; Function</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">====================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">====================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The built-in function &quot;dir()&quot; is used to find out which names a module</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The built-in function &quot;dir()&quot; is used to find out which names a module</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">defines.&nbsp; It returns a sorted list of strings:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">defines.&nbsp; It returns a sorted list of strings:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import fibo, sys</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import fibo, sys</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; dir(fibo)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; dir(fibo)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ['__name__', 'fib', 'fib2']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ['__name__', 'fib', 'fib2']</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; dir(sys)&nbsp; # doctest: +NORMALIZE_WHITESPACE</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; dir(sys)&nbsp; # doctest: +NORMALIZE_WHITESPACE</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; ['__displayhook__', '__doc__', '__excepthook__', '__<span class="TextSegSigDiff">loader</span>__', '__<span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">am</span>e__',</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ['__displayhook__', '__doc__', '__excepthook__', '__<span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">ame</span>__', '__<span class="TextSegSigDiff">packag</span>e__',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '__<span class="TextSegSigDiff">package__',</span> <span class="TextSegSigDiff">'__</span>stderr__', '__stdin__', '__stdout<span class="TextSegSigDiff">_</span><span class="TextSegSigDiff">_</span>',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '__stderr__', '__stdin__', '__stdout<span class="TextSegSigDiff">__',</span> <span class="TextSegSigDiff">'_clear_type_cache</span>',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">'_clear_type_cache',</span> <span class="TextSegSigDiff">'_current_frames',</span> <span class="TextSegSigDiff">'_debugmallocstats',</span> <span class="TextSegSigDiff">'_getframe',</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '_<span class="TextSegSigDiff">ho</span>me', '_<span class="TextSegSigDiff">me</span><span class="TextSegSigDiff">rcurial</span>', '_<span class="TextSegSigDiff">xopt</span><span class="TextSegSigDiff">ions',</span> <span class="TextSegSigDiff">'abiflags</span>', 'api_version', 'argv',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '_<span class="TextSegSigDiff">current_fra</span>me<span class="TextSegSigDiff">s</span>', '_<span class="TextSegSigDiff">getfr</span><span class="TextSegSigDiff">ame</span>', '_<span class="TextSegSigDiff">mercuri</span><span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">l</span>', 'api_version', 'argv',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'b<span class="TextSegSigDiff">ase_exec_prefix',</span> <span class="TextSegSigDiff">'base_prefix',</span> <span class="TextSegSigDiff">'b</span>uiltin_module_names', 'byteorde<span class="TextSegSigDiff">r</span>',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'builtin_module_names', 'byteorde<span class="TextSegSigDiff">r',</span> <span class="TextSegSigDiff">'call_tracing',</span> <span class="TextSegSigDiff">'callstats</span>',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'c<span class="TextSegSigDiff">all_tracing</span>', '<span class="TextSegSigDiff">ca</span><span class="TextSegSigDiff">llstats</span>', '<span class="TextSegSigDiff">copy</span>ri<span class="TextSegSigDiff">gh</span><span class="TextSegSigDiff">t</span>', '<span class="TextSegSigDiff">disp</span><span class="TextSegSigDiff">l</span><span class="TextSegSigDiff">ayh</span><span class="TextSegSigDiff">ook</span>',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'c<span class="TextSegSigDiff">opy</span><span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">ght</span>', '<span class="TextSegSigDiff">displ</span><span class="TextSegSigDiff">ayhook</span>', '<span class="TextSegSigDiff">dont_w</span>ri<span class="TextSegSigDiff">te_bytecode</span>', '<span class="TextSegSigDiff">exc_clear',</span> <span class="TextSegSigDiff">'exc_info</span>',</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">don</span><span class="TextSegSigDiff">t_write_byt</span><span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">cod</span>e', 'exc_<span class="TextSegSigDiff">info</span>', 'excepthook', 'exec_prefix',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">exc_t</span><span class="TextSegSigDiff">race</span><span class="TextSegSigDiff">back',</span> <span class="TextSegSigDiff">'exc_typ</span>e', 'exc_<span class="TextSegSigDiff">value</span>', 'excepthook', 'exec_prefix',</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 'executable', 'exit', 'flags', 'float_info', 'float_repr_style',</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 'executable', 'exit', 'flags', 'float_info', 'float_repr_style',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 'getcheckinterval', 'getdefaultencoding', 'getdlopenflags',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 'getcheckinterval', 'getdefaultencoding', 'getdlopenflags',</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 'getfilesystemencoding', 'getobjects', 'getprofile', 'getrecursionlimit',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 'getfilesystemencoding', 'getobjects', 'getprofile', 'getrecursionlimit',</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'getrefcount', 'getsizeof', 'get<span class="TextSegSigDiff">swit</span><span class="TextSegSigDiff">chi</span>nt<span class="TextSegSigDiff">erval</span>', 'gett<span class="TextSegSigDiff">otal</span><span class="TextSegSigDiff">refcount</span>',</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'getrefcount', 'getsizeof', 'get<span class="TextSegSigDiff">to</span><span class="TextSegSigDiff">talrefcou</span>nt', 'gett<span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">ace',</span> <span class="TextSegSigDiff">'hexversi</span><span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">n</span>',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">'gettrace',</span> <span class="TextSegSigDiff">'hash_info',</span> <span class="TextSegSigDiff">'hexversion',</span> <span class="TextSegSigDiff">'implementation',</span> <span class="TextSegSigDiff">'int_info',</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'int<span class="TextSegSigDiff">ern</span>', 'maxsize', 'maxunicode', 'meta_path', 'modules<span class="TextSegSigDiff">',</span> <span class="TextSegSigDiff">'path</span>',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">long_</span>in<span class="TextSegSigDiff">fo',</span> <span class="TextSegSigDiff">'maxin</span>t', 'maxsize', 'maxunicode', 'meta_path', 'modules',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'ps1',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'path<span class="TextSegSigDiff">',</span> <span class="TextSegSigDiff">'path</span>_hooks', 'path_importer_cache', 'platform', 'prefix', 'ps1',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'setcheckinterval', 'setdlopenflags', 'setprofil<span class="TextSegSigDiff">e',</span> <span class="TextSegSigDiff">'setrecursionlimit</span>',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">py3kwarning',</span> <span class="TextSegSigDiff">'</span>setcheckinterval', 'setdlopenflags', 'setprofil<span class="TextSegSigDiff">e</span>',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'set<span class="TextSegSigDiff">sw</span><span class="TextSegSigDiff">itchinterval</span>', 'settrace', 'stderr', 'stdin', 'stdout',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'set<span class="TextSegSigDiff">recursionlim</span><span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">t</span>', 'settrace', 'stderr', 'stdin', 'stdout<span class="TextSegSigDiff">',</span> <span class="TextSegSigDiff">'subversion</span>',</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">thread_info',</span> <span class="TextSegSigDiff">'</span>version', 'version_info', 'warnoptions']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'version', 'version_info', 'warnoptions']</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Without arguments, &quot;dir()&quot; lists the names you have defined currently:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Without arguments, &quot;dir()&quot; lists the names you have defined currently:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = [1, 2, 3, 4, 5]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = [1, 2, 3, 4, 5]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import fibo</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import fibo</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fib = fibo.fib</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; fib = fibo.fib</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; dir()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; dir()</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ['__builtins__', '__name__', 'a', 'fib', 'fibo', 'sys']</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ['__builtins__', '__name__', '<span class="TextSegSigDiff">__package__',</span> <span class="TextSegSigDiff">'</span>a', 'fib', 'fibo', 'sys']</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note that it lists all types of names: variables, modules, functions,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note that it lists all types of names: variables, modules, functions,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">etc.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">etc.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;dir()&quot; does not list the names of built-in functions and variables.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;dir()&quot; does not list the names of built-in functions and variables.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">If you want a list of those, they are defined in the standard module</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If you want a list of those, they are defined in the standard module</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&quot;builtin<span class="TextSegSigDiff">s</span>&quot;:</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&quot;<span class="TextSegSigDiff">__</span>builtin<span class="TextSegSigDiff">__</span>&quot;:</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; import builtin<span class="TextSegSigDiff">s</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; import <span class="TextSegSigDiff">__</span>builtin<span class="TextSegSigDiff">__</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; dir(builtin<span class="TextSegSigDiff">s</span>)&nbsp; # doctest: +NORMALIZE_WHITESPACE</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; dir(<span class="TextSegSigDiff">__</span>builtin<span class="TextSegSigDiff">__</span>)&nbsp; # doctest: +NORMALIZE_WHITESPACE</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; ['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException',</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException',</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'B<span class="TextSegSigDiff">lockingIO</span>Error', 'Br<span class="TextSegSigDiff">okenPipeError</span>', '<span class="TextSegSigDiff">Buffe</span>rE<span class="TextSegSigDiff">rr</span><span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">r</span>', '<span class="TextSegSigDiff">BytesWarning</span>',</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'B<span class="TextSegSigDiff">uffer</span>Error', 'B<span class="TextSegSigDiff">ytesWa</span>r<span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">ing</span>', '<span class="TextSegSigDiff">D</span><span class="TextSegSigDiff">ep</span>re<span class="TextSegSigDiff">cationWarning</span>', '<span class="TextSegSigDiff">EOFError</span>',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">'ChildProcessError',</span> <span class="TextSegSigDiff">'ConnectionAbortedError',</span> <span class="TextSegSigDiff">'ConnectionError',</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">'ConnectionRefusedError',</span> <span class="TextSegSigDiff">'ConnectionResetError',</span> <span class="TextSegSigDiff">'DeprecationWarning',</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'E<span class="TextSegSigDiff">OFError',</span> <span class="TextSegSigDiff">'E</span>llipsis', 'EnvironmentError', 'Exception', 'Fals<span class="TextSegSigDiff">e</span>',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'Ellipsis', 'EnvironmentError', 'Exception', 'Fals<span class="TextSegSigDiff">e',</span> <span class="TextSegSigDiff">'FloatingPointError</span>',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">'FileExistsError',</span> <span class="TextSegSigDiff">'FileNotFoundError',</span> <span class="TextSegSigDiff">'FloatingPointError',</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', <span class="TextSegSigDiff">'ImportWarning',</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'I<span class="TextSegSigDiff">mportWarning',</span> <span class="TextSegSigDiff">'I</span>ndentationError', 'Index<span class="TextSegSigDiff">E</span>rror', 'Interrupt<span class="TextSegSigDiff">edError</span>',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'IndentationError', 'Index<span class="TextSegSigDiff">Error',</span> <span class="TextSegSigDiff">'KeyE</span>rror', '<span class="TextSegSigDiff">Keyboard</span>Interrupt',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">'IsADirectoryError',</span> <span class="TextSegSigDiff">'KeyError',</span> <span class="TextSegSigDiff">'KeyboardInterrupt',</span> <span class="TextSegSigDiff">'LookupError',</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'MemoryError', 'NameError', 'None<span class="TextSegSigDiff">',</span> <span class="TextSegSigDiff">'NotADirectoryError</span>', 'NotImplemented',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">LookupError',</span> <span class="TextSegSigDiff">'</span>MemoryError', 'NameError', 'None', 'NotImplemented',</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 'NotImplementedError', 'OSError', 'OverflowError',</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 'NotImplementedError', 'OSError', 'OverflowError',</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'PendingDeprecationWarning', '<span class="TextSegSigDiff">P</span>er<span class="TextSegSigDiff">mission</span><span class="TextSegSigDiff">E</span>rror', '<span class="TextSegSigDiff">Proc</span><span class="TextSegSigDiff">essLookup</span>Error',</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'PendingDeprecationWarning', '<span class="TextSegSigDiff">Ref</span>er<span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">nceE</span>rror', '<span class="TextSegSigDiff">Runtime</span>Error',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'R<span class="TextSegSigDiff">efere</span><span class="TextSegSigDiff">nce</span>Error', '<span class="TextSegSigDiff">Re</span>s<span class="TextSegSigDiff">ou</span><span class="TextSegSigDiff">rceWarni</span><span class="TextSegSigDiff">ng</span>', '<span class="TextSegSigDiff">Ru</span>nt<span class="TextSegSigDiff">imeE</span>rror<span class="TextSegSigDiff">',</span> <span class="TextSegSigDiff">'RuntimeWarning</span>',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'R<span class="TextSegSigDiff">untimeWarning',</span> <span class="TextSegSigDiff">'Standard</span>Error', 'S<span class="TextSegSigDiff">topIter</span><span class="TextSegSigDiff">at</span><span class="TextSegSigDiff">ion</span>', '<span class="TextSegSigDiff">Sy</span>nt<span class="TextSegSigDiff">axE</span>rror',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'S<span class="TextSegSigDiff">topIteration</span>', 'Sy<span class="TextSegSigDiff">ntax</span>Error', 'Sy<span class="TextSegSigDiff">nta</span><span class="TextSegSigDiff">xWarning</span>', '<span class="TextSegSigDiff">System</span>Erro<span class="TextSegSigDiff">r</span>',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'S<span class="TextSegSigDiff">yntaxWa</span><span class="TextSegSigDiff">rn</span><span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">ng</span>', 'Sy<span class="TextSegSigDiff">stem</span>Error', 'Sy<span class="TextSegSigDiff">stemEx</span><span class="TextSegSigDiff">it</span>', '<span class="TextSegSigDiff">Tab</span>Erro<span class="TextSegSigDiff">r',</span> <span class="TextSegSigDiff">'True</span>',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">SystemExit',</span> <span class="TextSegSigDiff">'Tab</span>Error', '<span class="TextSegSigDiff">Time</span>ou<span class="TextSegSigDiff">t</span>Error', '<span class="TextSegSigDiff">Tr</span>u<span class="TextSegSigDiff">e',</span> <span class="TextSegSigDiff">'Typ</span>eError',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">Typ</span><span class="TextSegSigDiff">e</span>Error', '<span class="TextSegSigDiff">Unb</span>ou<span class="TextSegSigDiff">ndLocal</span>Error', 'U<span class="TextSegSigDiff">nicodeDecod</span>eError',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'Un<span class="TextSegSigDiff">b</span><span class="TextSegSigDiff">ou</span><span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">dLocal</span>Error', 'Uni<span class="TextSegSigDiff">codeDe</span>codeError', 'Unicode<span class="TextSegSigDiff">E</span><span class="TextSegSigDiff">ncod</span>eError',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'Un<span class="TextSegSigDiff">icodeEncode</span>Error', 'UnicodeError', 'Unicode<span class="TextSegSigDiff">Translat</span>eError',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'Unicode<span class="TextSegSigDiff">Error',</span> <span class="TextSegSigDiff">'U</span>ni<span class="TextSegSigDiff">codeTranslateError</span>', 'U<span class="TextSegSigDiff">nicode</span>Warning', '<span class="TextSegSigDiff">Use</span><span class="TextSegSigDiff">r</span>Warning',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'Unicode<span class="TextSegSigDiff">Wa</span><span class="TextSegSigDiff">r</span>ni<span class="TextSegSigDiff">ng</span>', 'U<span class="TextSegSigDiff">s</span><span class="TextSegSigDiff">er</span>Warning', '<span class="TextSegSigDiff">ValueError',</span> <span class="TextSegSigDiff">'</span>Warning',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">ValueError',</span> <span class="TextSegSigDiff">'Warning',</span> <span class="TextSegSigDiff">'</span>ZeroDivisionError', '_', '__bu<span class="TextSegSigDiff">il</span><span class="TextSegSigDiff">d</span><span class="TextSegSigDiff">_class</span>__',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'ZeroDivisionError', '_', '__<span class="TextSegSigDiff">de</span>bu<span class="TextSegSigDiff">g__',</span> <span class="TextSegSigDiff">'__doc__',</span> <span class="TextSegSigDiff">'__import</span>__',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '__<span class="TextSegSigDiff">d</span><span class="TextSegSigDiff">ebug</span>__', '__<span class="TextSegSigDiff">doc</span>__', '<span class="TextSegSigDiff">__import__</span>', '<span class="TextSegSigDiff">__name__</span>', '<span class="TextSegSigDiff">__pack</span><span class="TextSegSigDiff">age__</span>', '<span class="TextSegSigDiff">ab</span><span class="TextSegSigDiff">s</span>',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '__<span class="TextSegSigDiff">name</span>__', '__<span class="TextSegSigDiff">package</span>__', '<span class="TextSegSigDiff">abs</span>', '<span class="TextSegSigDiff">all</span>', '<span class="TextSegSigDiff">any',</span> <span class="TextSegSigDiff">'apply</span>', '<span class="TextSegSigDiff">basestring</span>',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">all',</span> <span class="TextSegSigDiff">'any',</span> <span class="TextSegSigDiff">'ascii</span>', 'b<span class="TextSegSigDiff">in</span>', 'b<span class="TextSegSigDiff">ool</span>', 'bytearray', 'bytes', 'callable',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">bi</span><span class="TextSegSigDiff">n</span>', 'b<span class="TextSegSigDiff">ool</span>', 'b<span class="TextSegSigDiff">uffer</span>', 'bytearray', 'bytes', 'callable<span class="TextSegSigDiff">',</span> <span class="TextSegSigDiff">'chr</span>',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'c<span class="TextSegSigDiff">hr',</span> <span class="TextSegSigDiff">'c</span>lassmethod', 'compile', 'complex', 'copyright<span class="TextSegSigDiff">',</span> <span class="TextSegSigDiff">'credits</span>',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'classmethod<span class="TextSegSigDiff">',</span> <span class="TextSegSigDiff">'cmp</span>', 'co<span class="TextSegSigDiff">erce',</span> <span class="TextSegSigDiff">'co</span>mpile', 'complex', 'copyright',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval<span class="TextSegSigDiff">',</span> <span class="TextSegSigDiff">'exec',</span> <span class="TextSegSigDiff">'exit</span>',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">credits',</span> <span class="TextSegSigDiff">'</span>delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'fil<span class="TextSegSigDiff">t</span><span class="TextSegSigDiff">e</span>r', 'float', 'format', 'frozenset<span class="TextSegSigDiff">',</span> <span class="TextSegSigDiff">'getattr',</span> <span class="TextSegSigDiff">'globals',</span> <span class="TextSegSigDiff">'hasattr</span>',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">exec</span>fil<span class="TextSegSigDiff">e',</span> <span class="TextSegSigDiff">'exit',</span> <span class="TextSegSigDiff">'file',</span> <span class="TextSegSigDiff">'filte</span>r', 'float', 'format', 'frozenset',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; <span class="TextSegSigDiff">'getattr',</span> <span class="TextSegSigDiff">'globals',</span> <span class="TextSegSigDiff">'hasattr',</span> <span class="TextSegSigDiff">'hash',</span> <span class="TextSegSigDiff">'help',</span> <span class="TextSegSigDiff">'hex',</span> <span class="TextSegSigDiff">'id',</span> <span class="TextSegSigDiff">'input',</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">hash',</span> <span class="TextSegSigDiff">'help',</span> <span class="TextSegSigDiff">'hex',</span> <span class="TextSegSigDiff">'id',</span> <span class="TextSegSigDiff">'inpu</span>t', 'int', 'isinstance', 'issubclas<span class="TextSegSigDiff">s</span>',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">n</span>t', 'int<span class="TextSegSigDiff">ern</span>', 'isinstance', 'issubclas<span class="TextSegSigDiff">s',</span> <span class="TextSegSigDiff">'iter',</span> <span class="TextSegSigDiff">'len',</span> <span class="TextSegSigDiff">'license</span>',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">i</span><span class="TextSegSigDiff">ter</span>', 'l<span class="TextSegSigDiff">en',</span> <span class="TextSegSigDiff">'license',</span> <span class="TextSegSigDiff">'list</span>', 'lo<span class="TextSegSigDiff">cals</span>', 'map', 'max', 'memoryview',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">list</span>', 'l<span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">ca</span><span class="TextSegSigDiff">l</span><span class="TextSegSigDiff">s</span>', 'lo<span class="TextSegSigDiff">ng</span>', 'map', 'max', 'memoryview<span class="TextSegSigDiff">',</span> <span class="TextSegSigDiff">'min',</span> <span class="TextSegSigDiff">'next</span>',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">min',</span> <span class="TextSegSigDiff">'next',</span> <span class="TextSegSigDiff">'</span>object', 'oct', 'open', 'ord', 'pow', 'print', 'property',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property<span class="TextSegSigDiff">',</span> <span class="TextSegSigDiff">'quit</span>',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">quit',</span> <span class="TextSegSigDiff">'</span>range', 'r<span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">pr</span>', 're<span class="TextSegSigDiff">v</span><span class="TextSegSigDiff">ersed</span>', 'r<span class="TextSegSigDiff">oun</span>d', '<span class="TextSegSigDiff">set</span>', 'se<span class="TextSegSigDiff">tattr</span>', '<span class="TextSegSigDiff">slice</span>',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'range', 'r<span class="TextSegSigDiff">aw_input</span>', 're<span class="TextSegSigDiff">duce</span>', 'r<span class="TextSegSigDiff">eloa</span>d', '<span class="TextSegSigDiff">repr</span>', '<span class="TextSegSigDiff">rever</span>se<span class="TextSegSigDiff">d</span>', '<span class="TextSegSigDiff">round</span>',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'sorted', 'staticmethod', 'str', 'sum', 'su<span class="TextSegSigDiff">per',</span> <span class="TextSegSigDiff">'tuple',</span> <span class="TextSegSigDiff">'ty</span>pe<span class="TextSegSigDiff">',</span> <span class="TextSegSigDiff">'vars</span>',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 's<span class="TextSegSigDiff">et',</span> <span class="TextSegSigDiff">'setattr',</span> <span class="TextSegSigDiff">'slice',</span> <span class="TextSegSigDiff">'s</span>orted', 'staticmethod', 'str', 'sum', 'supe<span class="TextSegSigDiff">r</span>',</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; 'zip']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp;&nbsp; '<span class="TextSegSigDiff">tuple',</span> <span class="TextSegSigDiff">'type',</span> <span class="TextSegSigDiff">'unichr',</span> <span class="TextSegSigDiff">'unicode',</span> <span class="TextSegSigDiff">'vars',</span> <span class="TextSegSigDiff">'xrange',</span> <span class="TextSegSigDiff">'</span>zip']</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Packages</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Packages</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">========</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">========</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Packages are a way of structuring Python's module namespace by using</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Packages are a way of structuring Python's module namespace by using</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;dotted module names&quot;.&nbsp; For example, the module name &quot;A.B&quot; designates</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;dotted module names&quot;.&nbsp; For example, the module name &quot;A.B&quot; designates</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a submodule named &quot;B&quot; in a package named &quot;A&quot;.&nbsp; Just like the use of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a submodule named &quot;B&quot; in a package named &quot;A&quot;.&nbsp; Just like the use of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">modules saves the authors of different modules from having to worry</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">modules saves the authors of different modules from having to worry</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">about each other's global variable names, the use of dotted module</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">about each other's global variable names, the use of dotted module</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">names saves the authors of multi-module packages like NumPy or the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">names saves the authors of multi-module packages like NumPy or the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python Imaging Library from having to worry about each other's module</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python Imaging Library from having to worry about each other's module</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">names.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">names.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Suppose you want to design a collection of modules (a &quot;package&quot;) for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Suppose you want to design a collection of modules (a &quot;package&quot;) for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the uniform handling of sound files and sound data.&nbsp; There are many</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the uniform handling of sound files and sound data.&nbsp; There are many</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">different sound file formats (usually recognized by their extension,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">different sound file formats (usually recognized by their extension,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for example: &quot;.wav&quot;, &quot;.aiff&quot;, &quot;.au&quot;), so you may need to create and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for example: &quot;.wav&quot;, &quot;.aiff&quot;, &quot;.au&quot;), so you may need to create and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">maintain a growing collection of modules for the conversion between</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">maintain a growing collection of modules for the conversion between</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the various file formats. There are also many different operations you</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the various file formats. There are also many different operations you</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">might want to perform on sound data (such as mixing, adding echo,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">might want to perform on sound data (such as mixing, adding echo,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">applying an equalizer function, creating an artificial stereo effect),</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">applying an equalizer function, creating an artificial stereo effect),</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">so in addition you will be writing a never-ending stream of modules to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">so in addition you will be writing a never-ending stream of modules to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">perform these operations.&nbsp; Here's a possible structure for your</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">perform these operations.&nbsp; Here's a possible structure for your</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">package (expressed in terms of a hierarchical filesystem):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">package (expressed in terms of a hierarchical filesystem):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; sound/&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Top-level package</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; sound/&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Top-level package</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; __init__.py&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Initialize the sound package</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; __init__.py&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; Initialize the sound package</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; formats/&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Subpackage for file format conversions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; formats/&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Subpackage for file format conversions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; __init__.py</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; __init__.py</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; wavread.py</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; wavread.py</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; wavwrite.py</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; wavwrite.py</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; aiffread.py</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; aiffread.py</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; aiffwrite.py</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; aiffwrite.py</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; auread.py</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; auread.py</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; auwrite.py</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; auwrite.py</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; effects/&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Subpackage for sound effects</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; effects/&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Subpackage for sound effects</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; __init__.py</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; __init__.py</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; echo.py</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; echo.py</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; surround.py</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; surround.py</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; reverse.py</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; reverse.py</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; filters/&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Subpackage for filters</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; filters/&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Subpackage for filters</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; __init__.py</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; __init__.py</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equalizer.py</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; equalizer.py</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; vocoder.py</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; vocoder.py</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; karaoke.py</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; karaoke.py</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When importing the package, Python searches through the directories on</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When importing the package, Python searches through the directories on</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;sys.path&quot; looking for the package subdirectory.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;sys.path&quot; looking for the package subdirectory.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;__init__.py&quot; files are required to make Python treat the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;__init__.py&quot; files are required to make Python treat the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">directories as containing packages; this is done to prevent</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">directories as containing packages; this is done to prevent</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">directories with a common name, such as &quot;string&quot;, from unintentionally</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">directories with a common name, such as &quot;string&quot;, from unintentionally</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">hiding valid modules that occur later on the module search path. In</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">hiding valid modules that occur later on the module search path. In</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the simplest case, &quot;__init__.py&quot; can just be an empty file, but it can</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the simplest case, &quot;__init__.py&quot; can just be an empty file, but it can</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">also execute initialization code for the package or set the &quot;__all__&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">also execute initialization code for the package or set the &quot;__all__&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">variable, described later.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">variable, described later.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Users of the package can import individual modules from the package,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Users of the package can import individual modules from the package,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for example:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; import sound.effects.echo</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import sound.effects.echo</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This loads the submodule &quot;sound.effects.echo&quot;.&nbsp; It must be referenced</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This loads the submodule &quot;sound.effects.echo&quot;.&nbsp; It must be referenced</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">with its full name.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">with its full name.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">An alternative way of importing the submodule is:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">An alternative way of importing the submodule is:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; from sound.effects import echo</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; from sound.effects import echo</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This also loads the submodule &quot;echo&quot;, and makes it available without</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This also loads the submodule &quot;echo&quot;, and makes it available without</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">its package prefix, so it can be used as follows:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">its package prefix, so it can be used as follows:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; echo.echofilter(input, output, delay=0.7, atten=4)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; echo.echofilter(input, output, delay=0.7, atten=4)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Yet another variation is to import the desired function or variable</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Yet another variation is to import the desired function or variable</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">directly:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">directly:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; from sound.effects.echo import echofilter</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; from sound.effects.echo import echofilter</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Again, this loads the submodule &quot;echo&quot;, but this makes its function</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Again, this loads the submodule &quot;echo&quot;, but this makes its function</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;echofilter()&quot; directly available:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;echofilter()&quot; directly available:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; echofilter(input, output, delay=0.7, atten=4)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; echofilter(input, output, delay=0.7, atten=4)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Note that when using &quot;from package import item&quot;, the item can be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Note that when using &quot;from package import item&quot;, the item can be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">either a submodule (or subpackage) of the package, or some&nbsp; other name</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">either a submodule (or subpackage) of the package, or some&nbsp; other name</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">defined in the package, like a function, class or variable.&nbsp; The</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">defined in the package, like a function, class or variable.&nbsp; The</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;import&quot; statement first tests whether the item is defined in the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;import&quot; statement first tests whether the item is defined in the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">package; if not, it assumes it is a module and attempts to load it.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">package; if not, it assumes it is a module and attempts to load it.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If it fails to find it, an &quot;ImportError&quot; exception is raised.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If it fails to find it, an &quot;ImportError&quot; exception is raised.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Contrarily, when using syntax like &quot;import item.subitem.subsubitem&quot;,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Contrarily, when using syntax like &quot;import item.subitem.subsubitem&quot;,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">each item except for the last must be a package; the last item can be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">each item except for the last must be a package; the last item can be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a module or a package but can't be a class or function or variable</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a module or a package but can't be a class or function or variable</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">defined in the previous item.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">defined in the previous item.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Importing * From a Package</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Importing * From a Package</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Now what happens when the user writes &quot;from sound.effects import *&quot;?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Now what happens when the user writes &quot;from sound.effects import *&quot;?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Ideally, one would hope that this somehow goes out to the filesystem,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Ideally, one would hope that this somehow goes out to the filesystem,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">finds which submodules are present in the package, and imports them</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">finds which submodules are present in the package, and imports them</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">all.&nbsp; This could take a long time and importing sub-modules might have</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">all.&nbsp; This could take a long time and importing sub-modules might have</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">unwanted side-effects that should only happen when the sub-module is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">unwanted side-effects that should only happen when the sub-module is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">explicitly imported.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">explicitly imported.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The only solution is for the package author to provide an explicit</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The only solution is for the package author to provide an explicit</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">index of the package.&nbsp; The &quot;import&quot; statement uses the following</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">index of the package.&nbsp; The &quot;import&quot; statement uses the following</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">convention: if a package's &quot;__init__.py&quot; code defines a list named</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">convention: if a package's &quot;__init__.py&quot; code defines a list named</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;__all__&quot;, it is taken to be the list of module names that should be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;__all__&quot;, it is taken to be the list of module names that should be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">imported when &quot;from package import *&quot; is encountered.&nbsp; It is up to the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">imported when &quot;from package import *&quot; is encountered.&nbsp; It is up to the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">package author to keep this list up-to-date when a new version of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">package author to keep this list up-to-date when a new version of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">package is released.&nbsp; Package authors may also decide not to support</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">package is released.&nbsp; Package authors may also decide not to support</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">it, if they don't see a use for importing * from their package.&nbsp; For</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">it, if they don't see a use for importing * from their package.&nbsp; For</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">example, the file &quot;sound/effects/__init__.py&quot; could contain the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">example, the file &quot;sound/effects/__init__.py&quot; could contain the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">following code:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">following code:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; __all__ = [&quot;echo&quot;, &quot;surround&quot;, &quot;reverse&quot;]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; __all__ = [&quot;echo&quot;, &quot;surround&quot;, &quot;reverse&quot;]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This would mean that &quot;from sound.effects import *&quot; would import the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This would mean that &quot;from sound.effects import *&quot; would import the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">three named submodules of the &quot;sound&quot; package.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">three named submodules of the &quot;sound&quot; package.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">If &quot;__all__&quot; is not defined, the statement &quot;from sound.effects import</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">If &quot;__all__&quot; is not defined, the statement &quot;from sound.effects import</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*&quot; does *not* import all submodules from the package &quot;sound.effects&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*&quot; does *not* import all submodules from the package &quot;sound.effects&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">into the current namespace; it only ensures that the package</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">into the current namespace; it only ensures that the package</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;sound.effects&quot; has been imported (possibly running any initialization</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;sound.effects&quot; has been imported (possibly running any initialization</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">code in &quot;__init__.py&quot;) and then imports whatever names are defined in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">code in &quot;__init__.py&quot;) and then imports whatever names are defined in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the package.&nbsp; This includes any names defined (and submodules</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the package.&nbsp; This includes any names defined (and submodules</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">explicitly loaded) by &quot;__init__.py&quot;.&nbsp; It also includes any submodules</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">explicitly loaded) by &quot;__init__.py&quot;.&nbsp; It also includes any submodules</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">of the package that were explicitly loaded by previous &quot;import&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">of the package that were explicitly loaded by previous &quot;import&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">statements.&nbsp; Consider this code:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">statements.&nbsp; Consider this code:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; import sound.effects.echo</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import sound.effects.echo</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; import sound.effects.surround</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import sound.effects.surround</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; from sound.effects import *</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; from sound.effects import *</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In this example, the &quot;echo&quot; and &quot;surround&quot; modules are imported in the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In this example, the &quot;echo&quot; and &quot;surround&quot; modules are imported in the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">current namespace because they are defined in the &quot;sound.effects&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">current namespace because they are defined in the &quot;sound.effects&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">package when the &quot;from...import&quot; statement is executed.&nbsp; (This also</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">package when the &quot;from...import&quot; statement is executed.&nbsp; (This also</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">works when &quot;__all__&quot; is defined.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">works when &quot;__all__&quot; is defined.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Although certain modules are designed to export only names that follow</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Although certain modules are designed to export only names that follow</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">certain patterns when you use &quot;import *&quot;, it is still considered bad</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">certain patterns when you use &quot;import *&quot;, it is still considered bad</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">practice in production code.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">practice in production code.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Remember, there is nothing wrong with using &quot;from Package import</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Remember, there is nothing wrong with using &quot;from Package import</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">specific_submodule&quot;!&nbsp; In fact, this is the recommended notation unless</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">specific_submodule&quot;!&nbsp; In fact, this is the recommended notation unless</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the importing module needs to use submodules with the same name from</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the importing module needs to use submodules with the same name from</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">different packages.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">different packages.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Intra-package References</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Intra-package References</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">------------------------</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">-+</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">submodules</span> <span class="TextSegSigDiff">often</span> <span class="TextSegSigDiff">need</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">refer</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">each</span> <span class="TextSegSigDiff">other.</span>&nbsp; <span class="TextSegSigDiff">For</span> <span class="TextSegSigDiff">example,</span> <span class="TextSegSigDiff">the</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;surround&quot;</span> <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">might</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;echo&quot;</span> <span class="TextSegSigDiff">module.</span>&nbsp; <span class="TextSegSigDiff">In</span> <span class="TextSegSigDiff">fact,</span> <span class="TextSegSigDiff">such</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">references</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">common</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;import&quot;</span> <span class="TextSegSigDiff">statement</span> <span class="TextSegSigDiff">first</span> <span class="TextSegSigDiff">looks</span> <span class="TextSegSigDiff">in</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">containing</span> <span class="TextSegSigDiff">package</span> <span class="TextSegSigDiff">before</span> <span class="TextSegSigDiff">looking</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">standard</span> <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">search</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">path.</span> <span class="TextSegSigDiff">Thus,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;surround&quot;</span> <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">simply</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">&quot;import</span> <span class="TextSegSigDiff">echo&quot;</span> <span class="TextSegSigDiff">or</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;from</span> <span class="TextSegSigDiff">echo</span> <span class="TextSegSigDiff">import</span> <span class="TextSegSigDiff">echofilter&quot;.</span>&nbsp; <span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">imported</span> <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">found</span> <span class="TextSegSigDiff">in</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">current</span> <span class="TextSegSigDiff">package</span> <span class="TextSegSigDiff">(the</span> <span class="TextSegSigDiff">package</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">which</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">current</span> <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">a</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">submodule),</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;import&quot;</span> <span class="TextSegSigDiff">statement</span> <span class="TextSegSigDiff">looks</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">top-level</span> <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">with</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">given</span> <span class="TextSegSigDiff">name.</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When packages are structured into subpackages (as with the &quot;sound&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When packages are structured into subpackages (as with the &quot;sound&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">package in the example), you can use absolute imports to refer to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">package in the example), you can use absolute imports to refer to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">submodules of siblings packages.&nbsp; For example, if the module</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">submodules of siblings packages.&nbsp; For example, if the module</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;sound.filters.vocoder&quot; needs to use the &quot;echo&quot; module in the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;sound.filters.vocoder&quot; needs to use the &quot;echo&quot; module in the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;sound.effects&quot; package, it can use &quot;from sound.effects import echo&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;sound.effects&quot; package, it can use &quot;from sound.effects import echo&quot;.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Starting</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">2.5,</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">addition</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">implicit</span> <span class="TextSegSigDiff">relative</span> <span class="TextSegSigDiff">imports</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">You can <span class="TextSegSigDiff">also</span> write relative imports<span class="TextSegSigDiff">,</span> with th<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">&quot;from</span> <span class="TextSegSigDiff">modul</span>e <span class="TextSegSigDiff">import</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">described</span> <span class="TextSegSigDiff">above,</span> you can writ<span class="TextSegSigDiff">e</span> e<span class="TextSegSigDiff">xplicit</span> relative imports with the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">name&quot; form of import statement.&nbsp; These <span class="TextSegSigDiff">imports</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">leading</span> <span class="TextSegSigDiff">dots</span> t<span class="TextSegSigDiff">o</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;from</span> <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">import</span> name&quot; form of import statement. These <span class="TextSegSigDiff">exp</span><span class="TextSegSigDiff">lic</span><span class="TextSegSigDiff">i</span>t</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">indicate the current and parent <span class="TextSegSigDiff">packages</span> <span class="TextSegSigDiff">involved</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">relative</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">relative</span> <span class="TextSegSigDiff">imports</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">lead</span>in<span class="TextSegSigDiff">g</span> d<span class="TextSegSigDiff">ots</span> <span class="TextSegSigDiff">to</span> i<span class="TextSegSigDiff">ndi</span>cate the current and parent</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">import.&nbsp; From the &quot;surround&quot; modu<span class="TextSegSigDiff">le</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">examp</span>le<span class="TextSegSigDiff">,</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">might</span> <span class="TextSegSigDiff">use:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">packages</span> <span class="TextSegSigDiff">involved</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">relat</span>i<span class="TextSegSigDiff">ve</span> <span class="TextSegSigDiff">i</span>mport. From the &quot;surround&quot; module</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">example,</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">might</span> <span class="TextSegSigDiff">use:</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; from . import echo</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; from . import echo</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; from .. import formats</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; from .. import formats</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; from ..filters import equalizer</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; from ..filters import equalizer</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">Note that relative imports are based on th<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">nam</span>e <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">current</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">Note that <span class="TextSegSigDiff">both</span> <span class="TextSegSigDiff">explicit</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">implicit</span> relative imports are based on the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">module.&nbsp; Since the name of the main module is <span class="TextSegSigDiff">always</span> <span class="TextSegSigDiff">&quot;&quot;__main__&quot;&quot;,</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">na</span>m<span class="TextSegSigDiff">e</span> o<span class="TextSegSigDiff">f</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">current</span> <span class="TextSegSigDiff">mo</span>dule. Since the name of the main module is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">modules intended for use as the main module of <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">Python</span> a<span class="TextSegSigDiff">pplication</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">always</span> <span class="TextSegSigDiff">&quot;&quot;__main__&quot;&quot;,</span> modules intended for use as the main module of a</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">m</span><span class="TextSegSigDiff">ust</span> always use absolute imports.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">application</span> <span class="TextSegSigDiff">should</span> always use absolute imports.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Packages in Multiple Directories</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Packages in Multiple Directories</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">--------------------------------</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">--------------------------------</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Packages support one more special attribute, &quot;__path__&quot;.&nbsp; This is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Packages support one more special attribute, &quot;__path__&quot;.&nbsp; This is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">initialized to be a list containing the name of the directory holding</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">initialized to be a list containing the name of the directory holding</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the package's &quot;__init__.py&quot; before the code in that file is executed.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the package's &quot;__init__.py&quot; before the code in that file is executed.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This variable can be modified; doing so affects future searches for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This variable can be modified; doing so affects future searches for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">modules and subpackages contained in the package.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">modules and subpackages contained in the package.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">While this feature is not often needed, it can be used to extend the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">While this feature is not often needed, it can be used to extend the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">set of modules found in a package.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">set of modules found in a package.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">-[ Footnotes ]-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">-[ Footnotes ]-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">[1] In fact function definitions are also 'statements' that are</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">[1] In fact function definitions are also 'statements' that are</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 'executed'; the execution of a module-level function definition</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; 'executed'; the execution of a module-level function definition</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; enters the function name in the module's global symbol table.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp;&nbsp; enters the function name in the module's global symbol table.</td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\tutorial\stdlib.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Brief Tour of the Standard Library</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Brief Tour of the Standard Library</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">**********************************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">**********************************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Operating System Interface</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Operating System Interface</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==========================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==========================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;os&quot; module provides dozens of functions for interacting with the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;os&quot; module provides dozens of functions for interacting with the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">operating system:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">operating system:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import os</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import os</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; os.getcwd()&nbsp; &nbsp; &nbsp; # Return the current working directory</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; os.getcwd()&nbsp; &nbsp; &nbsp; # Return the current working directory</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; 'C:\\Python<span class="TextSegSigDiff">3</span>6'</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; 'C:\\Python<span class="TextSegSigDiff">2</span>6'</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; os.chdir('/server/accesslogs')&nbsp;&nbsp; # Change current working directory</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; os.chdir('/server/accesslogs')&nbsp;&nbsp; # Change current working directory</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; os.system('mkdir today')&nbsp;&nbsp; # Run the command mkdir in the system shell</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; os.system('mkdir today')&nbsp;&nbsp; # Run the command mkdir in the system shell</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Be sure to use the &quot;import os&quot; style instead of &quot;from os import *&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Be sure to use the &quot;import os&quot; style instead of &quot;from os import *&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This will keep &quot;os.open()&quot; from shadowing the built-in &quot;open()&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This will keep &quot;os.open()&quot; from shadowing the built-in &quot;open()&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">function which operates much differently.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">function which operates much differently.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The built-in &quot;dir()&quot; and &quot;help()&quot; functions are useful as interactive</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The built-in &quot;dir()&quot; and &quot;help()&quot; functions are useful as interactive</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">aids for working with large modules like &quot;os&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">aids for working with large modules like &quot;os&quot;:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import os</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import os</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; dir(os)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; dir(os)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &lt;returns a list of all module functions&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &lt;returns a list of all module functions&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; help(os)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; help(os)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &lt;returns an extensive manual page created from the module's docstrings&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &lt;returns an extensive manual page created from the module's docstrings&gt;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For daily file and directory management tasks, the &quot;shutil&quot; module</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For daily file and directory management tasks, the &quot;shutil&quot; module</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">provides a higher level interface that is easier to use:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">provides a higher level interface that is easier to use:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import shutil</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import shutil</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; shutil.copyfile('data.db', 'archive.db')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; shutil.copyfile('data.db', 'archive.db')</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">'archive.db'</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; shutil.move('/build/executables', 'installdir')</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; shutil.move('/build/executables', 'installdir')</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">'installdir'</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">File Wildcards</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">File Wildcards</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==============</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==============</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;glob&quot; module provides a function for making file lists from</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;glob&quot; module provides a function for making file lists from</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">directory wildcard searches:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">directory wildcard searches:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import glob</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import glob</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; glob.glob('*.py')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; glob.glob('*.py')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ['primes.py', 'random.py', 'quote.py']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ['primes.py', 'random.py', 'quote.py']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Command Line Arguments</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Command Line Arguments</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">======================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">======================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Common utility scripts often need to process command line arguments.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Common utility scripts often need to process command line arguments.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">These arguments are stored in the &quot;sys&quot; module's *argv* attribute as a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">These arguments are stored in the &quot;sys&quot; module's *argv* attribute as a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">list.&nbsp; For instance the following output results from running &quot;python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">list.&nbsp; For instance the following output results from running &quot;python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">demo.py one two three&quot; at the command line:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">demo.py one two three&quot; at the command line:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import sys</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import sys</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>sys.argv<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print sys.argv</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; ['demo.py', 'one', 'two', 'three']</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ['demo.py', 'one', 'two', 'three']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;getopt&quot; module processes *sys.argv* using the conventions of the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;getopt&quot; module processes *sys.argv* using the conventions of the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Unix &quot;getopt()&quot; function.&nbsp; More powerful and flexible command line</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Unix &quot;getopt()&quot; function.&nbsp; More powerful and flexible command line</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">processing is provided by the &quot;argparse&quot; module.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">processing is provided by the &quot;argparse&quot; module.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Error Output Redirection and Program Termination</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Error Output Redirection and Program Termination</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">================================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">================================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;sys&quot; module also has attributes for *stdin*, *stdout*, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;sys&quot; module also has attributes for *stdin*, *stdout*, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*stderr*. The latter is useful for emitting warnings and error</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*stderr*. The latter is useful for emitting warnings and error</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">messages to make them visible even when *stdout* has been redirected:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">messages to make them visible even when *stdout* has been redirected:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sys.stderr.write('Warning, log file not found starting a new one\n')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sys.stderr.write('Warning, log file not found starting a new one\n')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Warning, log file not found starting a new one</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Warning, log file not found starting a new one</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The most direct way to terminate a script is to use &quot;sys.exit()&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The most direct way to terminate a script is to use &quot;sys.exit()&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">String Pattern Matching</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">String Pattern Matching</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=======================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=======================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;re&quot; module provides regular expression tools for advanced string</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;re&quot; module provides regular expression tools for advanced string</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">processing. For complex matching and manipulation, regular expressions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">processing. For complex matching and manipulation, regular expressions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">offer succinct, optimized solutions:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">offer succinct, optimized solutions:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import re</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import re</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; re.findall(r'\bf[a-z]*', 'which foot or hand fell fastest')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; re.findall(r'\bf[a-z]*', 'which foot or hand fell fastest')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ['foot', 'fell', 'fastest']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ['foot', 'fell', 'fastest']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; re.sub(r'(\b[a-z]+) \1', r'\1', 'cat in the the hat')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; re.sub(r'(\b[a-z]+) \1', r'\1', 'cat in the the hat')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'cat in the hat'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'cat in the hat'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">When only simple capabilities are needed, string methods are preferred</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">When only simple capabilities are needed, string methods are preferred</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">because they are easier to read and debug:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">because they are easier to read and debug:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 'tea for too'.replace('too', 'two')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 'tea for too'.replace('too', 'two')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'tea for two'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'tea for two'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Mathematics</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Mathematics</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===========</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===========</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;math&quot; module gives access to the underlying C library functions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;math&quot; module gives access to the underlying C library functions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for floating point math:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for floating point math:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import math</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import math</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; math.cos(math.pi / 4)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; math.cos(math.pi / 4<span class="TextSegSigDiff">.0</span>)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; 0.70710678118654757</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; 0.70710678118654757</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; math.log(1024, 2)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; math.log(1024, 2)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 10.0</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 10.0</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;random&quot; module provides tools for making random selections:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;random&quot; module provides tools for making random selections:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import random</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import random</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; random.choice(['apple', 'pear', 'banana'])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; random.choice(['apple', 'pear', 'banana'])</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; 'apple'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'apple'</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; random.sample(range(100), 10)&nbsp;&nbsp; # sampling without replacement</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; random.sample(<span class="TextSegSigDiff">x</span>range(100), 10)&nbsp;&nbsp; # sampling without replacement</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; [30, 83, 16, 4, 8, 81, 41, 50, 18, 33]</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; [30, 83, 16, 4, 8, 81, 41, 50, 18, 33]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; random.random()&nbsp; &nbsp; # random float</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; random.random()&nbsp; &nbsp; # random float</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0.17970987693706186</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0.17970987693706186</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; random.randrange(6)&nbsp; &nbsp; # random integer chosen from range(6)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; random.randrange(6)&nbsp; &nbsp; # random integer chosen from range(6)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 4</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 4</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">&quot;statistics&quot;</span> <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">calculates</span> <span class="TextSegSigDiff">basic</span> <span class="TextSegSigDiff">statistical</span> <span class="TextSegSigDiff">properties</span> <span class="TextSegSigDiff">(the</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">mean,</span> <span class="TextSegSigDiff">median,</span> <span class="TextSegSigDiff">variance,</span> <span class="TextSegSigDiff">etc.)</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">numeric</span> <span class="TextSegSigDiff">data:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">import</span> <span class="TextSegSigDiff">statistics</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">data</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">[2.75,</span> <span class="TextSegSigDiff">1.75,</span> <span class="TextSegSigDiff">1.25,</span> <span class="TextSegSigDiff">0.25,</span> <span class="TextSegSigDiff">0.5,</span> <span class="TextSegSigDiff">1.25,</span> <span class="TextSegSigDiff">3.5]</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">statistics.mean(data)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">1.6071428571428572</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">statistics.median(data)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">1.25</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">statistics.variance(data)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">1.3720238095238095</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">SciPy</span> <span class="TextSegSigDiff">project</span> <span class="TextSegSigDiff">&lt;https://scipy.org&gt;</span> <span class="TextSegSigDiff">has</span> <span class="TextSegSigDiff">many</span> <span class="TextSegSigDiff">other</span> <span class="TextSegSigDiff">modules</span> <span class="TextSegSigDiff">for</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">numerical</span> <span class="TextSegSigDiff">computations.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Internet Access</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Internet Access</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===============</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===============</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">There are a number of modules for accessing the internet and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">There are a number of modules for accessing the internet and</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">processing internet protocols. Two of the simplest are</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">processing internet protocols. Two of the simplest are <span class="TextSegSigDiff">&quot;urllib2&quot;</span> <span class="TextSegSigDiff">for</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;urllib.request&quot;</span> <span class="TextSegSigDiff">for</span> r<span class="TextSegSigDiff">etr</span>ieving data from URLs and &quot;smtplib&quot; for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">r</span><span class="TextSegSigDiff">e</span><span class="TextSegSigDiff">t</span>rieving data from URLs and &quot;smtplib&quot; for <span class="TextSegSigDiff">sending</span> <span class="TextSegSigDiff">mail:</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">sending</span> <span class="TextSegSigDiff">mail:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">import</span> <span class="TextSegSigDiff">urllib2</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">urllib.request</span> <span class="TextSegSigDiff">import</span> <span class="TextSegSigDiff">urlopen</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">w</span><span class="TextSegSigDiff">ith</span> urlopen('http://tycho.usno.navy.mil/cgi-bin/timer.pl') <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">response</span>:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">in</span> url<span class="TextSegSigDiff">lib2.url</span>open('http://tycho.usno.navy.mil/cgi-bin/timer.pl'):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">response:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">line</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">line.decode('utf-8')</span>&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">Decoding</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">binary</span> <span class="TextSegSigDiff">data</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">text.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; if 'EST' in line or 'EDT' in line:&nbsp; # look for Eastern Time</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; if 'EST' in line or 'EDT' in line:&nbsp; # look for Eastern Time</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>line<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; print line</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &lt;BR&gt;Nov. 25, 09:43:32 PM EST</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &lt;BR&gt;Nov. 25, 09:43:32 PM EST</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import smtplib</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import smtplib</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; server = smtplib.SMTP('localhost')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; server = smtplib.SMTP('localhost')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; server.sendmail('soothsayer@example.org', 'jcaesar@example.org',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; server.sendmail('soothsayer@example.org', 'jcaesar@example.org',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ... &quot;&quot;&quot;To: jcaesar@example.org</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... &quot;&quot;&quot;To: jcaesar@example.org</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ... From: soothsayer@example.org</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... From: soothsayer@example.org</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ... Beware the Ides of March.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... Beware the Ides of March.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ... &quot;&quot;&quot;)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... &quot;&quot;&quot;)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; server.quit()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; server.quit()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">(Note that the second example needs a mailserver running on</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">(Note that the second example needs a mailserver running on</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">localhost.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">localhost.)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Dates and Times</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Dates and Times</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===============</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===============</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;datetime&quot; module supplies classes for manipulating dates and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;datetime&quot; module supplies classes for manipulating dates and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">times in both simple and complex ways. While date and time arithmetic</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">times in both simple and complex ways. While date and time arithmetic</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is supported, the focus of the implementation is on efficient member</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is supported, the focus of the implementation is on efficient member</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">extraction for output formatting and manipulation.&nbsp; The module also</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">extraction for output formatting and manipulation.&nbsp; The module also</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">supports objects that are timezone aware.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">supports objects that are timezone aware.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # dates are easily constructed and formatted</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # dates are easily constructed and formatted</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from datetime import date</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from datetime import date</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; now = date.today()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; now = date.today()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; now</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; now</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; datetime.date(2003, 12, 2)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; datetime.date(2003, 12, 2)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; now.strftime(&quot;%m-%d-%y. %d %b %Y is a %A on the %d day of %B.&quot;)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; now.strftime(&quot;%m-%d-%y. %d %b %Y is a %A on the %d day of %B.&quot;)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; '12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; '12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # dates support calendar arithmetic</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; # dates support calendar arithmetic</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; birthday = date(1964, 7, 31)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; birthday = date(1964, 7, 31)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; age = now - birthday</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; age = now - birthday</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; age.days</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; age.days</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 14368</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 14368</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Data Compression</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Data Compression</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">Common data archiving and compression formats are directly supported</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Common data archiving and compression formats are directly supported</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">by modules including: &quot;zlib&quot;, &quot;gzip&quot;, &quot;bz2&quot;, &quot;<span class="TextSegSigDiff">lzma&quot;,</span> <span class="TextSegSigDiff">&quot;</span>zipfile&quot; and</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">by modules including: &quot;zlib&quot;, &quot;gzip&quot;, &quot;bz2&quot;, &quot;zipfile&quot; and <span class="TextSegSigDiff">&quot;tarfile&quot;.</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;tarfile&quot;.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import zlib</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import zlib</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; s = <span class="TextSegSigDiff">b</span>'witch which has which witches wrist watch'</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; s = 'witch which has which witches wrist watch'</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; len(s)</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; len(s)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 41</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 41</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t = zlib.compress(s)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t = zlib.compress(s)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; len(t)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; len(t)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 37</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 37</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; zlib.decompress(t)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; zlib.decompress(t)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">b</span>'witch which has which witches wrist watch'</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; 'witch which has which witches wrist watch'</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; zlib.crc32(s)</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; zlib.crc32(s)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 226805979</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 226805979</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Performance Measurement</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Performance Measurement</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=======================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=======================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Some Python users develop a deep interest in knowing the relative</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Some Python users develop a deep interest in knowing the relative</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">performance of different approaches to the same problem. Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">performance of different approaches to the same problem. Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">provides a measurement tool that answers those questions immediately.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">provides a measurement tool that answers those questions immediately.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For example, it may be tempting to use the tuple packing and unpacking</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For example, it may be tempting to use the tuple packing and unpacking</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">feature instead of the traditional approach to swapping arguments. The</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">feature instead of the traditional approach to swapping arguments. The</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;timeit&quot; module quickly demonstrates a modest performance advantage:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;timeit&quot; module quickly demonstrates a modest performance advantage:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from timeit import Timer</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from timeit import Timer</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0.57535828626024577</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0.57535828626024577</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; Timer('a,b = b,a', 'a=1; b=2').timeit()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; Timer('a,b = b,a', 'a=1; b=2').timeit()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0.54962537085770791</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0.54962537085770791</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In contrast to &quot;timeit&quot;'s fine level of granularity, the &quot;profile&quot; and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In contrast to &quot;timeit&quot;'s fine level of granularity, the &quot;profile&quot; and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;pstats&quot; modules provide tools for identifying time critical sections</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;pstats&quot; modules provide tools for identifying time critical sections</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">in larger blocks of code.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">in larger blocks of code.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Quality Control</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Quality Control</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===============</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===============</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">One approach for developing high quality software is to write tests</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">One approach for developing high quality software is to write tests</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">for each function as it is developed and to run those tests frequently</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">for each function as it is developed and to run those tests frequently</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">during the development process.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">during the development process.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;doctest&quot; module provides a tool for scanning a module and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;doctest&quot; module provides a tool for scanning a module and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">validating tests embedded in a program's docstrings.&nbsp; Test</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">validating tests embedded in a program's docstrings.&nbsp; Test</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">construction is as simple as cutting-and-pasting a typical call along</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">construction is as simple as cutting-and-pasting a typical call along</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">with its results into the docstring. This improves the documentation</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">with its results into the docstring. This improves the documentation</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">by providing the user with an example and it allows the doctest module</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">by providing the user with an example and it allows the doctest module</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to make sure the code remains true to the documentation:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to make sure the code remains true to the documentation:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def average(values):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def average(values):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;Computes the arithmetic mean of a list of numbers.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;Computes the arithmetic mean of a list of numbers.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>average([20, 30, 70]<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &gt;&gt;&gt; print average([20, 30, 70])</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; 40.0</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; 40.0</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &quot;&quot;&quot;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; return sum(values) / len(values)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; return sum(values<span class="TextSegSigDiff">,</span> <span class="TextSegSigDiff">0.0</span>) / len(values)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; import doctest</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import doctest</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; doctest.testmod()&nbsp;&nbsp; # automatically validate the embedded tests</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; doctest.testmod()&nbsp;&nbsp; # automatically validate the embedded tests</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;unittest&quot; module is not as effortless as the &quot;doctest&quot; module,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;unittest&quot; module is not as effortless as the &quot;doctest&quot; module,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">but it allows a more comprehensive set of tests to be maintained in a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">but it allows a more comprehensive set of tests to be maintained in a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">separate file:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">separate file:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; import unittest</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import unittest</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class TestStatisticalFunctions(unittest.TestCase):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class TestStatisticalFunctions(unittest.TestCase):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def test_average(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def test_average(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.assertEqual(average([20, 30, 70]), 40.0)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.assertEqual(average([20, 30, 70]), 40.0)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.assertEqual(round(average([1, 5, 7]), 1), 4.3)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.assertEqual(round(average([1, 5, 7]), 1), 4.3)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; with self.assertRaises(ZeroDivisionError):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; with self.assertRaises(ZeroDivisionError):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; average([])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; average([])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; with self.assertRaises(TypeError):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; with self.assertRaises(TypeError):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; average(20, 30, 70)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; average(20, 30, 70)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; unittest.main()&nbsp; # Calling from the command line invokes all tests</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; unittest.main()&nbsp; # Calling from the command line invokes all tests</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Batteries Included</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Batteries Included</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python has a &quot;batteries included&quot; philosophy.&nbsp; This is best seen</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python has a &quot;batteries included&quot; philosophy.&nbsp; This is best seen</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">through the sophisticated and robust capabilities of its larger</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">through the sophisticated and robust capabilities of its larger</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">packages. For example:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">packages. For example:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">* The &quot;xmlrpc<span class="TextSegSigDiff">.c</span>li<span class="TextSegSigDiff">ent</span>&quot; and &quot;xmlrpc<span class="TextSegSigDiff">.</span>server&quot; modules make implementing</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">* The &quot;xmlrpcli<span class="TextSegSigDiff">b</span>&quot; and &quot;<span class="TextSegSigDiff">Simple</span>XMLRPCServer&quot; modules make implementing</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp; remote procedure calls into an almost trivial task.&nbsp; Despite the</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp; remote procedure calls into an almost trivial task.&nbsp; Despite the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; modules names, no direct knowledge or handling of XML is needed.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; modules names, no direct knowledge or handling of XML is needed.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* The &quot;email&quot; package is a library for managing email messages,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* The &quot;email&quot; package is a library for managing email messages,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; including MIME and other RFC 2822-based message documents. Unlike</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; including MIME and other RFC 2822-based message documents. Unlike</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; &quot;smtplib&quot; and &quot;poplib&quot; which actually send and receive messages, the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; &quot;smtplib&quot; and &quot;poplib&quot; which actually send and receive messages, the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; email package has a complete toolset for building or decoding</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; email package has a complete toolset for building or decoding</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; complex message structures (including attachments) and for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; complex message structures (including attachments) and for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; implementing internet encoding and header protocols.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; implementing internet encoding and header protocols.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">* The &quot;<span class="TextSegSigDiff">js</span><span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">n</span>&quot; package provide<span class="TextSegSigDiff">s</span> robust support fo<span class="TextSegSigDiff">r</span> <span class="TextSegSigDiff">parsing</span> <span class="TextSegSigDiff">this</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">* The &quot;<span class="TextSegSigDiff">xml.dom&quot;</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">&quot;xml.sax</span>&quot; package<span class="TextSegSigDiff">s</span> provide robust support fo<span class="TextSegSigDiff">r</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; popular data interchange format.&nbsp; The &quot;csv&quot; <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">supports</span> <span class="TextSegSigDiff">direct</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; p<span class="TextSegSigDiff">arsing</span> <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">p</span>opular data interchange format. <span class="TextSegSigDiff">Likewise,</span> the &quot;csv&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">reading</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">writing</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">files</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">Comma-Separated</span> <span class="TextSegSigDiff">Value</span> <span class="TextSegSigDiff">format,</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">com</span>mo<span class="TextSegSigDiff">n</span><span class="TextSegSigDiff">ly</span> support<span class="TextSegSigDiff">ed</span> <span class="TextSegSigDiff">by</span> d<span class="TextSegSigDiff">a</span>t<span class="TextSegSigDiff">abase</span>s and <span class="TextSegSigDiff">spr</span><span class="TextSegSigDiff">eadsheets.</span>&nbsp; <span class="TextSegSigDiff">X</span><span class="TextSegSigDiff">ML</span> <span class="TextSegSigDiff">processing</span> <span class="TextSegSigDiff">i</span>s</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; mo<span class="TextSegSigDiff">dule</span> support<span class="TextSegSigDiff">s</span> d<span class="TextSegSigDiff">irec</span>t <span class="TextSegSigDiff">read</span>s and <span class="TextSegSigDiff">w</span><span class="TextSegSigDiff">rite</span><span class="TextSegSigDiff">s</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">comm</span><span class="TextSegSigDiff">o</span><span class="TextSegSigDiff">n</span> <span class="TextSegSigDiff">databa</span>s<span class="TextSegSigDiff">e</span> <span class="TextSegSigDiff">format.</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">supported</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;xml.etree.ElementTree&quot;,</span> <span class="TextSegSigDiff">&quot;xml.dom&quot;</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">&quot;xml.sax&quot;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">packages.</span> Together, these modules and packages greatly simplify data</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; Together, these modules and packages greatly simplify data</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp; interchange between Python applications and other tools.</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp; interchange between Python applications and other tools.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">&quot;sqlite3&quot;</span> <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">wrapper</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">SQLite</span> <span class="TextSegSigDiff">database</span> <span class="TextSegSigDiff">library,</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">providing</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">persistent</span> <span class="TextSegSigDiff">database</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">updated</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">accessed</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">using</span> <span class="TextSegSigDiff">slightly</span> <span class="TextSegSigDiff">nonstandard</span> <span class="TextSegSigDiff">SQL</span> <span class="TextSegSigDiff">syntax.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* Internationalization is supported by a number of modules including</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* Internationalization is supported by a number of modules including</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp; &quot;gettext&quot;, &quot;locale&quot;, and the &quot;codecs&quot; package.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; &quot;gettext&quot;, &quot;locale&quot;, and the &quot;codecs&quot; package.</td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\tutorial\stdlib2.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Brief Tour of the Standard Library --- Part II</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Brief Tour of the Standard Library --- Part II</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">**********************************************</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">**********************************************</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This second tour covers more advanced modules that support</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This second tour covers more advanced modules that support</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">professional programming needs.&nbsp; These modules rarely occur in small</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">professional programming needs.&nbsp; These modules rarely occur in small</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">scripts.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">scripts.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Output Formatting</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Output Formatting</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=================</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">The &quot;repr<span class="TextSegSigDiff">lib</span>&quot; module provides a version of &quot;repr()&quot; customized for</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">The &quot;repr&quot; module provides a version of &quot;repr()&quot; customized for</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">abbreviated displays of large or deeply nested containers:</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">abbreviated displays of large or deeply nested containers:</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; import repr<span class="TextSegSigDiff">lib</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; import repr</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; repr<span class="TextSegSigDiff">lib</span>.repr(set('supercalifragilisticexpialidocious'))</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; repr.repr(set('supercalifragilisticexpialidocious'))</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &quot;<span class="TextSegSigDiff">{</span>'a', 'c', 'd', 'e', 'f', 'g', ...<span class="TextSegSigDiff">}</span>&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &quot;<span class="TextSegSigDiff">set([</span>'a', 'c', 'd', 'e', 'f', 'g', ...<span class="TextSegSigDiff">])</span>&quot;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;pprint&quot; module offers more sophisticated control over printing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;pprint&quot; module offers more sophisticated control over printing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">both built-in and user defined objects in a way that is readable by</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">both built-in and user defined objects in a way that is readable by</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the interpreter. When the result is longer than one line, the &quot;pretty</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the interpreter. When the result is longer than one line, the &quot;pretty</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">printer&quot; adds line breaks and indentation to more clearly reveal data</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">printer&quot; adds line breaks and indentation to more clearly reveal data</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">structure:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">structure:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import pprint</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import pprint</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; 'yellow'], 'blue']]]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; 'yellow'], 'blue']]]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; pprint.pprint(t, width=30)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; pprint.pprint(t, width=30)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [[[['black', 'cyan'],</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [[[['black', 'cyan'],</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; 'white',</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; 'white',</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; ['green', 'red']],</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; ['green', 'red']],</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; [['magenta', 'yellow'],</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; [['magenta', 'yellow'],</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; 'blue']]]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp;&nbsp; 'blue']]]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;textwrap&quot; module formats paragraphs of text to fit a given screen</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;textwrap&quot; module formats paragraphs of text to fit a given screen</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">width:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">width:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import textwrap</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import textwrap</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; doc = &quot;&quot;&quot;The wrap() method is just like fill() except that it returns</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; doc = &quot;&quot;&quot;The wrap() method is just like fill() except that it returns</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ... a list of strings instead of one big string with newlines to separate</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... a list of strings instead of one big string with newlines to separate</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ... the wrapped lines.&quot;&quot;&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ... the wrapped lines.&quot;&quot;&quot;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>textwrap.fill(doc, width=40<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print textwrap.fill(doc, width=40)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; The wrap() method is just like fill()</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; The wrap() method is just like fill()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; except that it returns a list of strings</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; except that it returns a list of strings</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; instead of one big string with newlines</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; instead of one big string with newlines</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; to separate the wrapped lines.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; to separate the wrapped lines.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;locale&quot; module accesses a database of culture specific data</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;locale&quot; module accesses a database of culture specific data</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">formats. The grouping attribute of locale's format function provides a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">formats. The grouping attribute of locale's format function provides a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">direct way of formatting numbers with group separators:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">direct way of formatting numbers with group separators:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import locale</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import locale</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; locale.setlocale(locale.LC_ALL, 'English_United States.1252')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; locale.setlocale(locale.LC_ALL, 'English_United States.1252')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'English_United States.1252'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'English_United States.1252'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; conv = locale.localeconv()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # get a mapping of conventions</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; conv = locale.localeconv()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # get a mapping of conventions</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x = 1234567.8</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; x = 1234567.8</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; locale.format(&quot;%d&quot;, x, grouping=True)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; locale.format(&quot;%d&quot;, x, grouping=True)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; '1,234,567'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; '1,234,567'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; locale.format_string(&quot;%s%.*f&quot;, (conv['currency_symbol'],</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; locale.format_string(&quot;%s%.*f&quot;, (conv['currency_symbol'],</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; conv['frac_digits'], x), grouping=True)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; conv['frac_digits'], x), grouping=True)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; '$1,234,567.80'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; '$1,234,567.80'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Templating</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Templating</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">==========</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">==========</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;string&quot; module includes a versatile &quot;Template&quot; class with a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;string&quot; module includes a versatile &quot;Template&quot; class with a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">simplified syntax suitable for editing by end-users.&nbsp; This allows</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">simplified syntax suitable for editing by end-users.&nbsp; This allows</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">users to customize their applications without having to alter the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">users to customize their applications without having to alter the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">application.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">application.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The format uses placeholder names formed by &quot;$&quot; with valid Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The format uses placeholder names formed by &quot;$&quot; with valid Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">identifiers (alphanumeric characters and underscores).&nbsp; Surrounding</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">identifiers (alphanumeric characters and underscores).&nbsp; Surrounding</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the placeholder with braces allows it to be followed by more</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the placeholder with braces allows it to be followed by more</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">alphanumeric letters with no intervening spaces.&nbsp; Writing &quot;$$&quot; creates</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">alphanumeric letters with no intervening spaces.&nbsp; Writing &quot;$$&quot; creates</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">a single escaped &quot;$&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">a single escaped &quot;$&quot;:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from string import Template</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from string import Template</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t = Template('${village}folk send $$10 to $cause.')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t = Template('${village}folk send $$10 to $cause.')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t.substitute(village='Nottingham', cause='the ditch fund')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t.substitute(village='Nottingham', cause='the ditch fund')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'Nottinghamfolk send $10 to the ditch fund.'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'Nottinghamfolk send $10 to the ditch fund.'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;substitute()&quot; method raises a &quot;KeyError&quot; when a placeholder is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;substitute()&quot; method raises a &quot;KeyError&quot; when a placeholder is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">not supplied in a dictionary or a keyword argument.&nbsp; For mail-merge</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">not supplied in a dictionary or a keyword argument.&nbsp; For mail-merge</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">style applications, user supplied data may be incomplete and the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">style applications, user supplied data may be incomplete and the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;safe_substitute()&quot; method may be more appropriate --- it will leave</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;safe_substitute()&quot; method may be more appropriate --- it will leave</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">placeholders unchanged if data is missing:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">placeholders unchanged if data is missing:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t = Template('Return the $item to $owner.')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t = Template('Return the $item to $owner.')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d = dict(item='unladen swallow')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d = dict(item='unladen swallow')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t.substitute(d)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t.substitute(d)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; KeyError: 'owner'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; KeyError: 'owner'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t.safe_substitute(d)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t.safe_substitute(d)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 'Return the unladen swallow to $owner.'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 'Return the unladen swallow to $owner.'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Template subclasses can specify a custom delimiter.&nbsp; For example, a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Template subclasses can specify a custom delimiter.&nbsp; For example, a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">batch renaming utility for a photo browser may elect to use percent</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">batch renaming utility for a photo browser may elect to use percent</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">signs for placeholders such as the current date, image sequence</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">signs for placeholders such as the current date, image sequence</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">number, or file format:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">number, or file format:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import time, os.path</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import time, os.path</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg']</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg']</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; class BatchRename(Template):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; class BatchRename(Template):</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; delimiter = '%'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; delimiter = '%'</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; fmt = input('Enter rename style (%d-date %n-seqnum %f-format):&nbsp; ')</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; fmt = <span class="TextSegSigDiff">raw_</span>input('Enter rename style (%d-date %n-seqnum %f-format):&nbsp; ')</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; Enter rename style (%d-date %n-seqnum %f-format):&nbsp; Ashley_%n%f</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; Enter rename style (%d-date %n-seqnum %f-format):&nbsp; Ashley_%n%f</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t = BatchRename(fmt)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; t = BatchRename(fmt)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; date = time.strftime('%d%b%y')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; date = time.strftime('%d%b%y')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for i, filename in enumerate(photofiles):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; for i, filename in enumerate(photofiles):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; base, ext = os.path.splitext(filename)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; base, ext = os.path.splitext(filename)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; newname = t.substitute(d=date, n=i, f=ext)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; newname = t.substitute(d=date, n=i, f=ext)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>'{0} --&gt; {1}'.format(filename, newname<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; print '{0} --&gt; {1}'.format(filename, newname)</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; img_1074.jpg --&gt; Ashley_0.jpg</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; img_1074.jpg --&gt; Ashley_0.jpg</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; img_1076.jpg --&gt; Ashley_1.jpg</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; img_1076.jpg --&gt; Ashley_1.jpg</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; img_1077.jpg --&gt; Ashley_2.jpg</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; img_1077.jpg --&gt; Ashley_2.jpg</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Another application for templating is separating program logic from</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Another application for templating is separating program logic from</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the details of multiple output formats.&nbsp; This makes it possible to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the details of multiple output formats.&nbsp; This makes it possible to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">substitute custom templates for XML files, plain text reports, and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">substitute custom templates for XML files, plain text reports, and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">HTML web reports.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">HTML web reports.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Working with Binary Data Record Layouts</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Working with Binary Data Record Layouts</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=======================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=======================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;struct&quot; module provides &quot;pack()&quot; and &quot;unpack()&quot; functions for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;struct&quot; module provides &quot;pack()&quot; and &quot;unpack()&quot; functions for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">working with variable length binary record formats.&nbsp; The following</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">working with variable length binary record formats.&nbsp; The following</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">example shows how to loop through header information in a ZIP file</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">example shows how to loop through header information in a ZIP file</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">without using the &quot;zipfile&quot; module.&nbsp; Pack codes &quot;&quot;H&quot;&quot; and &quot;&quot;I&quot;&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">without using the &quot;zipfile&quot; module.&nbsp; Pack codes &quot;&quot;H&quot;&quot; and &quot;&quot;I&quot;&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">represent two and four byte unsigned numbers respectively.&nbsp; The &quot;&quot;&lt;&quot;&quot;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">represent two and four byte unsigned numbers respectively.&nbsp; The &quot;&quot;&lt;&quot;&quot;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">indicates that they are standard size and in little-endian byte order:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">indicates that they are standard size and in little-endian byte order:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; import struct</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import struct</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">with</span> open('myfile.zip', 'rb') <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">f:</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">data</span> <span class="TextSegSigDiff">=</span> open('myfile.zip', 'rb')<span class="TextSegSigDiff">.read()</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">data</span> <span class="TextSegSigDiff">=</span> <span class="TextSegSigDiff">f.read()</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; start = 0</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; start = 0</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; for i in range(3):&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # show the first 3 file headers</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; for i in range(3):&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # show the first 3 file headers</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; start += 14</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; start += 14</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; fields = struct.unpack('&lt;IIIHH', data[start:start+16])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; fields = struct.unpack('&lt;IIIHH', data[start:start+16])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; crc32, comp_size, uncomp_size, filenamesize, extra_size = fields</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; crc32, comp_size, uncomp_size, filenamesize, extra_size = fields</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; start += 16</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; start += 16</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; filename = data[start:start+filenamesize]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; filename = data[start:start+filenamesize]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; start += filenamesize</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; start += filenamesize</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; extra = data[start:start+extra_size]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; extra = data[start:start+extra_size]</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>filename, hex(crc32), comp_size, uncomp_size<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; print filename, hex(crc32), comp_size, uncomp_size</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; start += extra_size + comp_size&nbsp; &nbsp;&nbsp; # skip to the next header</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; start += extra_size + comp_size&nbsp; &nbsp;&nbsp; # skip to the next header</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Multi-threading</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Multi-threading</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===============</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===============</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Threading is a technique for decoupling tasks which are not</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Threading is a technique for decoupling tasks which are not</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">sequentially dependent.&nbsp; Threads can be used to improve the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">sequentially dependent.&nbsp; Threads can be used to improve the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">responsiveness of applications that accept user input while other</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">responsiveness of applications that accept user input while other</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">tasks run in the background.&nbsp; A related use case is running I/O in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">tasks run in the background.&nbsp; A related use case is running I/O in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">parallel with computations in another thread.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">parallel with computations in another thread.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The following code shows how the high level &quot;threading&quot; module can run</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The following code shows how the high level &quot;threading&quot; module can run</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">tasks in background while the main program continues to run:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">tasks in background while the main program continues to run:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; import threading, zipfile</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import threading, zipfile</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; class AsyncZip(threading.Thread):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; class AsyncZip(threading.Thread):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, infile, outfile):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def __init__(self, infile, outfile):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; threading.Thread.__init__(self)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; threading.Thread.__init__(self)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.infile = infile</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.infile = infile</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.outfile = outfile</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.outfile = outfile</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def run(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; def run(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f.write(self.infile)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f.write(self.infile)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f.close()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; f.close()</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print<span class="TextSegSigDiff">(</span>'Finished background zip of:', self.infile<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print 'Finished background zip of: ', self.infile</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; background = AsyncZip('mydata.txt', 'myarchive.zip')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; background = AsyncZip('mydata.txt', 'myarchive.zip')</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; background.start()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; background.start()</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>'The main program continues to run in foreground.'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; print 'The main program continues to run in foreground.'</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; background.join()&nbsp; &nbsp; # Wait for the background task to finish</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; background.join()&nbsp; &nbsp; # Wait for the background task to finish</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; print<span class="TextSegSigDiff">(</span>'Main program waited until background was done.'<span class="TextSegSigDiff">)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; print 'Main program waited until background was done.'</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The principal challenge of multi-threaded applications is coordinating</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The principal challenge of multi-threaded applications is coordinating</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">threads that share data or other resources.&nbsp; To that end, the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">threads that share data or other resources.&nbsp; To that end, the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">threading module provides a number of synchronization primitives</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">threading module provides a number of synchronization primitives</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">including locks, events, condition variables, and semaphores.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">including locks, events, condition variables, and semaphores.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">While those tools are powerful, minor design errors can result in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">While those tools are powerful, minor design errors can result in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">problems that are difficult to reproduce.&nbsp; So, the preferred approach</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">problems that are difficult to reproduce.&nbsp; So, the preferred approach</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">to task coordination is to concentrate all access to a resource in a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">to task coordination is to concentrate all access to a resource in a</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">single thread and then use the &quot;queue&quot; module to feed that thread with</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">single thread and then use the &quot;Queue&quot; module to feed that thread with</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">requests from other threads. Applications using &quot;Queue&quot; objects <span class="TextSegSigDiff">for</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">requests from other threads. Applications using &quot;Queue<span class="TextSegSigDiff">.Queue</span>&quot; objects</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">inter-thread communication and coordination are easier to design, <span class="TextSegSigDiff">more</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">for</span> inter-thread communication and coordination are easier to design,</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">readable, and more reliable.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">more</span> readable, and more reliable.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Logging</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Logging</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=======</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=======</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;logging&quot; module offers a full featured and flexible logging</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;logging&quot; module offers a full featured and flexible logging</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">system. At its simplest, log messages are sent to a file or to</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">system. At its simplest, log messages are sent to a file or to</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&quot;sys.stderr&quot;:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&quot;sys.stderr&quot;:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; import logging</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; import logging</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; logging.debug('Debugging information')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; logging.debug('Debugging information')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; logging.info('Informational message')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; logging.info('Informational message')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; logging.warning('Warning:config file %s not found', 'server.conf')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; logging.warning('Warning:config file %s not found', 'server.conf')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; logging.error('Error occurred')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; logging.error('Error occurred')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; logging.critical('Critical error -- shutting down')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; logging.critical('Critical error -- shutting down')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This produces the following output:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This produces the following output:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; WARNING:root:Warning:config file server.conf not found</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; WARNING:root:Warning:config file server.conf not found</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ERROR:root:Error occurred</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ERROR:root:Error occurred</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; CRITICAL:root:Critical error -- shutting down</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; CRITICAL:root:Critical error -- shutting down</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">By default, informational and debugging messages are suppressed and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">By default, informational and debugging messages are suppressed and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">the output is sent to standard error.&nbsp; Other output options include</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">the output is sent to standard error.&nbsp; Other output options include</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">routing messages through email, datagrams, sockets, or to an HTTP</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">routing messages through email, datagrams, sockets, or to an HTTP</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Server.&nbsp; New filters can select different routing based on message</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Server.&nbsp; New filters can select different routing based on message</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">priority: &quot;DEBUG&quot;, &quot;INFO&quot;, &quot;WARNING&quot;, &quot;ERROR&quot;, and &quot;CRITICAL&quot;.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">priority: &quot;DEBUG&quot;, &quot;INFO&quot;, &quot;WARNING&quot;, &quot;ERROR&quot;, and &quot;CRITICAL&quot;.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The logging system can be configured directly from Python or can be</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The logging system can be configured directly from Python or can be</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">loaded from a user editable configuration file for customized logging</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">loaded from a user editable configuration file for customized logging</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">without altering the application.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">without altering the application.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Weak References</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Weak References</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">===============</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">===============</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python does automatic memory management (reference counting for most</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python does automatic memory management (reference counting for most</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">objects and *garbage collection* to eliminate cycles).&nbsp; The memory is</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">objects and *garbage collection* to eliminate cycles).&nbsp; The memory is</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">freed shortly after the last reference to it has been eliminated.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">freed shortly after the last reference to it has been eliminated.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This approach works fine for most applications but occasionally there</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This approach works fine for most applications but occasionally there</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">is a need to track objects only as long as they are being used by</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">is a need to track objects only as long as they are being used by</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">something else. Unfortunately, just tracking them creates a reference</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">something else. Unfortunately, just tracking them creates a reference</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that makes them permanent. The &quot;weakref&quot; module provides tools for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that makes them permanent. The &quot;weakref&quot; module provides tools for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">tracking objects without creating a reference.&nbsp; When the object is no</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">tracking objects without creating a reference.&nbsp; When the object is no</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">longer needed, it is automatically removed from a weakref table and a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">longer needed, it is automatically removed from a weakref table and a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">callback is triggered for weakref objects.&nbsp; Typical applications</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">callback is triggered for weakref objects.&nbsp; Typical applications</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">include caching objects that are expensive to create:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">include caching objects that are expensive to create:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import weakref, gc</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import weakref, gc</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; class A:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; class A:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; def __init__(self, value):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; def __init__(self, value):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; self.value = value</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; self.value = value</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; def __repr__(self):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp;&nbsp; def __repr__(self):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return str(self.value)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; return str(self.value)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; ...</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = A(10)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # create a reference</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = A(10)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # create a reference</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d = weakref.WeakValueDictionary()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d = weakref.WeakValueDictionary()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d['primary'] = a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # does not create a reference</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d['primary'] = a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # does not create a reference</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d['primary']&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # fetch the object if it is still alive</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d['primary']&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # fetch the object if it is still alive</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 10</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 10</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; del a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # remove the one reference</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; del a&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # remove the one reference</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; gc.collect()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # run garbage collection right away</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; gc.collect()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # run garbage collection right away</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d['primary']&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # entry was automatically removed</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d['primary']&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # entry was automatically removed</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Traceback (most recent call last):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; d['primary']&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # entry was automatically removed</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; d['primary']&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # entry was automatically removed</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; File &quot;C:/python<span class="TextSegSigDiff">3</span>6/lib/weakref.py&quot;, line 46, in __getitem__</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; File &quot;C:/python<span class="TextSegSigDiff">2</span>6/lib/weakref.py&quot;, line 46, in __getitem__</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; o = self.data[key]()</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; o = self.data[key]()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; KeyError: 'primary'</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; KeyError: 'primary'</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Tools for Working with Lists</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Tools for Working with Lists</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">============================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">============================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Many data structure needs can be met with the built-in list type.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Many data structure needs can be met with the built-in list type.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">However, sometimes there is a need for alternative implementations</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">However, sometimes there is a need for alternative implementations</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">with different performance trade-offs.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">with different performance trade-offs.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;array&quot; module provides an &quot;array()&quot; object that is like a list</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;array&quot; module provides an &quot;array()&quot; object that is like a list</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">that stores only homogeneous data and stores it more compactly.&nbsp; The</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">that stores only homogeneous data and stores it more compactly.&nbsp; The</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">following example shows an array of numbers stored as two byte</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">following example shows an array of numbers stored as two byte</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">unsigned binary numbers (typecode &quot;&quot;H&quot;&quot;) rather than the usual 16</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">unsigned binary numbers (typecode &quot;&quot;H&quot;&quot;) rather than the usual 16</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">bytes per entry for regular lists of Python int objects:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">bytes per entry for regular lists of Python int objects:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from array import array</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from array import array</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = array('H', [4000, 10, 700, 22222])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a = array('H', [4000, 10, 700, 22222])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sum(a)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sum(a)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 26932</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 26932</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a[1:3]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; a[1:3]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; array('H', [10, 700])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; array('H', [10, 700])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;collections&quot; module provides a &quot;deque()&quot; object that is like a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;collections&quot; module provides a &quot;deque()&quot; object that is like a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">list with faster appends and pops from the left side but slower</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">list with faster appends and pops from the left side but slower</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">lookups in the middle. These objects are well suited for implementing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">lookups in the middle. These objects are well suited for implementing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">queues and breadth first tree searches:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">queues and breadth first tree searches:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from collections import deque</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from collections import deque</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d = deque([&quot;task1&quot;, &quot;task2&quot;, &quot;task3&quot;])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d = deque([&quot;task1&quot;, &quot;task2&quot;, &quot;task3&quot;])</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d.append(&quot;task4&quot;)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; d.append(&quot;task4&quot;)</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print<span class="TextSegSigDiff">(</span>&quot;Handling&quot;, d.popleft(<span class="TextSegSigDiff">)</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; print &quot;Handling&quot;, d.popleft()</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; Handling task1</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; Handling task1</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; unsearched = deque([starting_node])</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; unsearched = deque([starting_node])</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; def breadth_first_search(unsearched):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; def breadth_first_search(unsearched):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; node = unsearched.popleft()</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; node = unsearched.popleft()</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; for m in gen_moves(node):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; for m in gen_moves(node):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if is_goal(m):</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if is_goal(m):</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return m</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return m</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; unsearched.append(m)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; unsearched.append(m)</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">In addition to alternative list implementations, the library also</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">In addition to alternative list implementations, the library also</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">offers other tools such as the &quot;bisect&quot; module with functions for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">offers other tools such as the &quot;bisect&quot; module with functions for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">manipulating sorted lists:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">manipulating sorted lists:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import bisect</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; import bisect</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; bisect.insort(scores, (300, 'ruby'))</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; bisect.insort(scores, (300, 'ruby'))</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; scores</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; scores</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;heapq&quot; module provides functions for implementing heaps based on</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;heapq&quot; module provides functions for implementing heaps based on</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">regular lists.&nbsp; The lowest valued entry is always kept at position</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">regular lists.&nbsp; The lowest valued entry is always kept at position</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">zero.&nbsp; This is useful for applications which repeatedly access the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">zero.&nbsp; This is useful for applications which repeatedly access the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">smallest element but do not want to run a full list sort:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">smallest element but do not want to run a full list sort:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from heapq import heapify, heappop, heappush</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from heapq import heapify, heappop, heappush</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; heapify(data)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # rearrange the list into heap order</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; heapify(data)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # rearrange the list into heap order</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; heappush(data, -5)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # add a new entry</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; heappush(data, -5)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; # add a new entry</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [heappop(data) for i in range(3)]&nbsp; # fetch the three smallest entries</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; [heappop(data) for i in range(3)]&nbsp; # fetch the three smallest entries</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; [-5, 0, 1]</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; [-5, 0, 1]</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Decimal Floating Point Arithmetic</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Decimal Floating Point Arithmetic</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">=================================</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">=================================</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;decimal&quot; module offers a &quot;Decimal&quot; datatype for decimal floating</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;decimal&quot; module offers a &quot;Decimal&quot; datatype for decimal floating</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">point arithmetic.&nbsp; Compared to the built-in &quot;float&quot; implementation of</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">point arithmetic.&nbsp; Compared to the built-in &quot;float&quot; implementation of</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">binary floating point, the class is especially helpful for</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">binary floating point, the class is especially helpful for</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* financial applications and other uses which require exact decimal</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* financial applications and other uses which require exact decimal</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; representation,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; representation,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* control over precision,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* control over precision,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* control over rounding to meet legal or regulatory requirements,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* control over rounding to meet legal or regulatory requirements,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* tracking of significant decimal places, or</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* tracking of significant decimal places, or</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* applications where the user expects the results to match</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* applications where the user expects the results to match</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; calculations done by hand.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; calculations done by hand.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For example, calculating a 5% tax on a 70 cent phone charge gives</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For example, calculating a 5% tax on a 70 cent phone charge gives</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">different results in decimal floating point and binary floating point.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">different results in decimal floating point and binary floating point.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The difference becomes significant if the results are rounded to the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The difference becomes significant if the results are rounded to the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">nearest cent:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">nearest cent:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from decimal import *</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; from decimal import *</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">round(</span>Decimal('0.70') * Decimal('1.05'<span class="TextSegSigDiff">),</span> <span class="TextSegSigDiff">2</span>)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; <span class="TextSegSigDiff">x</span> <span class="TextSegSigDiff">=</span> Decimal('0.70') * Decimal('1.05')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">x</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Decimal('0.7350')</span></td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">x.quantize(Decimal('0.01'))</span>&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">round</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">nearest</span> <span class="TextSegSigDiff">cent</span></td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;&nbsp; Decimal('0.74')</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; Decimal('0.74')</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; round(.70 * 1.05, 2)</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">&nbsp;&nbsp; &gt;&gt;&gt; round(.70 * 1.05, 2)&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">#</span> <span class="TextSegSigDiff">same</span> <span class="TextSegSigDiff">calculation</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">floats</span></td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;&nbsp; 0.73</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;&nbsp; 0.73</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;Decimal&quot; result keeps a trailing zero, automatically inferring</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;Decimal&quot; result keeps a trailing zero, automatically inferring</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">four place significance from multiplicands with two place</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">four place significance from multiplicands with two place</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">significance.&nbsp; Decimal reproduces mathematics as done by hand and</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">significance.&nbsp; Decimal reproduces mathematics as done by hand and</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">avoids issues that can arise when binary floating point cannot exactly</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">avoids issues that can arise when binary floating point cannot exactly</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">represent decimal quantities.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">represent decimal quantities.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Exact representation enables the &quot;Decimal&quot; class to perform modulo</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Exact representation enables the &quot;Decimal&quot; class to perform modulo</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">calculations and equality tests that are unsuitable for binary</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">calculations and equality tests that are unsuitable for binary</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">floating point:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">floating point:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; Decimal('1.00') % Decimal('.10')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; Decimal('1.00') % Decimal('.10')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; Decimal('0.00')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Decimal('0.00')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 1.00 % 0.10</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; 1.00 % 0.10</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; 0.09999999999999995</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; 0.09999999999999995</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sum([Decimal('0.1')]*10) == Decimal('1.0')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sum([Decimal('0.1')]*10) == Decimal('1.0')</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; True</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; True</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sum([0.1]*10) == 1.0</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; sum([0.1]*10) == 1.0</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; False</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; False</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">The &quot;decimal&quot; module provides arithmetic with as much precision as</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">The &quot;decimal&quot; module provides arithmetic with as much precision as</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">needed:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">needed:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; getcontext().prec = 36</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; getcontext().prec = 36</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; Decimal(1) / Decimal(7)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; &gt;&gt;&gt; Decimal(1) / Decimal(7)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;&nbsp; Decimal('0.142857142857142857142857142857142857')</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;&nbsp; Decimal('0.142857142857142857142857142857142857')</td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\tutorial\venv.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Virtual</span> <span class="TextSegSigDiff">Environments</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">Packages</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*********************************</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Introduction</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">============</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">applications</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">often</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">packages</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">modules</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">don't</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">come</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">part</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">standard</span> <span class="TextSegSigDiff">library.</span>&nbsp; <span class="TextSegSigDiff">Applications</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">sometimes</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">need</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">specific</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">library,</span> <span class="TextSegSigDiff">because</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">application</span> <span class="TextSegSigDiff">may</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">require</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">particular</span> <span class="TextSegSigDiff">bug</span> <span class="TextSegSigDiff">has</span> <span class="TextSegSigDiff">been</span> <span class="TextSegSigDiff">fixed</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">application</span> <span class="TextSegSigDiff">may</span> <span class="TextSegSigDiff">be</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">written</span> <span class="TextSegSigDiff">using</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">obsolete</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">library's</span> <span class="TextSegSigDiff">interface.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">This</span> <span class="TextSegSigDiff">means</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">may</span> <span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">possible</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">one</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">installation</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">meet</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">requirements</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">every</span> <span class="TextSegSigDiff">application.</span>&nbsp; <span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">application</span> <span class="TextSegSigDiff">A</span> <span class="TextSegSigDiff">needs</span> <span class="TextSegSigDiff">version</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">1.0</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">particular</span> <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">but</span> <span class="TextSegSigDiff">application</span> <span class="TextSegSigDiff">B</span> <span class="TextSegSigDiff">needs</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">2.0,</span> <span class="TextSegSigDiff">then</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">requirements</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">conflict</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">installing</span> <span class="TextSegSigDiff">either</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">1.0</span> <span class="TextSegSigDiff">or</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">2.0</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">leave</span> <span class="TextSegSigDiff">one</span> <span class="TextSegSigDiff">application</span> <span class="TextSegSigDiff">unable</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">run.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">solution</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">problem</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">create</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">*virtual</span> <span class="TextSegSigDiff">environment*,</span> <span class="TextSegSigDiff">a</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">self-contained</span> <span class="TextSegSigDiff">directory</span> <span class="TextSegSigDiff">tree</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">contains</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">installation</span> <span class="TextSegSigDiff">for</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">particular</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">Python,</span> <span class="TextSegSigDiff">plus</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">number</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">additional</span> <span class="TextSegSigDiff">packages.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Different</span> <span class="TextSegSigDiff">applications</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">then</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">different</span> <span class="TextSegSigDiff">virtual</span> <span class="TextSegSigDiff">environments.</span> <span class="TextSegSigDiff">To</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">resolve</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">earlier</span> <span class="TextSegSigDiff">example</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">conflicting</span> <span class="TextSegSigDiff">requirements,</span> <span class="TextSegSigDiff">application</span> <span class="TextSegSigDiff">A</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">its</span> <span class="TextSegSigDiff">own</span> <span class="TextSegSigDiff">virtual</span> <span class="TextSegSigDiff">environment</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">1.0</span> <span class="TextSegSigDiff">installed</span> <span class="TextSegSigDiff">while</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">application</span> <span class="TextSegSigDiff">B</span> <span class="TextSegSigDiff">has</span> <span class="TextSegSigDiff">another</span> <span class="TextSegSigDiff">virtual</span> <span class="TextSegSigDiff">environment</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">2.0.</span> <span class="TextSegSigDiff">If</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">application</span> <span class="TextSegSigDiff">B</span> <span class="TextSegSigDiff">requires</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">library</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">upgraded</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">3.0,</span> <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">will</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">not</span> <span class="TextSegSigDiff">affect</span> <span class="TextSegSigDiff">application</span> <span class="TextSegSigDiff">A's</span> <span class="TextSegSigDiff">environment.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Creating</span> <span class="TextSegSigDiff">Virtual</span> <span class="TextSegSigDiff">Environments</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">=============================</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">used</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">create</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">manage</span> <span class="TextSegSigDiff">virtual</span> <span class="TextSegSigDiff">environments</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">called</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;venv&quot;.</span>&nbsp; <span class="TextSegSigDiff">&quot;venv&quot;</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">usually</span> <span class="TextSegSigDiff">install</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">most</span> <span class="TextSegSigDiff">recent</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">Python</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">available.</span> <span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">have</span> <span class="TextSegSigDiff">multiple</span> <span class="TextSegSigDiff">versions</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">on</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">your</span> <span class="TextSegSigDiff">system,</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">select</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">specific</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">running</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;python3&quot;</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">whichever</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">want.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">To</span> <span class="TextSegSigDiff">create</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">virtual</span> <span class="TextSegSigDiff">environment,</span> <span class="TextSegSigDiff">decide</span> <span class="TextSegSigDiff">upon</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">directory</span> <span class="TextSegSigDiff">where</span> <span class="TextSegSigDiff">you</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">want</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">place</span> <span class="TextSegSigDiff">it,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">run</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;venv&quot;</span> <span class="TextSegSigDiff">module</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">script</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">directory</span> <span class="TextSegSigDiff">path:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">python3</span> <span class="TextSegSigDiff">-m</span> <span class="TextSegSigDiff">venv</span> <span class="TextSegSigDiff">tutorial-env</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">This</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">create</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">&quot;tutorial-env&quot;</span> <span class="TextSegSigDiff">directory</span> <span class="TextSegSigDiff">if</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">doesn't</span> <span class="TextSegSigDiff">exist,</span> <span class="TextSegSigDiff">and</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">also</span> <span class="TextSegSigDiff">create</span> <span class="TextSegSigDiff">directories</span> <span class="TextSegSigDiff">inside</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">containing</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">copy</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Python</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">interpreter,</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">standard</span> <span class="TextSegSigDiff">library,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">various</span> <span class="TextSegSigDiff">supporting</span> <span class="TextSegSigDiff">files.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Once</span> <span class="TextSegSigDiff">you've</span> <span class="TextSegSigDiff">created</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">virtual</span> <span class="TextSegSigDiff">environment,</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">may</span> <span class="TextSegSigDiff">activate</span> <span class="TextSegSigDiff">it.</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegSigDiff">On</span> <span class="TextSegSigDiff">Windows,</span> <span class="TextSegSigDiff">run:</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">tutorial-env\Scripts\activate.bat</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegSigDiff">On</span> <span class="TextSegSigDiff">Unix</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">MacOS,</span> <span class="TextSegSigDiff">run:</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">source</span> <span class="TextSegSigDiff">tutorial-env/bin/activate</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">(This</span> <span class="TextSegSigDiff">script</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">written</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">bash</span> <span class="TextSegSigDiff">shell.</span>&nbsp; <span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">**csh**</span> <span class="TextSegSigDiff">or</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">**fish**</span> <span class="TextSegSigDiff">shells,</span> <span class="TextSegSigDiff">there</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">alternate</span> <span class="TextSegSigDiff">&quot;activate.csh&quot;</span> <span class="TextSegSigDiff">and</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;activate.fish&quot;</span> <span class="TextSegSigDiff">scripts</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">should</span> <span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">instead.)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Activating</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">virtual</span> <span class="TextSegSigDiff">environment</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">change</span> <span class="TextSegSigDiff">your</span> <span class="TextSegSigDiff">shell's</span> <span class="TextSegSigDiff">prompt</span> <span class="TextSegSigDiff">to</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">show</span> <span class="TextSegSigDiff">what</span> <span class="TextSegSigDiff">virtual</span> <span class="TextSegSigDiff">environment</span> <span class="TextSegSigDiff">you're</span> <span class="TextSegSigDiff">using,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">modify</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">environment</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">so</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">running</span> <span class="TextSegSigDiff">&quot;python&quot;</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">get</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">particular</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">and</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">installation</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">Python.</span> <span class="TextSegSigDiff">For</span> <span class="TextSegSigDiff">example:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">$</span> <span class="TextSegSigDiff">source</span> <span class="TextSegSigDiff">~/envs/tutorial-env/bin/activate</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">(tutorial-env)</span> <span class="TextSegSigDiff">$</span> <span class="TextSegSigDiff">python</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">3.5.1</span> <span class="TextSegSigDiff">(default,</span> <span class="TextSegSigDiff">May</span>&nbsp; <span class="TextSegSigDiff">6</span> <span class="TextSegSigDiff">2016,</span> <span class="TextSegSigDiff">10:59:36)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">...</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">import</span> <span class="TextSegSigDiff">sys</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span> <span class="TextSegSigDiff">sys.path</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">['',</span> <span class="TextSegSigDiff">'/usr/local/lib/python35.zip',</span> <span class="TextSegSigDiff">...,</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">'~/envs/tutorial-env/lib/python3.5/site-packages']</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">&gt;&gt;&gt;</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Managing</span> <span class="TextSegSigDiff">Packages</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">pip</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">==========================</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">You</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">install,</span> <span class="TextSegSigDiff">upgrade,</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">remove</span> <span class="TextSegSigDiff">packages</span> <span class="TextSegSigDiff">using</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">program</span> <span class="TextSegSigDiff">called</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">**pip**.</span>&nbsp; <span class="TextSegSigDiff">By</span> <span class="TextSegSigDiff">default</span> <span class="TextSegSigDiff">&quot;pip&quot;</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">install</span> <span class="TextSegSigDiff">packages</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Python</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Package</span> <span class="TextSegSigDiff">Index,</span> <span class="TextSegSigDiff">&lt;https://pypi.python.org/pypi&gt;.</span>&nbsp; <span class="TextSegSigDiff">You</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">browse</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">Package</span> <span class="TextSegSigDiff">Index</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">going</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">your</span> <span class="TextSegSigDiff">web</span> <span class="TextSegSigDiff">browser,</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">can</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">use</span> <span class="TextSegSigDiff">&quot;pip&quot;'s</span> <span class="TextSegSigDiff">limited</span> <span class="TextSegSigDiff">search</span> <span class="TextSegSigDiff">feature:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">(tutorial-env)</span> <span class="TextSegSigDiff">$</span> <span class="TextSegSigDiff">pip</span> <span class="TextSegSigDiff">search</span> <span class="TextSegSigDiff">astronomy</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">skyfield</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">-</span> <span class="TextSegSigDiff">Elegant</span> <span class="TextSegSigDiff">astronomy</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">Python</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">gary</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">-</span> <span class="TextSegSigDiff">Galactic</span> <span class="TextSegSigDiff">astronomy</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">gravitational</span> <span class="TextSegSigDiff">dynamics.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">novas</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">-</span> <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">United</span> <span class="TextSegSigDiff">States</span> <span class="TextSegSigDiff">Naval</span> <span class="TextSegSigDiff">Observatory</span> <span class="TextSegSigDiff">NOVAS</span> <span class="TextSegSigDiff">astronomy</span> <span class="TextSegSigDiff">library</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">astroobs</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <span class="TextSegSigDiff">-</span> <span class="TextSegSigDiff">Provides</span> <span class="TextSegSigDiff">astronomy</span> <span class="TextSegSigDiff">ephemeris</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">plan</span> <span class="TextSegSigDiff">telescope</span> <span class="TextSegSigDiff">observations</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">PyAstronomy</span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">-</span> <span class="TextSegSigDiff">A</span> <span class="TextSegSigDiff">collection</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">astronomy</span> <span class="TextSegSigDiff">related</span> <span class="TextSegSigDiff">tools</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">Python.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">...</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;pip&quot;</span> <span class="TextSegSigDiff">has</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">number</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">subcommands:</span> <span class="TextSegSigDiff">&quot;search&quot;,</span> <span class="TextSegSigDiff">&quot;install&quot;,</span> <span class="TextSegSigDiff">&quot;uninstall&quot;,</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;freeze&quot;,</span> <span class="TextSegSigDiff">etc.</span>&nbsp; <span class="TextSegSigDiff">(Consult</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Installing</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">Modules</span> <span class="TextSegSigDiff">guide</span> <span class="TextSegSigDiff">for</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">complete</span> <span class="TextSegSigDiff">documentation</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">&quot;pip&quot;.)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">You</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">install</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">latest</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">package</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">specifying</span> <span class="TextSegSigDiff">a</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">package's</span> <span class="TextSegSigDiff">name:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">(tutorial-env)</span> <span class="TextSegSigDiff">$</span> <span class="TextSegSigDiff">pip</span> <span class="TextSegSigDiff">install</span> <span class="TextSegSigDiff">novas</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Collecting</span> <span class="TextSegSigDiff">novas</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">Downloading</span> <span class="TextSegSigDiff">novas-3.1.1.3.tar.gz</span> <span class="TextSegSigDiff">(136kB)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Installing</span> <span class="TextSegSigDiff">collected</span> <span class="TextSegSigDiff">packages:</span> <span class="TextSegSigDiff">novas</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">Running</span> <span class="TextSegSigDiff">setup.py</span> <span class="TextSegSigDiff">install</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">novas</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Successfully</span> <span class="TextSegSigDiff">installed</span> <span class="TextSegSigDiff">novas-3.1.1.3</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">You</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">also</span> <span class="TextSegSigDiff">install</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">specific</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">package</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">giving</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">package</span> <span class="TextSegSigDiff">name</span>&nbsp; <span class="TextSegSigDiff">followed</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">&quot;==&quot;</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">number:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">(tutorial-env)</span> <span class="TextSegSigDiff">$</span> <span class="TextSegSigDiff">pip</span> <span class="TextSegSigDiff">install</span> <span class="TextSegSigDiff">requests==2.6.0</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Collecting</span> <span class="TextSegSigDiff">requests==2.6.0</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">Using</span> <span class="TextSegSigDiff">cached</span> <span class="TextSegSigDiff">requests-2.6.0-py2.py3-none-any.whl</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Installing</span> <span class="TextSegSigDiff">collected</span> <span class="TextSegSigDiff">packages:</span> <span class="TextSegSigDiff">requests</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Successfully</span> <span class="TextSegSigDiff">installed</span> <span class="TextSegSigDiff">requests-2.6.0</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">If</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">re-run</span> <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">command,</span> <span class="TextSegSigDiff">&quot;pip&quot;</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">notice</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">requested</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">already</span> <span class="TextSegSigDiff">installed</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">do</span> <span class="TextSegSigDiff">nothing.</span>&nbsp; <span class="TextSegSigDiff">You</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">supply</span> <span class="TextSegSigDiff">a</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">different</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">number</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">get</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">version,</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">you</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">run</span> <span class="TextSegSigDiff">&quot;pip</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">install</span> <span class="TextSegSigDiff">--upgrade&quot;</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">upgrade</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">package</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">latest</span> <span class="TextSegSigDiff">version:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">(tutorial-env)</span> <span class="TextSegSigDiff">$</span> <span class="TextSegSigDiff">pip</span> <span class="TextSegSigDiff">install</span> <span class="TextSegSigDiff">--upgrade</span> <span class="TextSegSigDiff">requests</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Collecting</span> <span class="TextSegSigDiff">requests</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Installing</span> <span class="TextSegSigDiff">collected</span> <span class="TextSegSigDiff">packages:</span> <span class="TextSegSigDiff">requests</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">Found</span> <span class="TextSegSigDiff">existing</span> <span class="TextSegSigDiff">installation:</span> <span class="TextSegSigDiff">requests</span> <span class="TextSegSigDiff">2.6.0</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">Uninstalling</span> <span class="TextSegSigDiff">requests-2.6.0:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; <span class="TextSegSigDiff">Successfully</span> <span class="TextSegSigDiff">uninstalled</span> <span class="TextSegSigDiff">requests-2.6.0</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Successfully</span> <span class="TextSegSigDiff">installed</span> <span class="TextSegSigDiff">requests-2.7.0</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;pip</span> <span class="TextSegSigDiff">uninstall&quot;</span> <span class="TextSegSigDiff">followed</span> <span class="TextSegSigDiff">by</span> <span class="TextSegSigDiff">one</span> <span class="TextSegSigDiff">or</span> <span class="TextSegSigDiff">more</span> <span class="TextSegSigDiff">package</span> <span class="TextSegSigDiff">names</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">remove</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">packages</span> <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">virtual</span> <span class="TextSegSigDiff">environment.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;pip</span> <span class="TextSegSigDiff">show&quot;</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">display</span> <span class="TextSegSigDiff">information</span> <span class="TextSegSigDiff">about</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">particular</span> <span class="TextSegSigDiff">package:</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">(tutorial-env)</span> <span class="TextSegSigDiff">$</span> <span class="TextSegSigDiff">pip</span> <span class="TextSegSigDiff">show</span> <span class="TextSegSigDiff">requests</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">---</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Metadata-Version:</span> <span class="TextSegSigDiff">2.0</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Name:</span> <span class="TextSegSigDiff">requests</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Version:</span> <span class="TextSegSigDiff">2.7.0</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Summary:</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">HTTP</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">Humans.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Home-page:</span> <span class="TextSegSigDiff">http://python-requests.org</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Author:</span> <span class="TextSegSigDiff">Kenneth</span> <span class="TextSegSigDiff">Reitz</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Author-email:</span> <span class="TextSegSigDiff">me@kennethreitz.com</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">License:</span> <span class="TextSegSigDiff">Apache</span> <span class="TextSegSigDiff">2.0</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Location:</span> <span class="TextSegSigDiff">/Users/akuchling/envs/tutorial-env/lib/python3.4/site-packages</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Requires:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;pip</span> <span class="TextSegSigDiff">list&quot;</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">display</span> <span class="TextSegSigDiff">all</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">packages</span> <span class="TextSegSigDiff">installed</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">virtual</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">environment:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">(tutorial-env)</span> <span class="TextSegSigDiff">$</span> <span class="TextSegSigDiff">pip</span> <span class="TextSegSigDiff">list</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">novas</span> <span class="TextSegSigDiff">(3.1.1.3)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">numpy</span> <span class="TextSegSigDiff">(1.9.2)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">pip</span> <span class="TextSegSigDiff">(7.0.3)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">requests</span> <span class="TextSegSigDiff">(2.7.0)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">setuptools</span> <span class="TextSegSigDiff">(16.0)</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;pip</span> <span class="TextSegSigDiff">freeze&quot;</span> <span class="TextSegSigDiff">will</span> <span class="TextSegSigDiff">produce</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">similar</span> <span class="TextSegSigDiff">list</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">installed</span> <span class="TextSegSigDiff">packages,</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">but</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">output</span> <span class="TextSegSigDiff">uses</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">format</span> <span class="TextSegSigDiff">that</span> <span class="TextSegSigDiff">&quot;pip</span> <span class="TextSegSigDiff">install&quot;</span> <span class="TextSegSigDiff">expects.</span> <span class="TextSegSigDiff">A</span> <span class="TextSegSigDiff">common</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">convention</span> <span class="TextSegSigDiff">is</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">put</span> <span class="TextSegSigDiff">this</span> <span class="TextSegSigDiff">list</span> <span class="TextSegSigDiff">in</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">&quot;requirements.txt&quot;</span> <span class="TextSegSigDiff">file:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">(tutorial-env)</span> <span class="TextSegSigDiff">$</span> <span class="TextSegSigDiff">pip</span> <span class="TextSegSigDiff">freeze</span> <span class="TextSegSigDiff">&gt;</span> <span class="TextSegSigDiff">requirements.txt</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">(tutorial-env)</span> <span class="TextSegSigDiff">$</span> <span class="TextSegSigDiff">cat</span> <span class="TextSegSigDiff">requirements.txt</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">novas==3.1.1.3</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">numpy==1.9.2</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">requests==2.7.0</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">&quot;requirements.txt&quot;</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">then</span> <span class="TextSegSigDiff">be</span> <span class="TextSegSigDiff">committed</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">version</span> <span class="TextSegSigDiff">control</span> <span class="TextSegSigDiff">and</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">shipped</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">part</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">an</span> <span class="TextSegSigDiff">application.</span>&nbsp; <span class="TextSegSigDiff">Users</span> <span class="TextSegSigDiff">can</span> <span class="TextSegSigDiff">then</span> <span class="TextSegSigDiff">install</span> <span class="TextSegSigDiff">all</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">necessary</span> <span class="TextSegSigDiff">packages</span> <span class="TextSegSigDiff">with</span> <span class="TextSegSigDiff">&quot;install</span> <span class="TextSegSigDiff">-r&quot;:</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">(tutorial-env)</span> <span class="TextSegSigDiff">$</span> <span class="TextSegSigDiff">pip</span> <span class="TextSegSigDiff">install</span> <span class="TextSegSigDiff">-r</span> <span class="TextSegSigDiff">requirements.txt</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Collecting</span> <span class="TextSegSigDiff">novas==3.1.1.3</span> <span class="TextSegSigDiff">(from</span> <span class="TextSegSigDiff">-r</span> <span class="TextSegSigDiff">requirements.txt</span> <span class="TextSegSigDiff">(line</span> <span class="TextSegSigDiff">1))</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">...</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Collecting</span> <span class="TextSegSigDiff">numpy==1.9.2</span> <span class="TextSegSigDiff">(from</span> <span class="TextSegSigDiff">-r</span> <span class="TextSegSigDiff">requirements.txt</span> <span class="TextSegSigDiff">(line</span> <span class="TextSegSigDiff">2))</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">...</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Collecting</span> <span class="TextSegSigDiff">requests==2.7.0</span> <span class="TextSegSigDiff">(from</span> <span class="TextSegSigDiff">-r</span> <span class="TextSegSigDiff">requirements.txt</span> <span class="TextSegSigDiff">(line</span> <span class="TextSegSigDiff">3))</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">...</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Installing</span> <span class="TextSegSigDiff">collected</span> <span class="TextSegSigDiff">packages:</span> <span class="TextSegSigDiff">novas,</span> <span class="TextSegSigDiff">numpy,</span> <span class="TextSegSigDiff">requests</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp;&nbsp; &nbsp; <span class="TextSegSigDiff">Running</span> <span class="TextSegSigDiff">setup.py</span> <span class="TextSegSigDiff">install</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">novas</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp;&nbsp; <span class="TextSegSigDiff">Successfully</span> <span class="TextSegSigDiff">installed</span> <span class="TextSegSigDiff">novas-3.1.1.3</span> <span class="TextSegSigDiff">numpy-1.9.2</span> <span class="TextSegSigDiff">requests-2.7.0</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">&quot;pip&quot;</span> <span class="TextSegSigDiff">has</span> <span class="TextSegSigDiff">many</span> <span class="TextSegSigDiff">more</span> <span class="TextSegSigDiff">options.</span>&nbsp; <span class="TextSegSigDiff">Consult</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Installing</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">Modules</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">guide</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">complete</span> <span class="TextSegSigDiff">documentation</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">&quot;pip&quot;.</span>&nbsp; <span class="TextSegSigDiff">When</span> <span class="TextSegSigDiff">you've</span> <span class="TextSegSigDiff">written</span> <span class="TextSegSigDiff">a</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">package</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">want</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">make</span> <span class="TextSegSigDiff">it</span> <span class="TextSegSigDiff">available</span> <span class="TextSegSigDiff">on</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">Package</span> <span class="TextSegSigDiff">Index,</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">consult</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">Distributing</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">Modules</span> <span class="TextSegSigDiff">guide.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
</table>
<br/>
&nbsp; &nbsp;
<br/>
File: python-docs-text\python-docs-text\tutorial\whatnow.txt &nbsp;
<br/>
<table class="fc" cellspacing="0" cellpadding="0">
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">What Now?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">What Now?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">*********</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">*********</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Reading this tutorial has probably reinforced your interest in using</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Reading this tutorial has probably reinforced your interest in using</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">Python --- you should be eager to apply Python to solving your real-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">Python --- you should be eager to apply Python to solving your real-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">world problems. Where should you go to learn more?</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">world problems. Where should you go to learn more?</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">This tutorial is part of Python's documentation set.&nbsp;&nbsp; Some other</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">This tutorial is part of Python's documentation set.&nbsp;&nbsp; Some other</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">documents in the set are:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">documents in the set are:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* The Python Standard Library:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* The Python Standard Library:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; You should browse through this manual, which gives complete (though</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; You should browse through this manual, which gives complete (though</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; terse) reference material about types, functions, and the modules in</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; terse) reference material about types, functions, and the modules in</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; the standard library.&nbsp; The standard Python distribution includes a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; the standard library.&nbsp; The standard Python distribution includes a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; *lot* of additional code. There are modules to read Unix mailboxes,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; *lot* of additional code. There are modules to read Unix mailboxes,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; retrieve documents via HTTP, generate random numbers, parse command-</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; retrieve documents via HTTP, generate random numbers, parse command-</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; line options, write CGI programs, compress data, and many other</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; line options, write CGI programs, compress data, and many other</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; tasks. Skimming through the Library Reference will give you an idea</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; tasks. Skimming through the Library Reference will give you an idea</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; of what's available.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; of what's available.</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">* Installing Python Modules explains how to insta<span class="TextSegSigDiff">l</span>l <span class="TextSegSigDiff">additiona</span>l</td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">* Installing Python Modules <span class="TextSegSigDiff">(Legacy</span> <span class="TextSegSigDiff">version)</span> explains how to install</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp; modules written by other Python users.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">external</span> modules written by other Python users.</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* The Python Language Reference: A detailed explanation of Python's</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* The Python Language Reference: A detailed explanation of Python's</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; syntax and semantics.&nbsp; It's heavy reading, but is useful as a</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; syntax and semantics.&nbsp; It's heavy reading, but is useful as a</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; complete guide to the language itself.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; complete guide to the language itself.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">More Python resources:</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">More Python resources:</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* https://www.python.org:&nbsp; The major Python Web site.&nbsp; It contains</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* https://www.python.org:&nbsp; The major Python Web site.&nbsp; It contains</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; code, documentation, and pointers to Python-related pages around the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; code, documentation, and pointers to Python-related pages around the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; Web.&nbsp; This Web site is mirrored in various places around the world,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; Web.&nbsp; This Web site is mirrored in various places around the world,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; such as Europe, Japan, and Australia; a mirror may be faster than</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; such as Europe, Japan, and Australia; a mirror may be faster than</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; the main site, depending on your geographical location.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; the main site, depending on your geographical location.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* https://docs.python.org:&nbsp; Fast access to Python's&nbsp; documentation.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* https://docs.python.org:&nbsp; Fast access to Python's&nbsp; documentation.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* https://pypi.python.org/pypi: The Python Package Index, previously</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* https://pypi.python.org/pypi: The Python Package Index, previously</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; also nicknamed the Cheese Shop, is an index of user-created Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; also nicknamed the Cheese Shop, is an index of user-created Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; modules that are available for download.&nbsp; Once you begin releasing</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; modules that are available for download.&nbsp; Once you begin releasing</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; code, you can register it here so that others can find it.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; code, you can register it here so that others can find it.</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">* https://code.activestate.com/recipes/langs/python/: The Python</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">* https://code.activestate.com/recipes/langs/python/: The Python</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; Cookbook is a sizable collection of code examples, larger modules,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; Cookbook is a sizable collection of code examples, larger modules,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; and useful scripts. Particularly notable contributions are collected</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; and useful scripts. Particularly notable contributions are collected</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; in a book also titled Python Cookbook (O'Reilly &amp; Associates, ISBN</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; in a book also titled Python Cookbook (O'Reilly &amp; Associates, ISBN</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp; 0-596-00797-3.)</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp; 0-596-00797-3.)</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">http://www.pyvideo.org</span> <span class="TextSegSigDiff">collects</span> <span class="TextSegSigDiff">links</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">Python-related</span> <span class="TextSegSigDiff">videos</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">from</span> <span class="TextSegSigDiff">conferences</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">user-group</span> <span class="TextSegSigDiff">meetings.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod"><span class="TextSegSigDiff">*</span> <span class="TextSegSigDiff">https://scipy.org:</span> <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">Scientific</span> <span class="TextSegSigDiff">Python</span> <span class="TextSegSigDiff">project</span> <span class="TextSegSigDiff">includes</span> <span class="TextSegSigDiff">modules</span></td>
<td class="AlignCenter">+-</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">fast</span> <span class="TextSegSigDiff">array</span> <span class="TextSegSigDiff">computations</span> <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">manipulations</span> <span class="TextSegSigDiff">plus</span> <span class="TextSegSigDiff">a</span> <span class="TextSegSigDiff">host</span> <span class="TextSegSigDiff">of</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">packages</span> <span class="TextSegSigDiff">for</span> <span class="TextSegSigDiff">such</span> <span class="TextSegSigDiff">things</span> <span class="TextSegSigDiff">as</span> <span class="TextSegSigDiff">linear</span> <span class="TextSegSigDiff">algebra,</span> <span class="TextSegSigDiff">Fourier</span> <span class="TextSegSigDiff">transforms,</span> <span class="TextSegSigDiff">non-</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">linear</span> <span class="TextSegSigDiff">solvers,</span> <span class="TextSegSigDiff">random</span> <span class="TextSegSigDiff">number</span> <span class="TextSegSigDiff">distributions,</span> <span class="TextSegSigDiff">statistical</span> <span class="TextSegSigDiff">analysis</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">&nbsp; <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">the</span> <span class="TextSegSigDiff">like.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">For Python-related questions and problem reports, you can post to the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">For Python-related questions and problem reports, you can post to the</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">newsgroup *comp.lang.python*, or send them to the mailing list at</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">newsgroup *comp.lang.python*, or send them to the mailing list at</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">python-list@python.org.&nbsp; The newsgroup and mailing list are gatewayed,</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">python-list@python.org.&nbsp; The newsgroup and mailing list are gatewayed,</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSame">so messages posted to one will automatically be forwarded to the</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">so messages posted to one will automatically be forwarded to the</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">other.&nbsp; There are <span class="TextSegSigDiff">h</span>un<span class="TextSegSigDiff">dreds</span> <span class="TextSegSigDiff">of</span> postings a day<span class="TextSegSigDiff">,</span> <span class="TextSegSigDiff">a</span><span class="TextSegSigDiff">sking</span> <span class="TextSegSigDiff">(and</span> <span class="TextSegSigDiff">answ</span>er<span class="TextSegSigDiff">ing)</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod">other.&nbsp; There are <span class="TextSegSigDiff">aro</span>un<span class="TextSegSigDiff">d</span> <span class="TextSegSigDiff">120</span> postings a day <span class="TextSegSigDiff">(with</span> <span class="TextSegSigDiff">peaks</span> <span class="TextSegSigDiff">up</span> <span class="TextSegSigDiff">to</span> <span class="TextSegSigDiff">sev</span>er<span class="TextSegSigDiff">al</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">questions, suggesting new features, <span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">announcing</span> <span class="TextSegSigDiff">new</span> <span class="TextSegSigDiff">modules.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">hundred),</span> <span class="TextSegSigDiff">asking</span> <span class="TextSegSigDiff">(and</span> <span class="TextSegSigDiff">answering)</span> questions, suggesting new features,</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod"><span class="TextSegSigDiff">Mailing</span> <span class="TextSegSigDiff">list</span> <span class="TextSegSigDiff">archives</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">available</span> <span class="TextSegSigDiff">at</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod"><span class="TextSegSigDiff">https://mail.python.org/pipermail/.</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionAll">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">=</td>
<td class="TextItemSame">&nbsp;</td>
</tr>
<tr class="SectionBegin">
<td class="TextItemSigMod">Before posting, be sure to check the lis<span class="TextSegSigDiff">t</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">Frequently</span> <span class="TextSegSigDiff">Asked</span></td>
<td class="AlignCenter">&lt;&gt;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">and</span> <span class="TextSegSigDiff">announcing</span> <span class="TextSegSigDiff">new</span> <span class="TextSegSigDiff">modules.</span> Before posting, be sure to check the lis<span class="TextSegSigDiff">t</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">Que<span class="TextSegSigDiff">s</span>tions (also called the FAQ).&nbsp; <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">FAQ</span> <span class="TextSegSigDiff">answers</span> ma<span class="TextSegSigDiff">ny</span> <span class="TextSegSigDiff">of</span> t<span class="TextSegSigDiff">he</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">Fre</span>que<span class="TextSegSigDiff">ntly</span> <span class="TextSegSigDiff">Asked</span> <span class="TextSegSigDiff">Ques</span>tions (also called the FAQ).&nbsp; Ma<span class="TextSegSigDiff">iling</span> <span class="TextSegSigDiff">lis</span>t</td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSame">&nbsp;</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">archives</span> <span class="TextSegSigDiff">are</span> <span class="TextSegSigDiff">available</span> <span class="TextSegSigDiff">at</span> <span class="TextSegSigDiff">https://mail.python.org/pipermail/.</span> <span class="TextSegSigDiff">The</span> <span class="TextSegSigDiff">FAQ</span></td>
</tr>
<tr class="SectionMiddle">
<td class="TextItemSigMod">questions that come up again and again, and may <span class="TextSegSigDiff">already</span> <span class="TextSegSigDiff">contain</span> <span class="TextSegSigDiff">the</span></td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">answers</span> <span class="TextSegSigDiff">many</span> <span class="TextSegSigDiff">of</span> <span class="TextSegSigDiff">the</span> questions that come up again and again, and may</td>
</tr>
<tr class="SectionEnd">
<td class="TextItemSigMod">solution for your problem.</td>
<td class="AlignCenter">&nbsp;</td>
<td class="TextItemSigMod"><span class="TextSegSigDiff">already</span> <span class="TextSegSigDiff">contain</span> <span class="TextSegSigDiff">the</span> solution for your problem.</td>
</tr>
</table>
<br/>
</body>
</html>
